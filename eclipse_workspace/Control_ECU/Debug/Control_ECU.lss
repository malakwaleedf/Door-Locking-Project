
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002512  000025a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800070  00800070  000025b6  2**0
                  ALLOC
  3 .stab         00002868  00000000  00000000  000025b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000143a  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000625a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000639a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000650a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 49 0e 	jmp	0x1c92	; 0x1c92 <__vector_4>
      14:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__vector_9>
      28:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_10>
      2c:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <main>
      8a:	0c 94 87 12 	jmp	0x250e	; 0x250e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 12 	jmp	0x24a0	; 0x24a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
#include "buzzer.h"
#include "gpio.h"
#include "common_macros.h"

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of buzzer's pin to output*/
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 cd 06 	call	0xd9a	; 0xd9a <GPIO_setupPinDirection>

	/*turn off buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	/*turn on buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	/*turn off buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DcMotor_Init>:
#include "gpio.h"
#include "pwm.h"
#include "common_macros.h"

void DcMotor_Init(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of dc motor input pins to output*/
	GPIO_setupPinDirection(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN1, PIN_OUTPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 cd 06 	call	0xd9a	; 0xd9a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN2, PIN_OUTPUT);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	67 e0       	ldi	r22, 0x07	; 7
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <GPIO_setupPinDirection>

	/*stop dc motor*/
	GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN1, LOGIC_LOW);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	66 e0       	ldi	r22, 0x06	; 6
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN2, LOGIC_LOW);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	67 e0       	ldi	r22, 0x07	; 7
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <DcMotor_Rotate+0x6>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DcMotor_Rotate+0x8>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3c 83       	std	Y+4, r19	; 0x04
     be6:	2b 83       	std	Y+3, r18	; 0x03
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 f0       	breq	.+40     	; 0xc1a <DcMotor_Rotate+0x4c>
     bf2:	2b 81       	ldd	r18, Y+3	; 0x03
     bf4:	3c 81       	ldd	r19, Y+4	; 0x04
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	d1 f0       	breq	.+52     	; 0xc30 <DcMotor_Rotate+0x62>
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	01 f5       	brne	.+64     	; 0xc44 <DcMotor_Rotate+0x76>
	{
	case DC_MOTOR_STOP:
		GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN1, LOGIC_LOW);
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	66 e0       	ldi	r22, 0x06	; 6
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN2, LOGIC_LOW);
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	67 e0       	ldi	r22, 0x07	; 7
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
     c18:	15 c0       	rjmp	.+42     	; 0xc44 <DcMotor_Rotate+0x76>
		break;
	case DC_MOTOR_CLOCKWISE:
		GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN1, LOGIC_HIGH);
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	66 e0       	ldi	r22, 0x06	; 6
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN2, LOGIC_LOW);
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	67 e0       	ldi	r22, 0x07	; 7
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <DcMotor_Rotate+0x76>
		break;
	case DC_MOTOR_ANTI_CLOCKWISE:
		GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN1, LOGIC_LOW);
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	66 e0       	ldi	r22, 0x06	; 6
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT, DC_MOTOR_IN2, LOGIC_HIGH);
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	67 e0       	ldi	r22, 0x07	; 7
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	0e 94 b8 07 	call	0xf70	; 0xf70 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <PWM_Timer0_Start>
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <EEPROM_writeByte+0x6>
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <EEPROM_writeByte+0x8>
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9a 83       	std	Y+2, r25	; 0x02
     c66:	89 83       	std	Y+1, r24	; 0x01
     c68:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c6a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c6e:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	11 f0       	breq	.+4      	; 0xc7a <EEPROM_writeByte+0x22>
        return ERROR;
     c76:	1c 82       	std	Y+4, r1	; 0x04
     c78:	28 c0       	rjmp	.+80     	; 0xcca <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	80 70       	andi	r24, 0x00	; 0
     c80:	97 70       	andi	r25, 0x07	; 7
     c82:	88 0f       	add	r24, r24
     c84:	89 2f       	mov	r24, r25
     c86:	88 1f       	adc	r24, r24
     c88:	99 0b       	sbc	r25, r25
     c8a:	91 95       	neg	r25
     c8c:	80 6a       	ori	r24, 0xA0	; 160
     c8e:	0e 94 0d 10 	call	0x201a	; 0x201a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c92:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     c96:	88 31       	cpi	r24, 0x18	; 24
     c98:	11 f0       	breq	.+4      	; 0xc9e <EEPROM_writeByte+0x46>
        return ERROR; 
     c9a:	1c 82       	std	Y+4, r1	; 0x04
     c9c:	16 c0       	rjmp	.+44     	; 0xcca <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	0e 94 0d 10 	call	0x201a	; 0x201a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ca4:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     ca8:	88 32       	cpi	r24, 0x28	; 40
     caa:	11 f0       	breq	.+4      	; 0xcb0 <EEPROM_writeByte+0x58>
        return ERROR;
     cac:	1c 82       	std	Y+4, r1	; 0x04
     cae:	0d c0       	rjmp	.+26     	; 0xcca <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	0e 94 0d 10 	call	0x201a	; 0x201a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cb6:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     cba:	88 32       	cpi	r24, 0x28	; 40
     cbc:	11 f0       	breq	.+4      	; 0xcc2 <EEPROM_writeByte+0x6a>
        return ERROR;
     cbe:	1c 82       	std	Y+4, r1	; 0x04
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cc2:	0e 94 02 10 	call	0x2004	; 0x2004 <TWI_stop>
	
    return SUCCESS;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	8c 83       	std	Y+4, r24	; 0x04
     cca:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <EEPROM_readByte+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <EEPROM_readByte+0x8>
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	7c 83       	std	Y+4, r23	; 0x04
     cee:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cf0:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cf4:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	11 f0       	breq	.+4      	; 0xd00 <EEPROM_readByte+0x26>
        return ERROR;
     cfc:	1d 82       	std	Y+5, r1	; 0x05
     cfe:	44 c0       	rjmp	.+136    	; 0xd88 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	80 70       	andi	r24, 0x00	; 0
     d06:	97 70       	andi	r25, 0x07	; 7
     d08:	88 0f       	add	r24, r24
     d0a:	89 2f       	mov	r24, r25
     d0c:	88 1f       	adc	r24, r24
     d0e:	99 0b       	sbc	r25, r25
     d10:	91 95       	neg	r25
     d12:	80 6a       	ori	r24, 0xA0	; 160
     d14:	0e 94 0d 10 	call	0x201a	; 0x201a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     d18:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     d1c:	88 31       	cpi	r24, 0x18	; 24
     d1e:	11 f0       	breq	.+4      	; 0xd24 <EEPROM_readByte+0x4a>
        return ERROR;
     d20:	1d 82       	std	Y+5, r1	; 0x05
     d22:	32 c0       	rjmp	.+100    	; 0xd88 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	0e 94 0d 10 	call	0x201a	; 0x201a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d2a:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     d2e:	88 32       	cpi	r24, 0x28	; 40
     d30:	11 f0       	breq	.+4      	; 0xd36 <EEPROM_readByte+0x5c>
        return ERROR;
     d32:	1d 82       	std	Y+5, r1	; 0x05
     d34:	29 c0       	rjmp	.+82     	; 0xd88 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d36:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d3a:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     d3e:	80 31       	cpi	r24, 0x10	; 16
     d40:	11 f0       	breq	.+4      	; 0xd46 <EEPROM_readByte+0x6c>
        return ERROR;
     d42:	1d 82       	std	Y+5, r1	; 0x05
     d44:	21 c0       	rjmp	.+66     	; 0xd88 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	9a 81       	ldd	r25, Y+2	; 0x02
     d4a:	80 70       	andi	r24, 0x00	; 0
     d4c:	97 70       	andi	r25, 0x07	; 7
     d4e:	88 0f       	add	r24, r24
     d50:	89 2f       	mov	r24, r25
     d52:	88 1f       	adc	r24, r24
     d54:	99 0b       	sbc	r25, r25
     d56:	91 95       	neg	r25
     d58:	81 6a       	ori	r24, 0xA1	; 161
     d5a:	0e 94 0d 10 	call	0x201a	; 0x201a <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d5e:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     d62:	80 34       	cpi	r24, 0x40	; 64
     d64:	11 f0       	breq	.+4      	; 0xd6a <EEPROM_readByte+0x90>
        return ERROR;
     d66:	1d 82       	std	Y+5, r1	; 0x05
     d68:	0f c0       	rjmp	.+30     	; 0xd88 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d6a:	0e 94 37 10 	call	0x206e	; 0x206e <TWI_readByteWithNACK>
     d6e:	eb 81       	ldd	r30, Y+3	; 0x03
     d70:	fc 81       	ldd	r31, Y+4	; 0x04
     d72:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d74:	0e 94 4a 10 	call	0x2094	; 0x2094 <TWI_getStatus>
     d78:	88 35       	cpi	r24, 0x58	; 88
     d7a:	11 f0       	breq	.+4      	; 0xd80 <EEPROM_readByte+0xa6>
        return ERROR;
     d7c:	1d 82       	std	Y+5, r1	; 0x05
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d80:	0e 94 02 10 	call	0x2004	; 0x2004 <TWI_stop>

    return SUCCESS;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8d 83       	std	Y+5, r24	; 0x05
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	08 95       	ret

00000d9a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <GPIO_setupPinDirection+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <GPIO_setupPinDirection+0x8>
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	6a 83       	std	Y+2, r22	; 0x02
     dac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <GPIO_setupPinDirection+0x1c>
     db4:	d5 c0       	rjmp	.+426    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	84 30       	cpi	r24, 0x04	; 4
     dba:	08 f0       	brcs	.+2      	; 0xdbe <GPIO_setupPinDirection+0x24>
     dbc:	d1 c0       	rjmp	.+418    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	3d 83       	std	Y+5, r19	; 0x05
     dc6:	2c 83       	std	Y+4, r18	; 0x04
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	91 05       	cpc	r25, r1
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <GPIO_setupPinDirection+0x3a>
     dd2:	43 c0       	rjmp	.+134    	; 0xe5a <GPIO_setupPinDirection+0xc0>
     dd4:	2c 81       	ldd	r18, Y+4	; 0x04
     dd6:	3d 81       	ldd	r19, Y+5	; 0x05
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	2c f4       	brge	.+10     	; 0xde8 <GPIO_setupPinDirection+0x4e>
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	71 f0       	breq	.+28     	; 0xe02 <GPIO_setupPinDirection+0x68>
     de6:	bc c0       	rjmp	.+376    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
     de8:	2c 81       	ldd	r18, Y+4	; 0x04
     dea:	3d 81       	ldd	r19, Y+5	; 0x05
     dec:	22 30       	cpi	r18, 0x02	; 2
     dee:	31 05       	cpc	r19, r1
     df0:	09 f4       	brne	.+2      	; 0xdf4 <GPIO_setupPinDirection+0x5a>
     df2:	5f c0       	rjmp	.+190    	; 0xeb2 <GPIO_setupPinDirection+0x118>
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	9d 81       	ldd	r25, Y+5	; 0x05
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	09 f4       	brne	.+2      	; 0xe00 <GPIO_setupPinDirection+0x66>
     dfe:	85 c0       	rjmp	.+266    	; 0xf0a <GPIO_setupPinDirection+0x170>
     e00:	af c0       	rjmp	.+350    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	a1 f4       	brne	.+40     	; 0xe30 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e08:	aa e3       	ldi	r26, 0x3A	; 58
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea e3       	ldi	r30, 0x3A	; 58
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_setupPinDirection+0x8c>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_setupPinDirection+0x88>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	98 c0       	rjmp	.+304    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e30:	aa e3       	ldi	r26, 0x3A	; 58
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ea e3       	ldi	r30, 0x3A	; 58
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <GPIO_setupPinDirection+0xb4>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <GPIO_setupPinDirection+0xb0>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	83 c0       	rjmp	.+262    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	a1 f4       	brne	.+40     	; 0xe88 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e60:	a7 e3       	ldi	r26, 0x37	; 55
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e7 e3       	ldi	r30, 0x37	; 55
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	48 2f       	mov	r20, r24
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 2e       	mov	r0, r18
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <GPIO_setupPinDirection+0xe4>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <GPIO_setupPinDirection+0xe0>
     e82:	84 2b       	or	r24, r20
     e84:	8c 93       	st	X, r24
     e86:	6c c0       	rjmp	.+216    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e88:	a7 e3       	ldi	r26, 0x37	; 55
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e3       	ldi	r30, 0x37	; 55
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <GPIO_setupPinDirection+0x10c>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <GPIO_setupPinDirection+0x108>
     eaa:	80 95       	com	r24
     eac:	84 23       	and	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	57 c0       	rjmp	.+174    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	a1 f4       	brne	.+40     	; 0xee0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     eb8:	a4 e3       	ldi	r26, 0x34	; 52
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e4 e3       	ldi	r30, 0x34	; 52
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_setupPinDirection+0x13c>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_setupPinDirection+0x138>
     eda:	84 2b       	or	r24, r20
     edc:	8c 93       	st	X, r24
     ede:	40 c0       	rjmp	.+128    	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ee0:	a4 e3       	ldi	r26, 0x34	; 52
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e4 e3       	ldi	r30, 0x34	; 52
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <GPIO_setupPinDirection+0x164>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <GPIO_setupPinDirection+0x160>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	2b c0       	rjmp	.+86     	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f10:	a1 e3       	ldi	r26, 0x31	; 49
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e1 e3       	ldi	r30, 0x31	; 49
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <GPIO_setupPinDirection+0x194>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <GPIO_setupPinDirection+0x190>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f38:	a1 e3       	ldi	r26, 0x31	; 49
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e3       	ldi	r30, 0x31	; 49
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_setupPinDirection+0x1bc>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_setupPinDirection+0x1b8>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <GPIO_writePin+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <GPIO_writePin+0x8>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	6a 83       	std	Y+2, r22	; 0x02
     f82:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 30       	cpi	r24, 0x08	; 8
     f88:	08 f0       	brcs	.+2      	; 0xf8c <GPIO_writePin+0x1c>
     f8a:	d5 c0       	rjmp	.+426    	; 0x1136 <GPIO_writePin+0x1c6>
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	08 f0       	brcs	.+2      	; 0xf94 <GPIO_writePin+0x24>
     f92:	d1 c0       	rjmp	.+418    	; 0x1136 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the value required on the chosen pin */
		switch(port_num)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3d 83       	std	Y+5, r19	; 0x05
     f9c:	2c 83       	std	Y+4, r18	; 0x04
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <GPIO_writePin+0x3a>
     fa8:	43 c0       	rjmp	.+134    	; 0x1030 <GPIO_writePin+0xc0>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	2c f4       	brge	.+10     	; 0xfbe <GPIO_writePin+0x4e>
     fb4:	8c 81       	ldd	r24, Y+4	; 0x04
     fb6:	9d 81       	ldd	r25, Y+5	; 0x05
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	71 f0       	breq	.+28     	; 0xfd8 <GPIO_writePin+0x68>
     fbc:	bc c0       	rjmp	.+376    	; 0x1136 <GPIO_writePin+0x1c6>
     fbe:	2c 81       	ldd	r18, Y+4	; 0x04
     fc0:	3d 81       	ldd	r19, Y+5	; 0x05
     fc2:	22 30       	cpi	r18, 0x02	; 2
     fc4:	31 05       	cpc	r19, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <GPIO_writePin+0x5a>
     fc8:	5f c0       	rjmp	.+190    	; 0x1088 <GPIO_writePin+0x118>
     fca:	8c 81       	ldd	r24, Y+4	; 0x04
     fcc:	9d 81       	ldd	r25, Y+5	; 0x05
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	91 05       	cpc	r25, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <GPIO_writePin+0x66>
     fd4:	85 c0       	rjmp	.+266    	; 0x10e0 <GPIO_writePin+0x170>
     fd6:	af c0       	rjmp	.+350    	; 0x1136 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	a1 f4       	brne	.+40     	; 0x1006 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     fde:	ab e3       	ldi	r26, 0x3B	; 59
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	eb e3       	ldi	r30, 0x3B	; 59
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <GPIO_writePin+0x8c>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <GPIO_writePin+0x88>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	98 c0       	rjmp	.+304    	; 0x1136 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1006:	ab e3       	ldi	r26, 0x3B	; 59
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	eb e3       	ldi	r30, 0x3B	; 59
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <GPIO_writePin+0xb4>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <GPIO_writePin+0xb0>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	83 c0       	rjmp	.+262    	; 0x1136 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	a1 f4       	brne	.+40     	; 0x105e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <GPIO_writePin+0xe4>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <GPIO_writePin+0xe0>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	6c c0       	rjmp	.+216    	; 0x1136 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    105e:	a8 e3       	ldi	r26, 0x38	; 56
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e8 e3       	ldi	r30, 0x38	; 56
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <GPIO_writePin+0x10c>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <GPIO_writePin+0x108>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	57 c0       	rjmp	.+174    	; 0x1136 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	a1 f4       	brne	.+40     	; 0x10b6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    108e:	a5 e3       	ldi	r26, 0x35	; 53
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e3       	ldi	r30, 0x35	; 53
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <GPIO_writePin+0x13c>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <GPIO_writePin+0x138>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	40 c0       	rjmp	.+128    	; 0x1136 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10b6:	a5 e3       	ldi	r26, 0x35	; 53
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e5 e3       	ldi	r30, 0x35	; 53
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <GPIO_writePin+0x164>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <GPIO_writePin+0x160>
    10d8:	80 95       	com	r24
    10da:	84 23       	and	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	2b c0       	rjmp	.+86     	; 0x1136 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	81 30       	cpi	r24, 0x01	; 1
    10e4:	a1 f4       	brne	.+40     	; 0x110e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    10e6:	a2 e3       	ldi	r26, 0x32	; 50
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e2 e3       	ldi	r30, 0x32	; 50
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	48 2f       	mov	r20, r24
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 2e       	mov	r0, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <GPIO_writePin+0x194>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	0a 94       	dec	r0
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <GPIO_writePin+0x190>
    1108:	84 2b       	or	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    110e:	a2 e3       	ldi	r26, 0x32	; 50
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e2 e3       	ldi	r30, 0x32	; 50
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <GPIO_writePin+0x1bc>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <GPIO_writePin+0x1b8>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <GPIO_readPin+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <GPIO_readPin+0x8>
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result;
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 30       	cpi	r24, 0x08	; 8
    115c:	18 f4       	brcc	.+6      	; 0x1164 <GPIO_readPin+0x1e>
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	84 30       	cpi	r24, 0x04	; 4
    1162:	10 f0       	brcs	.+4      	; 0x1168 <GPIO_readPin+0x22>
	{
		result =  LOGIC_LOW;
    1164:	19 82       	std	Y+1, r1	; 0x01
    1166:	80 c0       	rjmp	.+256    	; 0x1268 <GPIO_readPin+0x122>
	}
	else
	{
		/* Write the value required on the chosen pin */
		switch(port_num)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3d 83       	std	Y+5, r19	; 0x05
    1170:	2c 83       	std	Y+4, r18	; 0x04
    1172:	4c 81       	ldd	r20, Y+4	; 0x04
    1174:	5d 81       	ldd	r21, Y+5	; 0x05
    1176:	41 30       	cpi	r20, 0x01	; 1
    1178:	51 05       	cpc	r21, r1
    117a:	79 f1       	breq	.+94     	; 0x11da <GPIO_readPin+0x94>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	34 f4       	brge	.+12     	; 0x1192 <GPIO_readPin+0x4c>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	69 f0       	breq	.+26     	; 0x11aa <GPIO_readPin+0x64>
    1190:	6b c0       	rjmp	.+214    	; 0x1268 <GPIO_readPin+0x122>
    1192:	4c 81       	ldd	r20, Y+4	; 0x04
    1194:	5d 81       	ldd	r21, Y+5	; 0x05
    1196:	42 30       	cpi	r20, 0x02	; 2
    1198:	51 05       	cpc	r21, r1
    119a:	b9 f1       	breq	.+110    	; 0x120a <GPIO_readPin+0xc4>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <GPIO_readPin+0x62>
    11a6:	49 c0       	rjmp	.+146    	; 0x123a <GPIO_readPin+0xf4>
    11a8:	5f c0       	rjmp	.+190    	; 0x1268 <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11aa:	e9 e3       	ldi	r30, 0x39	; 57
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <GPIO_readPin+0x7c>
    11be:	55 95       	asr	r21
    11c0:	47 95       	ror	r20
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <GPIO_readPin+0x78>
    11c6:	ca 01       	movw	r24, r20
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	90 70       	andi	r25, 0x00	; 0
    11cc:	88 23       	and	r24, r24
    11ce:	19 f0       	breq	.+6      	; 0x11d6 <GPIO_readPin+0x90>
			{
				result =  LOGIC_HIGH;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	49 c0       	rjmp	.+146    	; 0x1268 <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    11d6:	19 82       	std	Y+1, r1	; 0x01
    11d8:	47 c0       	rjmp	.+142    	; 0x1268 <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    11da:	e6 e3       	ldi	r30, 0x36	; 54
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <GPIO_readPin+0xac>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <GPIO_readPin+0xa8>
    11f6:	ca 01       	movw	r24, r20
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	90 70       	andi	r25, 0x00	; 0
    11fc:	88 23       	and	r24, r24
    11fe:	19 f0       	breq	.+6      	; 0x1206 <GPIO_readPin+0xc0>
			{
				result =  LOGIC_HIGH;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	31 c0       	rjmp	.+98     	; 0x1268 <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    1206:	19 82       	std	Y+1, r1	; 0x01
    1208:	2f c0       	rjmp	.+94     	; 0x1268 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    120a:	e3 e3       	ldi	r30, 0x33	; 51
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a9 01       	movw	r20, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <GPIO_readPin+0xdc>
    121e:	55 95       	asr	r21
    1220:	47 95       	ror	r20
    1222:	8a 95       	dec	r24
    1224:	e2 f7       	brpl	.-8      	; 0x121e <GPIO_readPin+0xd8>
    1226:	ca 01       	movw	r24, r20
    1228:	81 70       	andi	r24, 0x01	; 1
    122a:	90 70       	andi	r25, 0x00	; 0
    122c:	88 23       	and	r24, r24
    122e:	19 f0       	breq	.+6      	; 0x1236 <GPIO_readPin+0xf0>
			{
				result =  LOGIC_HIGH;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	19 c0       	rjmp	.+50     	; 0x1268 <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	17 c0       	rjmp	.+46     	; 0x1268 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    123a:	e0 e3       	ldi	r30, 0x30	; 48
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_readPin+0x10c>
    124e:	55 95       	asr	r21
    1250:	47 95       	ror	r20
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_readPin+0x108>
    1256:	ca 01       	movw	r24, r20
    1258:	81 70       	andi	r24, 0x01	; 1
    125a:	90 70       	andi	r25, 0x00	; 0
    125c:	88 23       	and	r24, r24
    125e:	19 f0       	breq	.+6      	; 0x1266 <GPIO_readPin+0x120>
			{
				result =  LOGIC_HIGH;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	89 83       	std	Y+1, r24	; 0x01
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    1266:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return result;
    1268:	89 81       	ldd	r24, Y+1	; 0x01
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_setupPortDirection+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_setupPortDirection+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	90 f5       	brcc	.+100    	; 0x12f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin required */
		switch(port_num)
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3c 83       	std	Y+4, r19	; 0x04
    1298:	2b 83       	std	Y+3, r18	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	d1 f0       	breq	.+52     	; 0x12d8 <GPIO_setupPortDirection+0x5e>
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	3c 81       	ldd	r19, Y+4	; 0x04
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <GPIO_setupPortDirection+0x3e>
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	61 f0       	breq	.+24     	; 0x12ce <GPIO_setupPortDirection+0x54>
    12b6:	1e c0       	rjmp	.+60     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
    12b8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ba:	3c 81       	ldd	r19, Y+4	; 0x04
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	81 f0       	breq	.+32     	; 0x12e2 <GPIO_setupPortDirection+0x68>
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	81 f0       	breq	.+32     	; 0x12ec <GPIO_setupPortDirection+0x72>
    12cc:	13 c0       	rjmp	.+38     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	80 83       	st	Z, r24
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12d8:	e7 e3       	ldi	r30, 0x37	; 55
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	80 83       	st	Z, r24
    12e0:	09 c0       	rjmp	.+18     	; 0x12f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	80 83       	st	Z, r24
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12ec:	e1 e3       	ldi	r30, 0x31	; 49
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <GPIO_writePort+0x6>
    1308:	00 d0       	rcall	.+0      	; 0x130a <GPIO_writePort+0x8>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	90 f5       	brcc	.+100    	; 0x137c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the required value to the chosen port */
		switch(port_num)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	d1 f0       	breq	.+52     	; 0x1360 <GPIO_writePort+0x5e>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	2c f4       	brge	.+10     	; 0x1340 <GPIO_writePort+0x3e>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	61 f0       	breq	.+24     	; 0x1356 <GPIO_writePort+0x54>
    133e:	1e c0       	rjmp	.+60     	; 0x137c <GPIO_writePort+0x7a>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <GPIO_writePort+0x68>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	91 05       	cpc	r25, r1
    1352:	81 f0       	breq	.+32     	; 0x1374 <GPIO_writePort+0x72>
    1354:	13 c0       	rjmp	.+38     	; 0x137c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 83       	st	Z, r24
    135e:	0e c0       	rjmp	.+28     	; 0x137c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	80 83       	st	Z, r24
    1368:	09 c0       	rjmp	.+18     	; 0x137c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	80 83       	st	Z, r24
    1372:	04 c0       	rjmp	.+8      	; 0x137c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1374:	e2 e3       	ldi	r30, 0x32	; 50
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	80 83       	st	Z, r24
			break;
		}
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <GPIO_readPort+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_readPort+0x8>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	8a 83       	std	Y+2, r24	; 0x02
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 result;

	if(port_num >= NUM_OF_PORTS)
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	10 f0       	brcs	.+4      	; 0x13a2 <GPIO_readPort+0x18>
	{
		result =  0;
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	32 c0       	rjmp	.+100    	; 0x1406 <GPIO_readPort+0x7c>
	}
	else
	{
		/* Read the required port */
		switch(port_num)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3c 83       	std	Y+4, r19	; 0x04
    13aa:	2b 83       	std	Y+3, r18	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	d1 f0       	breq	.+52     	; 0x13ea <GPIO_readPort+0x60>
    13b6:	2b 81       	ldd	r18, Y+3	; 0x03
    13b8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <GPIO_readPort+0x40>
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <GPIO_readPort+0x56>
    13c8:	1e c0       	rjmp	.+60     	; 0x1406 <GPIO_readPort+0x7c>
    13ca:	2b 81       	ldd	r18, Y+3	; 0x03
    13cc:	3c 81       	ldd	r19, Y+4	; 0x04
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	81 f0       	breq	.+32     	; 0x13f4 <GPIO_readPort+0x6a>
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	81 f0       	breq	.+32     	; 0x13fe <GPIO_readPort+0x74>
    13de:	13 c0       	rjmp	.+38     	; 0x1406 <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			result =  PINA;
    13e0:	e9 e3       	ldi	r30, 0x39	; 57
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			result =  PINB;
    13ea:	e6 e3       	ldi	r30, 0x36	; 54
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			result =  PINC;
    13f4:	e3 e3       	ldi	r30, 0x33	; 51
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			result =  PIND;
    13fe:	e0 e3       	ldi	r30, 0x30	; 48
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <new_password_save>:

uint8 new_password[6];
uint8 saved_password[6];

void new_password_save(void)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	60 97       	sbiw	r28, 0x10	; 16
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
	uint8 i = 0;
    142a:	18 8a       	std	Y+16, r1	; 0x10
	uint8 write_status = 0;
    142c:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0; i<PASSWORD_SIZE; i++)
    142e:	18 8a       	std	Y+16, r1	; 0x10
    1430:	8a c0       	rjmp	.+276    	; 0x1546 <new_password_save+0x130>
	{
		write_status = EEPROM_writeByte(0x0010 + i, new_password[i]);
    1432:	88 89       	ldd	r24, Y+16	; 0x10
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	40 96       	adiw	r24, 0x10	; 16
    143a:	ac 01       	movw	r20, r24
    143c:	88 89       	ldd	r24, Y+16	; 0x10
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	fc 01       	movw	r30, r24
    1444:	e7 58       	subi	r30, 0x87	; 135
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	20 81       	ld	r18, Z
    144a:	ca 01       	movw	r24, r20
    144c:	62 2f       	mov	r22, r18
    144e:	0e 94 2c 06 	call	0xc58	; 0xc58 <EEPROM_writeByte>
    1452:	8f 87       	std	Y+15, r24	; 0x0f
		if(write_status)
    1454:	8f 85       	ldd	r24, Y+15	; 0x0f
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <new_password_save+0x46>
    145a:	72 c0       	rjmp	.+228    	; 0x1540 <new_password_save+0x12a>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a8 e4       	ldi	r26, 0x48	; 72
    1462:	b3 e4       	ldi	r27, 0x43	; 67
    1464:	8b 87       	std	Y+11, r24	; 0x0b
    1466:	9c 87       	std	Y+12, r25	; 0x0c
    1468:	ad 87       	std	Y+13, r26	; 0x0d
    146a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	6b 85       	ldd	r22, Y+11	; 0x0b
    146e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1470:	8d 85       	ldd	r24, Y+13	; 0x0d
    1472:	9e 85       	ldd	r25, Y+14	; 0x0e
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a ef       	ldi	r20, 0xFA	; 250
    147a:	54 e4       	ldi	r21, 0x44	; 68
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8f 83       	std	Y+7, r24	; 0x07
    1486:	98 87       	std	Y+8, r25	; 0x08
    1488:	a9 87       	std	Y+9, r26	; 0x09
    148a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    148c:	6f 81       	ldd	r22, Y+7	; 0x07
    148e:	78 85       	ldd	r23, Y+8	; 0x08
    1490:	89 85       	ldd	r24, Y+9	; 0x09
    1492:	9a 85       	ldd	r25, Y+10	; 0x0a
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <new_password_save+0x98>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <new_password_save+0x116>
	else if (__tmp > 65535)
    14ae:	6f 81       	ldd	r22, Y+7	; 0x07
    14b0:	78 85       	ldd	r23, Y+8	; 0x08
    14b2:	89 85       	ldd	r24, Y+9	; 0x09
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <new_password_save+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    14cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <new_password_save+0xf8>
    14f0:	88 ec       	ldi	r24, 0xC8	; 200
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <new_password_save+0xe6>
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <new_password_save+0xda>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <new_password_save+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <new_password_save+0x122>
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01

void new_password_save(void)
{
	uint8 i = 0;
	uint8 write_status = 0;
	for(i=0; i<PASSWORD_SIZE; i++)
    1540:	88 89       	ldd	r24, Y+16	; 0x10
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	88 8b       	std	Y+16, r24	; 0x10
    1546:	88 89       	ldd	r24, Y+16	; 0x10
    1548:	85 30       	cpi	r24, 0x05	; 5
    154a:	08 f4       	brcc	.+2      	; 0x154e <new_password_save+0x138>
    154c:	72 cf       	rjmp	.-284    	; 0x1432 <new_password_save+0x1c>
		{
			_delay_ms(200);
		}

	}
}
    154e:	60 96       	adiw	r28, 0x10	; 16
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <saved_password_retrieve>:

void saved_password_retrieve(void)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0;
    156a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0; i<PASSWORD_SIZE; i++)
    156c:	19 82       	std	Y+1, r1	; 0x01
    156e:	12 c0       	rjmp	.+36     	; 0x1594 <saved_password_retrieve+0x34>
	{
		EEPROM_readByte(0x0010 + i, &saved_password[i]);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	40 96       	adiw	r24, 0x10	; 16
    1578:	ac 01       	movw	r20, r24
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9c 01       	movw	r18, r24
    1582:	21 58       	subi	r18, 0x81	; 129
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	ca 01       	movw	r24, r20
    1588:	b9 01       	movw	r22, r18
    158a:	0e 94 6d 06 	call	0xcda	; 0xcda <EEPROM_readByte>
}

void saved_password_retrieve(void)
{
	uint8 i = 0;
	for(i=0; i<PASSWORD_SIZE; i++)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	85 30       	cpi	r24, 0x05	; 5
    1598:	58 f3       	brcs	.-42     	; 0x1570 <saved_password_retrieve+0x10>
	{
		EEPROM_readByte(0x0010 + i, &saved_password[i]);
	}
	saved_password[i] = '#';
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	fc 01       	movw	r30, r24
    15a2:	e1 58       	subi	r30, 0x81	; 129
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	83 e2       	ldi	r24, 0x23	; 35
    15a8:	80 83       	st	Z, r24
}
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <main>:
int main(void)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	ec 97       	sbiw	r28, 0x3c	; 60
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(DDRA,0);
    15c6:	aa e3       	ldi	r26, 0x3A	; 58
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ea e3       	ldi	r30, 0x3A	; 58
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	81 60       	ori	r24, 0x01	; 1
    15d2:	8c 93       	st	X, r24
	SET_BIT(PORTA,0);
    15d4:	ab e3       	ldi	r26, 0x3B	; 59
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	eb e3       	ldi	r30, 0x3B	; 59
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	81 60       	ori	r24, 0x01	; 1
    15e0:	8c 93       	st	X, r24

	uint8 system = 0;
    15e2:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 i = 0;
    15e4:	1b a6       	std	Y+43, r1	; 0x2b

	SET_BIT(SREG,7);
    15e6:	af e5       	ldi	r26, 0x5F	; 95
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e5       	ldi	r30, 0x5F	; 95
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	8c 93       	st	X, r24

	/*peripherals config*/
	TWI_ConfigType	TWIStruct = {0x01 , BAUD_RATE_400KHZ};
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8d a7       	std	Y+45, r24	; 0x2d
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	8e a7       	std	Y+46, r24	; 0x2e
	TWI_init(&TWIStruct);
    15fc:	ce 01       	movw	r24, r28
    15fe:	8d 96       	adiw	r24, 0x2d	; 45
    1600:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TWI_init>
	UART_ConfigType uart_conf_control = {
			CharacterSize_8bit,
			DisabledParity,
			STOPBIT_1bit,
			4800
	};
    1604:	9e 01       	movw	r18, r28
    1606:	21 5d       	subi	r18, 0xD1	; 209
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	39 af       	std	Y+57, r19	; 0x39
    160c:	28 af       	std	Y+56, r18	; 0x38
    160e:	88 e6       	ldi	r24, 0x68	; 104
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9b af       	std	Y+59, r25	; 0x3b
    1614:	8a af       	std	Y+58, r24	; 0x3a
    1616:	97 e0       	ldi	r25, 0x07	; 7
    1618:	9c af       	std	Y+60, r25	; 0x3c
    161a:	ea ad       	ldd	r30, Y+58	; 0x3a
    161c:	fb ad       	ldd	r31, Y+59	; 0x3b
    161e:	00 80       	ld	r0, Z
    1620:	2a ad       	ldd	r18, Y+58	; 0x3a
    1622:	3b ad       	ldd	r19, Y+59	; 0x3b
    1624:	2f 5f       	subi	r18, 0xFF	; 255
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	3b af       	std	Y+59, r19	; 0x3b
    162a:	2a af       	std	Y+58, r18	; 0x3a
    162c:	e8 ad       	ldd	r30, Y+56	; 0x38
    162e:	f9 ad       	ldd	r31, Y+57	; 0x39
    1630:	00 82       	st	Z, r0
    1632:	28 ad       	ldd	r18, Y+56	; 0x38
    1634:	39 ad       	ldd	r19, Y+57	; 0x39
    1636:	2f 5f       	subi	r18, 0xFF	; 255
    1638:	3f 4f       	sbci	r19, 0xFF	; 255
    163a:	39 af       	std	Y+57, r19	; 0x39
    163c:	28 af       	std	Y+56, r18	; 0x38
    163e:	3c ad       	ldd	r19, Y+60	; 0x3c
    1640:	31 50       	subi	r19, 0x01	; 1
    1642:	3c af       	std	Y+60, r19	; 0x3c
    1644:	8c ad       	ldd	r24, Y+60	; 0x3c
    1646:	88 23       	and	r24, r24
    1648:	41 f7       	brne	.-48     	; 0x161a <main+0x68>
	UART_init(&uart_conf_control);
    164a:	ce 01       	movw	r24, r28
    164c:	8f 96       	adiw	r24, 0x2f	; 47
    164e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <UART_init>

	/*Devices initialization*/
	PIRSensor_init();
    1652:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <PIRSensor_init>
	DcMotor_Init();
    1656:	0e 94 cc 05 	call	0xb98	; 0xb98 <DcMotor_Init>
	Buzzer_init();
    165a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	while(1)
	{

		switch(UART_recieveByte())
    165e:	0e 94 8c 11 	call	0x2318	; 0x2318 <UART_recieveByte>
    1662:	e8 2f       	mov	r30, r24
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	ff ab       	std	Y+55, r31	; 0x37
    1668:	ee ab       	std	Y+54, r30	; 0x36
    166a:	2e a9       	ldd	r18, Y+54	; 0x36
    166c:	3f a9       	ldd	r19, Y+55	; 0x37
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	09 f1       	breq	.+66     	; 0x16b6 <main+0x104>
    1674:	8e a9       	ldd	r24, Y+54	; 0x36
    1676:	9f a9       	ldd	r25, Y+55	; 0x37
    1678:	83 30       	cpi	r24, 0x03	; 3
    167a:	91 05       	cpc	r25, r1
    167c:	34 f4       	brge	.+12     	; 0x168a <main+0xd8>
    167e:	ee a9       	ldd	r30, Y+54	; 0x36
    1680:	ff a9       	ldd	r31, Y+55	; 0x37
    1682:	e1 30       	cpi	r30, 0x01	; 1
    1684:	f1 05       	cpc	r31, r1
    1686:	69 f0       	breq	.+26     	; 0x16a2 <main+0xf0>
    1688:	ea cf       	rjmp	.-44     	; 0x165e <main+0xac>
    168a:	2e a9       	ldd	r18, Y+54	; 0x36
    168c:	3f a9       	ldd	r19, Y+55	; 0x37
    168e:	24 30       	cpi	r18, 0x04	; 4
    1690:	31 05       	cpc	r19, r1
    1692:	e1 f0       	breq	.+56     	; 0x16cc <main+0x11a>
    1694:	8e a9       	ldd	r24, Y+54	; 0x36
    1696:	9f a9       	ldd	r25, Y+55	; 0x37
    1698:	85 30       	cpi	r24, 0x05	; 5
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <main+0xee>
    169e:	12 c1       	rjmp	.+548    	; 0x18c4 <main+0x312>
    16a0:	de cf       	rjmp	.-68     	; 0x165e <main+0xac>
		{
		case SEND_NEW_PASSWORD:
			UART_sendByte(Control_ECU_READY);
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	0e 94 75 11 	call	0x22ea	; 0x22ea <UART_sendByte>
			UART_receiveString(new_password);
    16a8:	89 e7       	ldi	r24, 0x79	; 121
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 c4 11 	call	0x2388	; 0x2388 <UART_receiveString>

			new_password_save();
    16b0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <new_password_save>
    16b4:	d4 cf       	rjmp	.-88     	; 0x165e <main+0xac>
			break;

		case RETRIEVE_NEW_PASSWORD:
			saved_password_retrieve();
    16b6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <saved_password_retrieve>
			while(UART_recieveByte() != Control_ECU_READY){}
    16ba:	0e 94 8c 11 	call	0x2318	; 0x2318 <UART_recieveByte>
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	e1 f7       	brne	.-8      	; 0x16ba <main+0x108>
			UART_sendString(saved_password);
    16c2:	8f e7       	ldi	r24, 0x7F	; 127
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 9b 11 	call	0x2336	; 0x2336 <UART_sendString>
    16ca:	c9 cf       	rjmp	.-110    	; 0x165e <main+0xac>
			break;

		case RIGHT_PASSWORD:
			DcMotor_Rotate(DC_MOTOR_CLOCKWISE, 100);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	64 e6       	ldi	r22, 0x64	; 100
    16d0:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e6       	ldi	r25, 0x60	; 96
    16d8:	aa e6       	ldi	r26, 0x6A	; 106
    16da:	b6 e4       	ldi	r27, 0x46	; 70
    16dc:	8f a3       	std	Y+39, r24	; 0x27
    16de:	98 a7       	std	Y+40, r25	; 0x28
    16e0:	a9 a7       	std	Y+41, r26	; 0x29
    16e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	6f a1       	ldd	r22, Y+39	; 0x27
    16e6:	78 a5       	ldd	r23, Y+40	; 0x28
    16e8:	89 a5       	ldd	r24, Y+41	; 0x29
    16ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a ef       	ldi	r20, 0xFA	; 250
    16f2:	54 e4       	ldi	r21, 0x44	; 68
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	8b a3       	std	Y+35, r24	; 0x23
    16fe:	9c a3       	std	Y+36, r25	; 0x24
    1700:	ad a3       	std	Y+37, r26	; 0x25
    1702:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1704:	6b a1       	ldd	r22, Y+35	; 0x23
    1706:	7c a1       	ldd	r23, Y+36	; 0x24
    1708:	8d a1       	ldd	r24, Y+37	; 0x25
    170a:	9e a1       	ldd	r25, Y+38	; 0x26
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <main+0x174>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9a a3       	std	Y+34, r25	; 0x22
    1722:	89 a3       	std	Y+33, r24	; 0x21
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <main+0x1f2>
	else if (__tmp > 65535)
    1726:	6b a1       	ldd	r22, Y+35	; 0x23
    1728:	7c a1       	ldd	r23, Y+36	; 0x24
    172a:	8d a1       	ldd	r24, Y+37	; 0x25
    172c:	9e a1       	ldd	r25, Y+38	; 0x26
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	6f a1       	ldd	r22, Y+39	; 0x27
    1740:	78 a5       	ldd	r23, Y+40	; 0x28
    1742:	89 a5       	ldd	r24, Y+41	; 0x29
    1744:	9a a5       	ldd	r25, Y+42	; 0x2a
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9a a3       	std	Y+34, r25	; 0x22
    1764:	89 a3       	std	Y+33, r24	; 0x21
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <main+0x1d4>
    1768:	88 ec       	ldi	r24, 0xC8	; 200
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	98 a3       	std	Y+32, r25	; 0x20
    176e:	8f 8f       	std	Y+31, r24	; 0x1f
    1770:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1772:	98 a1       	ldd	r25, Y+32	; 0x20
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <main+0x1c2>
    1778:	98 a3       	std	Y+32, r25	; 0x20
    177a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	89 a1       	ldd	r24, Y+33	; 0x21
    177e:	9a a1       	ldd	r25, Y+34	; 0x22
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9a a3       	std	Y+34, r25	; 0x22
    1784:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	89 a1       	ldd	r24, Y+33	; 0x21
    1788:	9a a1       	ldd	r25, Y+34	; 0x22
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <main+0x1b6>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <main+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	6b a1       	ldd	r22, Y+35	; 0x23
    1792:	7c a1       	ldd	r23, Y+36	; 0x24
    1794:	8d a1       	ldd	r24, Y+37	; 0x25
    1796:	9e a1       	ldd	r25, Y+38	; 0x26
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9a a3       	std	Y+34, r25	; 0x22
    17a2:	89 a3       	std	Y+33, r24	; 0x21
    17a4:	89 a1       	ldd	r24, Y+33	; 0x21
    17a6:	9a a1       	ldd	r25, Y+34	; 0x22
    17a8:	9e 8f       	std	Y+30, r25	; 0x1e
    17aa:	8d 8f       	std	Y+29, r24	; 0x1d
    17ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <main+0x1fe>
    17b4:	9e 8f       	std	Y+30, r25	; 0x1e
    17b6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(15000);
			DcMotor_Rotate(DC_MOTOR_CLOCKWISE, DC_MOTOR_STOP);
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>

			while(PIRSensor_getValue())
    17c0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <PIRSensor_getValue>
    17c4:	88 23       	and	r24, r24
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <main+0x20e>
			{

			}
			UART_sendByte(PIR_OFF);
    17c8:	86 e0       	ldi	r24, 0x06	; 6
    17ca:	0e 94 75 11 	call	0x22ea	; 0x22ea <UART_sendByte>
			DcMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE, 100);
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	64 e6       	ldi	r22, 0x64	; 100
    17d2:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e6       	ldi	r25, 0x60	; 96
    17da:	aa e6       	ldi	r26, 0x6A	; 106
    17dc:	b6 e4       	ldi	r27, 0x46	; 70
    17de:	89 8f       	std	Y+25, r24	; 0x19
    17e0:	9a 8f       	std	Y+26, r25	; 0x1a
    17e2:	ab 8f       	std	Y+27, r26	; 0x1b
    17e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e6:	69 8d       	ldd	r22, Y+25	; 0x19
    17e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a ef       	ldi	r20, 0xFA	; 250
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8d 8b       	std	Y+21, r24	; 0x15
    1800:	9e 8b       	std	Y+22, r25	; 0x16
    1802:	af 8b       	std	Y+23, r26	; 0x17
    1804:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1806:	6d 89       	ldd	r22, Y+21	; 0x15
    1808:	7e 89       	ldd	r23, Y+22	; 0x16
    180a:	8f 89       	ldd	r24, Y+23	; 0x17
    180c:	98 8d       	ldd	r25, Y+24	; 0x18
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e8       	ldi	r20, 0x80	; 128
    1814:	5f e3       	ldi	r21, 0x3F	; 63
    1816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    181a:	88 23       	and	r24, r24
    181c:	2c f4       	brge	.+10     	; 0x1828 <main+0x276>
		__ticks = 1;
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	9c 8b       	std	Y+20, r25	; 0x14
    1824:	8b 8b       	std	Y+19, r24	; 0x13
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <main+0x2f4>
	else if (__tmp > 65535)
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	3f ef       	ldi	r19, 0xFF	; 255
    1834:	4f e7       	ldi	r20, 0x7F	; 127
    1836:	57 e4       	ldi	r21, 0x47	; 71
    1838:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183c:	18 16       	cp	r1, r24
    183e:	4c f5       	brge	.+82     	; 0x1892 <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1840:	69 8d       	ldd	r22, Y+25	; 0x19
    1842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	40 e2       	ldi	r20, 0x20	; 32
    184e:	51 e4       	ldi	r21, 0x41	; 65
    1850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9c 8b       	std	Y+20, r25	; 0x14
    1866:	8b 8b       	std	Y+19, r24	; 0x13
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <main+0x2d6>
    186a:	88 ec       	ldi	r24, 0xC8	; 200
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	9a 8b       	std	Y+18, r25	; 0x12
    1870:	89 8b       	std	Y+17, r24	; 0x11
    1872:	89 89       	ldd	r24, Y+17	; 0x11
    1874:	9a 89       	ldd	r25, Y+18	; 0x12
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	f1 f7       	brne	.-4      	; 0x1876 <main+0x2c4>
    187a:	9a 8b       	std	Y+18, r25	; 0x12
    187c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187e:	8b 89       	ldd	r24, Y+19	; 0x13
    1880:	9c 89       	ldd	r25, Y+20	; 0x14
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1888:	8b 89       	ldd	r24, Y+19	; 0x13
    188a:	9c 89       	ldd	r25, Y+20	; 0x14
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	69 f7       	brne	.-38     	; 0x186a <main+0x2b8>
    1890:	14 c0       	rjmp	.+40     	; 0x18ba <main+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1892:	6d 89       	ldd	r22, Y+21	; 0x15
    1894:	7e 89       	ldd	r23, Y+22	; 0x16
    1896:	8f 89       	ldd	r24, Y+23	; 0x17
    1898:	98 8d       	ldd	r25, Y+24	; 0x18
    189a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	9c 8b       	std	Y+20, r25	; 0x14
    18a4:	8b 8b       	std	Y+19, r24	; 0x13
    18a6:	8b 89       	ldd	r24, Y+19	; 0x13
    18a8:	9c 89       	ldd	r25, Y+20	; 0x14
    18aa:	98 8b       	std	Y+16, r25	; 0x10
    18ac:	8f 87       	std	Y+15, r24	; 0x0f
    18ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b0:	98 89       	ldd	r25, Y+16	; 0x10
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <main+0x300>
    18b6:	98 8b       	std	Y+16, r25	; 0x10
    18b8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(15000);
			DcMotor_Rotate(DC_MOTOR_CLOCKWISE, DC_MOTOR_STOP);
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	0e 94 e7 05 	call	0xbce	; 0xbce <DcMotor_Rotate>
    18c2:	cd ce       	rjmp	.-614    	; 0x165e <main+0xac>
			break;

		case WRONG_PASSWORD:
			Buzzer_on();
    18c4:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
			for(i=0; i<61; i++)
    18c8:	1b a6       	std	Y+43, r1	; 0x2b
    18ca:	75 c0       	rjmp	.+234    	; 0x19b6 <main+0x404>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	aa e7       	ldi	r26, 0x7A	; 122
    18d2:	b4 e4       	ldi	r27, 0x44	; 68
    18d4:	8b 87       	std	Y+11, r24	; 0x0b
    18d6:	9c 87       	std	Y+12, r25	; 0x0c
    18d8:	ad 87       	std	Y+13, r26	; 0x0d
    18da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18de:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8f 83       	std	Y+7, r24	; 0x07
    18f6:	98 87       	std	Y+8, r25	; 0x08
    18f8:	a9 87       	std	Y+9, r26	; 0x09
    18fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <main+0x36c>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	3f c0       	rjmp	.+126    	; 0x199c <main+0x3ea>
	else if (__tmp > 65535)
    191e:	6f 81       	ldd	r22, Y+7	; 0x07
    1920:	78 85       	ldd	r23, Y+8	; 0x08
    1922:	89 85       	ldd	r24, Y+9	; 0x09
    1924:	9a 85       	ldd	r25, Y+10	; 0x0a
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <main+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	0f c0       	rjmp	.+30     	; 0x197e <main+0x3cc>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9c 83       	std	Y+4, r25	; 0x04
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <main+0x3ba>
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <main+0x3ae>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <main+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <main+0x3f6>
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	8b a7       	std	Y+43, r24	; 0x2b
    19b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b8:	8d 33       	cpi	r24, 0x3D	; 61
    19ba:	08 f4       	brcc	.+2      	; 0x19be <main+0x40c>
    19bc:	87 cf       	rjmp	.-242    	; 0x18cc <main+0x31a>
			{
				_delay_ms(1000);
			}
			Buzzer_off();
    19be:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
    19c2:	4d ce       	rjmp	.-870    	; 0x165e <main+0xac>

000019c4 <PIRSensor_init>:
#include "pir_sensor.h"
#include "gpio.h"
#include "common_macros.h"

void PIRSensor_init(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of flame sensor's pin to output*/
	GPIO_setupPinDirection(PIR_SENSOR_PORT, PIR_SENSOR_PIN, PIN_OUTPUT);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	41 e0       	ldi	r20, 0x01	; 1
    19d2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <GPIO_setupPinDirection>
}
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <PIRSensor_getValue>:

uint8 PIRSensor_getValue(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
	/*return flame sensors's reading*/
	return GPIO_readPin(PIR_SENSOR_PORT, PIR_SENSOR_PIN);
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_readPin>
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <PWM_Timer0_Start>:
#include "common_macros.h"
#include "std_types.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8 duty_cycle)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	0f 92       	push	r0
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TCCR0,WGM01);
    19fe:	a3 e5       	ldi	r26, 0x53	; 83
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e3 e5       	ldi	r30, 0x53	; 83
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	88 60       	ori	r24, 0x08	; 8
    1a0a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM00);
    1a0c:	a3 e5       	ldi	r26, 0x53	; 83
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e3 e5       	ldi	r30, 0x53	; 83
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 64       	ori	r24, 0x40	; 64
    1a18:	8c 93       	st	X, r24
		SET_BIT(TCCR0,COM01);
    1a1a:	a3 e5       	ldi	r26, 0x53	; 83
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e3 e5       	ldi	r30, 0x53	; 83
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 62       	ori	r24, 0x20	; 32
    1a26:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS00);
    1a28:	a3 e5       	ldi	r26, 0x53	; 83
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e3 e5       	ldi	r30, 0x53	; 83
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	81 60       	ori	r24, 0x01	; 1
    1a34:	8c 93       	st	X, r24
		SET_BIT(TCCR0,CS01);
    1a36:	a3 e5       	ldi	r26, 0x53	; 83
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	82 60       	ori	r24, 0x02	; 2
    1a42:	8c 93       	st	X, r24
		TCNT0 = 0;
    1a44:	e2 e5       	ldi	r30, 0x52	; 82
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	10 82       	st	Z, r1
		OCR0 = (duty_cycle * 255)/100;
    1a4a:	ec e5       	ldi	r30, 0x5C	; 92
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	48 2f       	mov	r20, r24
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	ca 01       	movw	r24, r20
    1a56:	9c 01       	movw	r18, r24
    1a58:	22 0f       	add	r18, r18
    1a5a:	33 1f       	adc	r19, r19
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	96 95       	lsr	r25
    1a60:	98 2f       	mov	r25, r24
    1a62:	88 27       	eor	r24, r24
    1a64:	97 95       	ror	r25
    1a66:	87 95       	ror	r24
    1a68:	82 1b       	sub	r24, r18
    1a6a:	93 0b       	sbc	r25, r19
    1a6c:	84 0f       	add	r24, r20
    1a6e:	95 1f       	adc	r25, r21
    1a70:	24 e6       	ldi	r18, 0x64	; 100
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	b9 01       	movw	r22, r18
    1a76:	0e 94 07 12 	call	0x240e	; 0x240e <__divmodhi4>
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	80 83       	st	Z, r24
		SET_BIT(DDRB,PB3);
    1a7e:	a7 e3       	ldi	r26, 0x37	; 55
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e7 e3       	ldi	r30, 0x37	; 55
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	88 60       	ori	r24, 0x08	; 8
    1a8a:	8c 93       	st	X, r24
}
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <__vector_11>:
static char g_timer1Mode = 0;
static char g_timer2Mode = 0;

/*interrupt service routine of timer0 in normal mode*/
ISR(TIMER0_OVF_vect)
{
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	2f 93       	push	r18
    1aa0:	3f 93       	push	r19
    1aa2:	4f 93       	push	r20
    1aa4:	5f 93       	push	r21
    1aa6:	6f 93       	push	r22
    1aa8:	7f 93       	push	r23
    1aaa:	8f 93       	push	r24
    1aac:	9f 93       	push	r25
    1aae:	af 93       	push	r26
    1ab0:	bf 93       	push	r27
    1ab2:	ef 93       	push	r30
    1ab4:	ff 93       	push	r31
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackFuncPtr != NULL_PTR)
    1abe:	80 91 70 00 	lds	r24, 0x0070
    1ac2:	90 91 71 00 	lds	r25, 0x0071
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	29 f0       	breq	.+10     	; 0x1ad4 <__vector_11+0x40>
	{
		(*g_timer0CallBackFuncPtr)();
    1aca:	e0 91 70 00 	lds	r30, 0x0070
    1ace:	f0 91 71 00 	lds	r31, 0x0071
    1ad2:	09 95       	icall
	}
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	ff 91       	pop	r31
    1ada:	ef 91       	pop	r30
    1adc:	bf 91       	pop	r27
    1ade:	af 91       	pop	r26
    1ae0:	9f 91       	pop	r25
    1ae2:	8f 91       	pop	r24
    1ae4:	7f 91       	pop	r23
    1ae6:	6f 91       	pop	r22
    1ae8:	5f 91       	pop	r21
    1aea:	4f 91       	pop	r20
    1aec:	3f 91       	pop	r19
    1aee:	2f 91       	pop	r18
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <__vector_10>:

/*interrupt service routine of timer0 in compare mode*/
ISR(TIMER0_COMP_vect)
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	0f 92       	push	r0
    1b02:	11 24       	eor	r1, r1
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackFuncPtr != NULL_PTR)
    1b24:	80 91 70 00 	lds	r24, 0x0070
    1b28:	90 91 71 00 	lds	r25, 0x0071
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	29 f0       	breq	.+10     	; 0x1b3a <__vector_10+0x40>
	{
		(*g_timer0CallBackFuncPtr)();
    1b30:	e0 91 70 00 	lds	r30, 0x0070
    1b34:	f0 91 71 00 	lds	r31, 0x0071
    1b38:	09 95       	icall
	}
}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	ff 91       	pop	r31
    1b40:	ef 91       	pop	r30
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	0f 90       	pop	r0
    1b5c:	1f 90       	pop	r1
    1b5e:	18 95       	reti

00001b60 <__vector_9>:

/*interrupt service routine of timer1 in normal mode*/
ISR(TIMER1_OVF_vect)
{
    1b60:	1f 92       	push	r1
    1b62:	0f 92       	push	r0
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	0f 92       	push	r0
    1b68:	11 24       	eor	r1, r1
    1b6a:	2f 93       	push	r18
    1b6c:	3f 93       	push	r19
    1b6e:	4f 93       	push	r20
    1b70:	5f 93       	push	r21
    1b72:	6f 93       	push	r22
    1b74:	7f 93       	push	r23
    1b76:	8f 93       	push	r24
    1b78:	9f 93       	push	r25
    1b7a:	af 93       	push	r26
    1b7c:	bf 93       	push	r27
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackFuncPtr != NULL_PTR)
    1b8a:	80 91 72 00 	lds	r24, 0x0072
    1b8e:	90 91 73 00 	lds	r25, 0x0073
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <__vector_9+0x40>
	{
		(*g_timer1CallBackFuncPtr)();
    1b96:	e0 91 72 00 	lds	r30, 0x0072
    1b9a:	f0 91 73 00 	lds	r31, 0x0073
    1b9e:	09 95       	icall
	}
}
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	ff 91       	pop	r31
    1ba6:	ef 91       	pop	r30
    1ba8:	bf 91       	pop	r27
    1baa:	af 91       	pop	r26
    1bac:	9f 91       	pop	r25
    1bae:	8f 91       	pop	r24
    1bb0:	7f 91       	pop	r23
    1bb2:	6f 91       	pop	r22
    1bb4:	5f 91       	pop	r21
    1bb6:	4f 91       	pop	r20
    1bb8:	3f 91       	pop	r19
    1bba:	2f 91       	pop	r18
    1bbc:	0f 90       	pop	r0
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	0f 90       	pop	r0
    1bc2:	1f 90       	pop	r1
    1bc4:	18 95       	reti

00001bc6 <__vector_7>:

/*interrupt service routine of timer1 in compare mode*/
ISR(TIMER1_COMPA_vect)
{
    1bc6:	1f 92       	push	r1
    1bc8:	0f 92       	push	r0
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	0f 92       	push	r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	2f 93       	push	r18
    1bd2:	3f 93       	push	r19
    1bd4:	4f 93       	push	r20
    1bd6:	5f 93       	push	r21
    1bd8:	6f 93       	push	r22
    1bda:	7f 93       	push	r23
    1bdc:	8f 93       	push	r24
    1bde:	9f 93       	push	r25
    1be0:	af 93       	push	r26
    1be2:	bf 93       	push	r27
    1be4:	ef 93       	push	r30
    1be6:	ff 93       	push	r31
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackFuncPtr != NULL_PTR)
    1bf0:	80 91 72 00 	lds	r24, 0x0072
    1bf4:	90 91 73 00 	lds	r25, 0x0073
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	29 f0       	breq	.+10     	; 0x1c06 <__vector_7+0x40>
	{
		(*g_timer1CallBackFuncPtr)();
    1bfc:	e0 91 72 00 	lds	r30, 0x0072
    1c00:	f0 91 73 00 	lds	r31, 0x0073
    1c04:	09 95       	icall
	}
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <__vector_5>:

/*interrupt service routine of timer2 in normal mode*/
ISR(TIMER2_OVF_vect)
{
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackFuncPtr != NULL_PTR)
    1c56:	80 91 74 00 	lds	r24, 0x0074
    1c5a:	90 91 75 00 	lds	r25, 0x0075
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <__vector_5+0x40>
	{
		(*g_timer2CallBackFuncPtr)();
    1c62:	e0 91 74 00 	lds	r30, 0x0074
    1c66:	f0 91 75 00 	lds	r31, 0x0075
    1c6a:	09 95       	icall
	}
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	ff 91       	pop	r31
    1c72:	ef 91       	pop	r30
    1c74:	bf 91       	pop	r27
    1c76:	af 91       	pop	r26
    1c78:	9f 91       	pop	r25
    1c7a:	8f 91       	pop	r24
    1c7c:	7f 91       	pop	r23
    1c7e:	6f 91       	pop	r22
    1c80:	5f 91       	pop	r21
    1c82:	4f 91       	pop	r20
    1c84:	3f 91       	pop	r19
    1c86:	2f 91       	pop	r18
    1c88:	0f 90       	pop	r0
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	0f 90       	pop	r0
    1c8e:	1f 90       	pop	r1
    1c90:	18 95       	reti

00001c92 <__vector_4>:

/*interrupt service routine of timer2 in compare mode*/
ISR(TIMER2_COMP_vect)
{
    1c92:	1f 92       	push	r1
    1c94:	0f 92       	push	r0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	0f 92       	push	r0
    1c9a:	11 24       	eor	r1, r1
    1c9c:	2f 93       	push	r18
    1c9e:	3f 93       	push	r19
    1ca0:	4f 93       	push	r20
    1ca2:	5f 93       	push	r21
    1ca4:	6f 93       	push	r22
    1ca6:	7f 93       	push	r23
    1ca8:	8f 93       	push	r24
    1caa:	9f 93       	push	r25
    1cac:	af 93       	push	r26
    1cae:	bf 93       	push	r27
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackFuncPtr != NULL_PTR)
    1cbc:	80 91 74 00 	lds	r24, 0x0074
    1cc0:	90 91 75 00 	lds	r25, 0x0075
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	29 f0       	breq	.+10     	; 0x1cd2 <__vector_4+0x40>
	{
		(*g_timer2CallBackFuncPtr)();
    1cc8:	e0 91 74 00 	lds	r30, 0x0074
    1ccc:	f0 91 75 00 	lds	r31, 0x0075
    1cd0:	09 95       	icall
	}
}
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	7f 91       	pop	r23
    1ce4:	6f 91       	pop	r22
    1ce6:	5f 91       	pop	r21
    1ce8:	4f 91       	pop	r20
    1cea:	3f 91       	pop	r19
    1cec:	2f 91       	pop	r18
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <Timer_init>:

/*Function to initialize the Timer driver*/
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <Timer_init+0x6>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_ID == TIMER0)
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	84 81       	ldd	r24, Z+4	; 0x04
    1d0c:	88 23       	and	r24, r24
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <Timer_init+0x1a>
    1d10:	48 c0       	rjmp	.+144    	; 0x1da2 <Timer_init+0xaa>
	{
		SET_BIT(TCCR0,FOC0);
    1d12:	a3 e5       	ldi	r26, 0x53	; 83
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e3 e5       	ldi	r30, 0x53	; 83
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 68       	ori	r24, 0x80	; 128
    1d1e:	8c 93       	st	X, r24

		if(Config_Ptr->timer_mode == NORMAL_MODE)
    1d20:	e9 81       	ldd	r30, Y+1	; 0x01
    1d22:	fa 81       	ldd	r31, Y+2	; 0x02
    1d24:	86 81       	ldd	r24, Z+6	; 0x06
    1d26:	88 23       	and	r24, r24
    1d28:	51 f4       	brne	.+20     	; 0x1d3e <Timer_init+0x46>
		{
			SET_BIT(TIMSK,TOIE0);
    1d2a:	a9 e5       	ldi	r26, 0x59	; 89
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e9 e5       	ldi	r30, 0x59	; 89
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	81 60       	ori	r24, 0x01	; 1
    1d36:	8c 93       	st	X, r24

			g_timer0Mode = NORMAL_MODE;
    1d38:	10 92 76 00 	sts	0x0076, r1
    1d3c:	1d c0       	rjmp	.+58     	; 0x1d78 <Timer_init+0x80>
		}
		else if(Config_Ptr->timer_mode == COMPARE_MODE)
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	86 81       	ldd	r24, Z+6	; 0x06
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	c1 f4       	brne	.+48     	; 0x1d78 <Timer_init+0x80>
		{
			SET_BIT(TCCR0,WGM01);
    1d48:	a3 e5       	ldi	r26, 0x53	; 83
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e3 e5       	ldi	r30, 0x53	; 83
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	88 60       	ori	r24, 0x08	; 8
    1d54:	8c 93       	st	X, r24

			OCR0 = Config_Ptr->timer_compare_MatchValue;
    1d56:	ac e5       	ldi	r26, 0x5C	; 92
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	8c 93       	st	X, r24

			SET_BIT(TIMSK,OCIE0);
    1d64:	a9 e5       	ldi	r26, 0x59	; 89
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e9 e5       	ldi	r30, 0x59	; 89
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	82 60       	ori	r24, 0x02	; 2
    1d70:	8c 93       	st	X, r24

			g_timer0Mode = COMPARE_MODE;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	80 93 76 00 	sts	0x0076, r24
		}

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    1d78:	a3 e5       	ldi	r26, 0x53	; 83
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e3 e5       	ldi	r30, 0x53	; 83
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	98 2f       	mov	r25, r24
    1d84:	98 7f       	andi	r25, 0xF8	; 248
    1d86:	e9 81       	ldd	r30, Y+1	; 0x01
    1d88:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8a:	85 81       	ldd	r24, Z+5	; 0x05
    1d8c:	87 70       	andi	r24, 0x07	; 7
    1d8e:	89 2b       	or	r24, r25
    1d90:	8c 93       	st	X, r24

		TCNT0 = Config_Ptr->timer_InitialValue;
    1d92:	a2 e5       	ldi	r26, 0x52	; 82
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e9 81       	ldd	r30, Y+1	; 0x01
    1d98:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	8c 93       	st	X, r24
    1da0:	a6 c0       	rjmp	.+332    	; 0x1eee <Timer_init+0x1f6>
	}

	else if(Config_Ptr->timer_ID == TIMER1)
    1da2:	e9 81       	ldd	r30, Y+1	; 0x01
    1da4:	fa 81       	ldd	r31, Y+2	; 0x02
    1da6:	84 81       	ldd	r24, Z+4	; 0x04
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	09 f0       	breq	.+2      	; 0x1dae <Timer_init+0xb6>
    1dac:	53 c0       	rjmp	.+166    	; 0x1e54 <Timer_init+0x15c>
	{
		SET_BIT(TCCR1A,FOC1A);
    1dae:	af e4       	ldi	r26, 0x4F	; 79
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ef e4       	ldi	r30, 0x4F	; 79
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	88 60       	ori	r24, 0x08	; 8
    1dba:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    1dbc:	af e4       	ldi	r26, 0x4F	; 79
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	ef e4       	ldi	r30, 0x4F	; 79
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	84 60       	ori	r24, 0x04	; 4
    1dc8:	8c 93       	st	X, r24

		if(Config_Ptr->timer_mode == NORMAL_MODE)
    1dca:	e9 81       	ldd	r30, Y+1	; 0x01
    1dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dce:	86 81       	ldd	r24, Z+6	; 0x06
    1dd0:	88 23       	and	r24, r24
    1dd2:	51 f4       	brne	.+20     	; 0x1de8 <Timer_init+0xf0>
		{
			SET_BIT(TIMSK,TOIE1);
    1dd4:	a9 e5       	ldi	r26, 0x59	; 89
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e9 e5       	ldi	r30, 0x59	; 89
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	8c 93       	st	X, r24

			g_timer1Mode = NORMAL_MODE;
    1de2:	10 92 77 00 	sts	0x0077, r1
    1de6:	1f c0       	rjmp	.+62     	; 0x1e26 <Timer_init+0x12e>
		}
		else if(Config_Ptr->timer_mode == COMPARE_MODE)
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	d1 f4       	brne	.+52     	; 0x1e26 <Timer_init+0x12e>
		{
			SET_BIT(TCCR1B,WGM12);
    1df2:	ae e4       	ldi	r26, 0x4E	; 78
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ee e4       	ldi	r30, 0x4E	; 78
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	8c 93       	st	X, r24

			/*Using channel A*/
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    1e00:	aa e4       	ldi	r26, 0x4A	; 74
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e9 81       	ldd	r30, Y+1	; 0x01
    1e06:	fa 81       	ldd	r31, Y+2	; 0x02
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	11 96       	adiw	r26, 0x01	; 1
    1e0e:	9c 93       	st	X, r25
    1e10:	8e 93       	st	-X, r24

			SET_BIT(TIMSK,OCIE1A);
    1e12:	a9 e5       	ldi	r26, 0x59	; 89
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e9 e5       	ldi	r30, 0x59	; 89
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 61       	ori	r24, 0x10	; 16
    1e1e:	8c 93       	st	X, r24

			g_timer1Mode = COMPARE_MODE;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	80 93 77 00 	sts	0x0077, r24
		}

		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    1e26:	ae e4       	ldi	r26, 0x4E	; 78
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	ee e4       	ldi	r30, 0x4E	; 78
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	98 2f       	mov	r25, r24
    1e32:	98 7f       	andi	r25, 0xF8	; 248
    1e34:	e9 81       	ldd	r30, Y+1	; 0x01
    1e36:	fa 81       	ldd	r31, Y+2	; 0x02
    1e38:	85 81       	ldd	r24, Z+5	; 0x05
    1e3a:	87 70       	andi	r24, 0x07	; 7
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->timer_InitialValue;
    1e40:	ac e4       	ldi	r26, 0x4C	; 76
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e9 81       	ldd	r30, Y+1	; 0x01
    1e46:	fa 81       	ldd	r31, Y+2	; 0x02
    1e48:	80 81       	ld	r24, Z
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	11 96       	adiw	r26, 0x01	; 1
    1e4e:	9c 93       	st	X, r25
    1e50:	8e 93       	st	-X, r24
    1e52:	4d c0       	rjmp	.+154    	; 0x1eee <Timer_init+0x1f6>
	}

	else if(Config_Ptr->timer_ID == TIMER2)
    1e54:	e9 81       	ldd	r30, Y+1	; 0x01
    1e56:	fa 81       	ldd	r31, Y+2	; 0x02
    1e58:	84 81       	ldd	r24, Z+4	; 0x04
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <Timer_init+0x168>
    1e5e:	47 c0       	rjmp	.+142    	; 0x1eee <Timer_init+0x1f6>
	{
		SET_BIT(TCCR2,FOC2);
    1e60:	a5 e4       	ldi	r26, 0x45	; 69
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e5 e4       	ldi	r30, 0x45	; 69
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 68       	ori	r24, 0x80	; 128
    1e6c:	8c 93       	st	X, r24

		if(Config_Ptr->timer_mode == NORMAL_MODE)
    1e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e70:	fa 81       	ldd	r31, Y+2	; 0x02
    1e72:	86 81       	ldd	r24, Z+6	; 0x06
    1e74:	88 23       	and	r24, r24
    1e76:	51 f4       	brne	.+20     	; 0x1e8c <Timer_init+0x194>
		{
			SET_BIT(TIMSK,TOIE2);
    1e78:	a9 e5       	ldi	r26, 0x59	; 89
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e9 e5       	ldi	r30, 0x59	; 89
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	80 64       	ori	r24, 0x40	; 64
    1e84:	8c 93       	st	X, r24

			g_timer2Mode = NORMAL_MODE;
    1e86:	10 92 78 00 	sts	0x0078, r1
    1e8a:	1d c0       	rjmp	.+58     	; 0x1ec6 <Timer_init+0x1ce>
		}
		else if(Config_Ptr->timer_mode == COMPARE_MODE)
    1e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e90:	86 81       	ldd	r24, Z+6	; 0x06
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	c1 f4       	brne	.+48     	; 0x1ec6 <Timer_init+0x1ce>
		{
			SET_BIT(TCCR2,WGM21);
    1e96:	a5 e4       	ldi	r26, 0x45	; 69
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e5 e4       	ldi	r30, 0x45	; 69
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 60       	ori	r24, 0x08	; 8
    1ea2:	8c 93       	st	X, r24

			OCR2 = Config_Ptr->timer_compare_MatchValue;
    1ea4:	a3 e4       	ldi	r26, 0x43	; 67
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	8c 93       	st	X, r24

			SET_BIT(TIMSK,OCIE2);
    1eb2:	a9 e5       	ldi	r26, 0x59	; 89
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 e5       	ldi	r30, 0x59	; 89
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 68       	ori	r24, 0x80	; 128
    1ebe:	8c 93       	st	X, r24

			g_timer2Mode = COMPARE_MODE;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 78 00 	sts	0x0078, r24
		}

		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    1ec6:	a5 e4       	ldi	r26, 0x45	; 69
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e5 e4       	ldi	r30, 0x45	; 69
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	98 7f       	andi	r25, 0xF8	; 248
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	85 81       	ldd	r24, Z+5	; 0x05
    1eda:	87 70       	andi	r24, 0x07	; 7
    1edc:	89 2b       	or	r24, r25
    1ede:	8c 93       	st	X, r24

		TCNT2 = Config_Ptr->timer_InitialValue;
    1ee0:	a4 e4       	ldi	r26, 0x44	; 68
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	8c 93       	st	X, r24
	else
	{

	}

}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <Timer_deInit>:

/*Function to disable the Timer via Timer_ID*/
void Timer_deInit(Timer_ID_Type timer_type)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	0f 92       	push	r0
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type == TIMER0)
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	88 23       	and	r24, r24
    1f08:	41 f4       	brne	.+16     	; 0x1f1a <Timer_deInit+0x22>
	{
		TCCR0 = (TCCR0 & 0xF8) | (NO_CLOCK & 0x07); // check this
    1f0a:	a3 e5       	ldi	r26, 0x53	; 83
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e3 e5       	ldi	r30, 0x53	; 83
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	88 7f       	andi	r24, 0xF8	; 248
    1f16:	8c 93       	st	X, r24
    1f18:	15 c0       	rjmp	.+42     	; 0x1f44 <Timer_deInit+0x4c>
	}
	else if(timer_type == TIMER1)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <Timer_deInit+0x38>
	{
		TCCR1B = (TCCR1B & 0xF8) | (NO_CLOCK & 0x07); // check this
    1f20:	ae e4       	ldi	r26, 0x4E	; 78
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	ee e4       	ldi	r30, 0x4E	; 78
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 7f       	andi	r24, 0xF8	; 248
    1f2c:	8c 93       	st	X, r24
    1f2e:	0a c0       	rjmp	.+20     	; 0x1f44 <Timer_deInit+0x4c>
	}
	else if(timer_type == TIMER2)
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	39 f4       	brne	.+14     	; 0x1f44 <Timer_deInit+0x4c>
	{
		TCCR2 = (TCCR2 & 0xF8) | (NO_CLOCK & 0x07); // check this
    1f36:	a5 e4       	ldi	r26, 0x45	; 69
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e5 e4       	ldi	r30, 0x45	; 69
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	88 7f       	andi	r24, 0xF8	; 248
    1f42:	8c 93       	st	X, r24
	else
	{

	}

}
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <Timer_setCallBack>:

}*/

/*Function to set the Call Back function address to the required Timer.*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <Timer_setCallBack+0x6>
    1f52:	0f 92       	push	r0
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID == TIMER0)
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	88 23       	and	r24, r24
    1f62:	39 f4       	brne	.+14     	; 0x1f72 <Timer_setCallBack+0x26>
	{
		g_timer0CallBackFuncPtr = a_ptr;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	90 93 71 00 	sts	0x0071, r25
    1f6c:	80 93 70 00 	sts	0x0070, r24
    1f70:	13 c0       	rjmp	.+38     	; 0x1f98 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID == TIMER1)
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	39 f4       	brne	.+14     	; 0x1f86 <Timer_setCallBack+0x3a>
	{
		g_timer1CallBackFuncPtr = a_ptr;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	90 93 73 00 	sts	0x0073, r25
    1f80:	80 93 72 00 	sts	0x0072, r24
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID == TIMER2)
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	82 30       	cpi	r24, 0x02	; 2
    1f8a:	31 f4       	brne	.+12     	; 0x1f98 <Timer_setCallBack+0x4c>
	{
		g_timer2CallBackFuncPtr = a_ptr;
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	90 93 75 00 	sts	0x0075, r25
    1f94:	80 93 74 00 	sts	0x0074, r24
	}
	else
	{

	}
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <TWI_init+0x6>
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    1fb2:	a0 e2       	ldi	r26, 0x20	; 32
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fba:	81 81       	ldd	r24, Z+1	; 0x01
    1fbc:	8c 93       	st	X, r24
	TWSR = 0x00;
    1fbe:	e1 e2       	ldi	r30, 0x21	; 33
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address)>>1); // my address = 0x01 :)
    1fc4:	a2 e2       	ldi	r26, 0x22	; 34
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fca:	fa 81       	ldd	r31, Y+2	; 0x02
    1fcc:	80 81       	ld	r24, Z
    1fce:	86 95       	lsr	r24
    1fd0:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1fd2:	e6 e5       	ldi	r30, 0x56	; 86
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	84 e0       	ldi	r24, 0x04	; 4
    1fd8:	80 83       	st	Z, r24
}
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <TWI_start>:

void TWI_start(void)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1fec:	e6 e5       	ldi	r30, 0x56	; 86
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	84 ea       	ldi	r24, 0xA4	; 164
    1ff2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ff4:	e6 e5       	ldi	r30, 0x56	; 86
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	dc f7       	brge	.-10     	; 0x1ff4 <TWI_start+0x10>
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <TWI_stop>:

void TWI_stop(void)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    200c:	e6 e5       	ldi	r30, 0x56	; 86
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	84 e9       	ldi	r24, 0x94	; 148
    2012:	80 83       	st	Z, r24
}
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2026:	e3 e2       	ldi	r30, 0x23	; 35
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    202e:	e6 e5       	ldi	r30, 0x56	; 86
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	84 e8       	ldi	r24, 0x84	; 132
    2034:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2036:	e6 e5       	ldi	r30, 0x56	; 86
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	88 23       	and	r24, r24
    203e:	dc f7       	brge	.-10     	; 0x2036 <TWI_writeByte+0x1c>
}
    2040:	0f 90       	pop	r0
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2050:	e6 e5       	ldi	r30, 0x56	; 86
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	84 ec       	ldi	r24, 0xC4	; 196
    2056:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2058:	e6 e5       	ldi	r30, 0x56	; 86
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	88 23       	and	r24, r24
    2060:	dc f7       	brge	.-10     	; 0x2058 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2062:	e3 e2       	ldi	r30, 0x23	; 35
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2076:	e6 e5       	ldi	r30, 0x56	; 86
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	84 e8       	ldi	r24, 0x84	; 132
    207c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    207e:	e6 e5       	ldi	r30, 0x56	; 86
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	88 23       	and	r24, r24
    2086:	dc f7       	brge	.-10     	; 0x207e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2088:	e3 e2       	ldi	r30, 0x23	; 35
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	0f 92       	push	r0
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    209e:	e1 e2       	ldi	r30, 0x21	; 33
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 7f       	andi	r24, 0xF8	; 248
    20a6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20aa:	0f 90       	pop	r0
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <UART_init>:
#include "uart.h"
#include "avr/io.h"
#include "common_macros.h"

void UART_init(const UART_ConfigType * Config_Ptr)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <UART_init+0x6>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <UART_init+0x8>
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	9c 83       	std	Y+4, r25	; 0x04
    20c0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    20c2:	1a 82       	std	Y+2, r1	; 0x02
    20c4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    20c6:	eb e2       	ldi	r30, 0x2B	; 43
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	80 83       	st	Z, r24

	/*Receiver and transmitter enable*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    20ce:	ea e2       	ldi	r30, 0x2A	; 42
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	88 e1       	ldi	r24, 0x18	; 24
    20d4:	80 83       	st	Z, r24

	/*URSEL must be set to write in UCSRC*/
	SET_BIT(UCSRC,URSEL);
    20d6:	a0 e4       	ldi	r26, 0x40	; 64
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e0 e4       	ldi	r30, 0x40	; 64
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 68       	ori	r24, 0x80	; 128
    20e2:	8c 93       	st	X, r24

	/*choose the character size*/
	if(Config_Ptr->bit_data == CharacterSize_9bit)
    20e4:	eb 81       	ldd	r30, Y+3	; 0x03
    20e6:	fc 81       	ldd	r31, Y+4	; 0x04
    20e8:	80 81       	ld	r24, Z
    20ea:	87 30       	cpi	r24, 0x07	; 7
    20ec:	b1 f4       	brne	.+44     	; 0x211a <UART_init+0x68>
	{
		SET_BIT(UCSRB,UCSZ2);
    20ee:	aa e2       	ldi	r26, 0x2A	; 42
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	ea e2       	ldi	r30, 0x2A	; 42
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	84 60       	ori	r24, 0x04	; 4
    20fa:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ1);
    20fc:	aa e2       	ldi	r26, 0x2A	; 42
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ea e2       	ldi	r30, 0x2A	; 42
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	84 60       	ori	r24, 0x04	; 4
    2108:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ0);
    210a:	aa e2       	ldi	r26, 0x2A	; 42
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	ea e2       	ldi	r30, 0x2A	; 42
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	82 60       	ori	r24, 0x02	; 2
    2116:	8c 93       	st	X, r24
    2118:	56 c0       	rjmp	.+172    	; 0x21c6 <UART_init+0x114>

	}
	else
	{
		CLEAR_BIT(UCSRB,UCSZ2);
    211a:	aa e2       	ldi	r26, 0x2A	; 42
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	ea e2       	ldi	r30, 0x2A	; 42
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	8b 7f       	andi	r24, 0xFB	; 251
    2126:	8c 93       	st	X, r24

		if(Config_Ptr->bit_data == CharacterSize_5bit)
    2128:	eb 81       	ldd	r30, Y+3	; 0x03
    212a:	fc 81       	ldd	r31, Y+4	; 0x04
    212c:	80 81       	ld	r24, Z
    212e:	88 23       	and	r24, r24
    2130:	79 f4       	brne	.+30     	; 0x2150 <UART_init+0x9e>
		{
			CLEAR_BIT(UCSRB,UCSZ1);
    2132:	aa e2       	ldi	r26, 0x2A	; 42
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	ea e2       	ldi	r30, 0x2A	; 42
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8b 7f       	andi	r24, 0xFB	; 251
    213e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,UCSZ0);
    2140:	aa e2       	ldi	r26, 0x2A	; 42
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ea e2       	ldi	r30, 0x2A	; 42
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8d 7f       	andi	r24, 0xFD	; 253
    214c:	8c 93       	st	X, r24
    214e:	3b c0       	rjmp	.+118    	; 0x21c6 <UART_init+0x114>
		}
		else if(Config_Ptr->bit_data == CharacterSize_6bit)
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	80 81       	ld	r24, Z
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	79 f4       	brne	.+30     	; 0x2178 <UART_init+0xc6>
		{
			CLEAR_BIT(UCSRB,UCSZ1);
    215a:	aa e2       	ldi	r26, 0x2A	; 42
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	ea e2       	ldi	r30, 0x2A	; 42
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8b 7f       	andi	r24, 0xFB	; 251
    2166:	8c 93       	st	X, r24
			SET_BIT(UCSRB,UCSZ0);
    2168:	aa e2       	ldi	r26, 0x2A	; 42
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ea e2       	ldi	r30, 0x2A	; 42
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	82 60       	ori	r24, 0x02	; 2
    2174:	8c 93       	st	X, r24
    2176:	27 c0       	rjmp	.+78     	; 0x21c6 <UART_init+0x114>
		}
		else if(Config_Ptr->bit_data == CharacterSize_7bit)
    2178:	eb 81       	ldd	r30, Y+3	; 0x03
    217a:	fc 81       	ldd	r31, Y+4	; 0x04
    217c:	80 81       	ld	r24, Z
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	79 f4       	brne	.+30     	; 0x21a0 <UART_init+0xee>
		{
			SET_BIT(UCSRB,UCSZ1);
    2182:	aa e2       	ldi	r26, 0x2A	; 42
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	ea e2       	ldi	r30, 0x2A	; 42
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	84 60       	ori	r24, 0x04	; 4
    218e:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,UCSZ0);
    2190:	aa e2       	ldi	r26, 0x2A	; 42
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	ea e2       	ldi	r30, 0x2A	; 42
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8d 7f       	andi	r24, 0xFD	; 253
    219c:	8c 93       	st	X, r24
    219e:	13 c0       	rjmp	.+38     	; 0x21c6 <UART_init+0x114>
		}
		else if(Config_Ptr->bit_data == CharacterSize_8bit)
    21a0:	eb 81       	ldd	r30, Y+3	; 0x03
    21a2:	fc 81       	ldd	r31, Y+4	; 0x04
    21a4:	80 81       	ld	r24, Z
    21a6:	83 30       	cpi	r24, 0x03	; 3
    21a8:	71 f4       	brne	.+28     	; 0x21c6 <UART_init+0x114>
		{
			SET_BIT(UCSRB,UCSZ1);
    21aa:	aa e2       	ldi	r26, 0x2A	; 42
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	ea e2       	ldi	r30, 0x2A	; 42
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	84 60       	ori	r24, 0x04	; 4
    21b6:	8c 93       	st	X, r24
			SET_BIT(UCSRB,UCSZ0);
    21b8:	aa e2       	ldi	r26, 0x2A	; 42
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	ea e2       	ldi	r30, 0x2A	; 42
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	82 60       	ori	r24, 0x02	; 2
    21c4:	8c 93       	st	X, r24

		}
	}

	/*Clear UMSEL for Asynchronous Operation*/
	CLEAR_BIT(UCSRC,UMSEL);
    21c6:	a0 e4       	ldi	r26, 0x40	; 64
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e0 e4       	ldi	r30, 0x40	; 64
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8f 7b       	andi	r24, 0xBF	; 191
    21d2:	8c 93       	st	X, r24

	/*choose the parity*/
	if(Config_Ptr->parity == DisabledParity)
    21d4:	eb 81       	ldd	r30, Y+3	; 0x03
    21d6:	fc 81       	ldd	r31, Y+4	; 0x04
    21d8:	81 81       	ldd	r24, Z+1	; 0x01
    21da:	88 23       	and	r24, r24
    21dc:	79 f4       	brne	.+30     	; 0x21fc <UART_init+0x14a>
	{
		CLEAR_BIT(UCSRC,UPM1);
    21de:	a0 e4       	ldi	r26, 0x40	; 64
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e0 e4       	ldi	r30, 0x40	; 64
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	8f 7d       	andi	r24, 0xDF	; 223
    21ea:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM0);
    21ec:	a0 e4       	ldi	r26, 0x40	; 64
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e0 e4       	ldi	r30, 0x40	; 64
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8f 7e       	andi	r24, 0xEF	; 239
    21f8:	8c 93       	st	X, r24
    21fa:	27 c0       	rjmp	.+78     	; 0x224a <UART_init+0x198>
	}
	else if(Config_Ptr->parity == EvenParity)
    21fc:	eb 81       	ldd	r30, Y+3	; 0x03
    21fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2200:	81 81       	ldd	r24, Z+1	; 0x01
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	79 f4       	brne	.+30     	; 0x2224 <UART_init+0x172>
	{
		SET_BIT(UCSRC,UPM1);
    2206:	a0 e4       	ldi	r26, 0x40	; 64
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e0 e4       	ldi	r30, 0x40	; 64
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	80 62       	ori	r24, 0x20	; 32
    2212:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM0);
    2214:	a0 e4       	ldi	r26, 0x40	; 64
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e0 e4       	ldi	r30, 0x40	; 64
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	8f 7e       	andi	r24, 0xEF	; 239
    2220:	8c 93       	st	X, r24
    2222:	13 c0       	rjmp	.+38     	; 0x224a <UART_init+0x198>
	}
	else if(Config_Ptr->parity == OddParity)
    2224:	eb 81       	ldd	r30, Y+3	; 0x03
    2226:	fc 81       	ldd	r31, Y+4	; 0x04
    2228:	81 81       	ldd	r24, Z+1	; 0x01
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	71 f4       	brne	.+28     	; 0x224a <UART_init+0x198>
	{
		SET_BIT(UCSRC,UPM1);
    222e:	a0 e4       	ldi	r26, 0x40	; 64
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e0 e4       	ldi	r30, 0x40	; 64
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	80 62       	ori	r24, 0x20	; 32
    223a:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM0);
    223c:	a0 e4       	ldi	r26, 0x40	; 64
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e0 e4       	ldi	r30, 0x40	; 64
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	80 61       	ori	r24, 0x10	; 16
    2248:	8c 93       	st	X, r24
	{

	}

	/*choose #stopbits*/
	if(Config_Ptr->stop_bit == STOPBIT_1bit)
    224a:	eb 81       	ldd	r30, Y+3	; 0x03
    224c:	fc 81       	ldd	r31, Y+4	; 0x04
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	88 23       	and	r24, r24
    2252:	41 f4       	brne	.+16     	; 0x2264 <UART_init+0x1b2>
	{
		CLEAR_BIT(UCSRC,USBS);
    2254:	a0 e4       	ldi	r26, 0x40	; 64
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e0 e4       	ldi	r30, 0x40	; 64
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	87 7f       	andi	r24, 0xF7	; 247
    2260:	8c 93       	st	X, r24
    2262:	0c c0       	rjmp	.+24     	; 0x227c <UART_init+0x1ca>
	}
	else if(Config_Ptr->stop_bit == STOPBIT_2bit)
    2264:	eb 81       	ldd	r30, Y+3	; 0x03
    2266:	fc 81       	ldd	r31, Y+4	; 0x04
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	39 f4       	brne	.+14     	; 0x227c <UART_init+0x1ca>
	{
		SET_BIT(UCSRC,USBS);
    226e:	a0 e4       	ldi	r26, 0x40	; 64
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e0 e4       	ldi	r30, 0x40	; 64
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	88 60       	ori	r24, 0x08	; 8
    227a:	8c 93       	st	X, r24
	{

	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 16UL))) - 1);
    227c:	eb 81       	ldd	r30, Y+3	; 0x03
    227e:	fc 81       	ldd	r31, Y+4	; 0x04
    2280:	83 81       	ldd	r24, Z+3	; 0x03
    2282:	94 81       	ldd	r25, Z+4	; 0x04
    2284:	a5 81       	ldd	r26, Z+5	; 0x05
    2286:	b6 81       	ldd	r27, Z+6	; 0x06
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	aa 1f       	adc	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	aa 1f       	adc	r26, r26
    2296:	bb 1f       	adc	r27, r27
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	aa 1f       	adc	r26, r26
    229e:	bb 1f       	adc	r27, r27
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	aa 1f       	adc	r26, r26
    22a6:	bb 1f       	adc	r27, r27
    22a8:	9c 01       	movw	r18, r24
    22aa:	ad 01       	movw	r20, r26
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	92 e1       	ldi	r25, 0x12	; 18
    22b0:	aa e7       	ldi	r26, 0x7A	; 122
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 1a 12 	call	0x2434	; 0x2434 <__udivmodsi4>
    22bc:	da 01       	movw	r26, r20
    22be:	c9 01       	movw	r24, r18
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    22c6:	e0 e4       	ldi	r30, 0x40	; 64
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	9a 81       	ldd	r25, Y+2	; 0x02
    22ce:	89 2f       	mov	r24, r25
    22d0:	99 27       	eor	r25, r25
    22d2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    22d4:	e9 e2       	ldi	r30, 0x29	; 41
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	80 83       	st	Z, r24
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	0f 92       	push	r0
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22f6:	eb e2       	ldi	r30, 0x2B	; 43
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	88 2f       	mov	r24, r24
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	80 72       	andi	r24, 0x20	; 32
    2302:	90 70       	andi	r25, 0x00	; 0
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	b9 f3       	breq	.-18     	; 0x22f6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2308:	ec e2       	ldi	r30, 0x2C	; 44
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2310:	0f 90       	pop	r0
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2320:	eb e2       	ldi	r30, 0x2B	; 43
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	88 23       	and	r24, r24
    2328:	dc f7       	brge	.-10     	; 0x2320 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    232a:	ec e2       	ldi	r30, 0x2C	; 44
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
}
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	00 d0       	rcall	.+0      	; 0x233c <UART_sendString+0x6>
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	9b 83       	std	Y+3, r25	; 0x03
    2344:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2346:	19 82       	std	Y+1, r1	; 0x01
    2348:	0e c0       	rjmp	.+28     	; 0x2366 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	fc 01       	movw	r30, r24
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	80 81       	ld	r24, Z
    235c:	0e 94 75 11 	call	0x22ea	; 0x22ea <UART_sendByte>
		i++;
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	fc 01       	movw	r30, r24
    2372:	e2 0f       	add	r30, r18
    2374:	f3 1f       	adc	r31, r19
    2376:	80 81       	ld	r24, Z
    2378:	88 23       	and	r24, r24
    237a:	39 f7       	brne	.-50     	; 0x234a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <UART_receiveString+0xa>
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	9b 83       	std	Y+3, r25	; 0x03
    239a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    239c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	8c 01       	movw	r16, r24
    23aa:	02 0f       	add	r16, r18
    23ac:	13 1f       	adc	r17, r19
    23ae:	0e 94 8c 11 	call	0x2318	; 0x2318 <UART_recieveByte>
    23b2:	f8 01       	movw	r30, r16
    23b4:	80 83       	st	Z, r24
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	8c 01       	movw	r16, r24
    23ca:	02 0f       	add	r16, r18
    23cc:	13 1f       	adc	r17, r19
    23ce:	0e 94 8c 11 	call	0x2318	; 0x2318 <UART_recieveByte>
    23d2:	f8 01       	movw	r30, r16
    23d4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	8a 81       	ldd	r24, Y+2	; 0x02
    23de:	9b 81       	ldd	r25, Y+3	; 0x03
    23e0:	fc 01       	movw	r30, r24
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	80 81       	ld	r24, Z
    23e8:	83 32       	cpi	r24, 0x23	; 35
    23ea:	31 f7       	brne	.-52     	; 0x23b8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	28 2f       	mov	r18, r24
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	fc 01       	movw	r30, r24
    23f8:	e2 0f       	add	r30, r18
    23fa:	f3 1f       	adc	r31, r19
    23fc:	10 82       	st	Z, r1
}
    23fe:	0f 90       	pop	r0
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	08 95       	ret

0000240e <__divmodhi4>:
    240e:	97 fb       	bst	r25, 7
    2410:	09 2e       	mov	r0, r25
    2412:	07 26       	eor	r0, r23
    2414:	0a d0       	rcall	.+20     	; 0x242a <__divmodhi4_neg1>
    2416:	77 fd       	sbrc	r23, 7
    2418:	04 d0       	rcall	.+8      	; 0x2422 <__divmodhi4_neg2>
    241a:	2e d0       	rcall	.+92     	; 0x2478 <__udivmodhi4>
    241c:	06 d0       	rcall	.+12     	; 0x242a <__divmodhi4_neg1>
    241e:	00 20       	and	r0, r0
    2420:	1a f4       	brpl	.+6      	; 0x2428 <__divmodhi4_exit>

00002422 <__divmodhi4_neg2>:
    2422:	70 95       	com	r23
    2424:	61 95       	neg	r22
    2426:	7f 4f       	sbci	r23, 0xFF	; 255

00002428 <__divmodhi4_exit>:
    2428:	08 95       	ret

0000242a <__divmodhi4_neg1>:
    242a:	f6 f7       	brtc	.-4      	; 0x2428 <__divmodhi4_exit>
    242c:	90 95       	com	r25
    242e:	81 95       	neg	r24
    2430:	9f 4f       	sbci	r25, 0xFF	; 255
    2432:	08 95       	ret

00002434 <__udivmodsi4>:
    2434:	a1 e2       	ldi	r26, 0x21	; 33
    2436:	1a 2e       	mov	r1, r26
    2438:	aa 1b       	sub	r26, r26
    243a:	bb 1b       	sub	r27, r27
    243c:	fd 01       	movw	r30, r26
    243e:	0d c0       	rjmp	.+26     	; 0x245a <__udivmodsi4_ep>

00002440 <__udivmodsi4_loop>:
    2440:	aa 1f       	adc	r26, r26
    2442:	bb 1f       	adc	r27, r27
    2444:	ee 1f       	adc	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	a2 17       	cp	r26, r18
    244a:	b3 07       	cpc	r27, r19
    244c:	e4 07       	cpc	r30, r20
    244e:	f5 07       	cpc	r31, r21
    2450:	20 f0       	brcs	.+8      	; 0x245a <__udivmodsi4_ep>
    2452:	a2 1b       	sub	r26, r18
    2454:	b3 0b       	sbc	r27, r19
    2456:	e4 0b       	sbc	r30, r20
    2458:	f5 0b       	sbc	r31, r21

0000245a <__udivmodsi4_ep>:
    245a:	66 1f       	adc	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	88 1f       	adc	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	1a 94       	dec	r1
    2464:	69 f7       	brne	.-38     	; 0x2440 <__udivmodsi4_loop>
    2466:	60 95       	com	r22
    2468:	70 95       	com	r23
    246a:	80 95       	com	r24
    246c:	90 95       	com	r25
    246e:	9b 01       	movw	r18, r22
    2470:	ac 01       	movw	r20, r24
    2472:	bd 01       	movw	r22, r26
    2474:	cf 01       	movw	r24, r30
    2476:	08 95       	ret

00002478 <__udivmodhi4>:
    2478:	aa 1b       	sub	r26, r26
    247a:	bb 1b       	sub	r27, r27
    247c:	51 e1       	ldi	r21, 0x11	; 17
    247e:	07 c0       	rjmp	.+14     	; 0x248e <__udivmodhi4_ep>

00002480 <__udivmodhi4_loop>:
    2480:	aa 1f       	adc	r26, r26
    2482:	bb 1f       	adc	r27, r27
    2484:	a6 17       	cp	r26, r22
    2486:	b7 07       	cpc	r27, r23
    2488:	10 f0       	brcs	.+4      	; 0x248e <__udivmodhi4_ep>
    248a:	a6 1b       	sub	r26, r22
    248c:	b7 0b       	sbc	r27, r23

0000248e <__udivmodhi4_ep>:
    248e:	88 1f       	adc	r24, r24
    2490:	99 1f       	adc	r25, r25
    2492:	5a 95       	dec	r21
    2494:	a9 f7       	brne	.-22     	; 0x2480 <__udivmodhi4_loop>
    2496:	80 95       	com	r24
    2498:	90 95       	com	r25
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	08 95       	ret

000024a0 <__prologue_saves__>:
    24a0:	2f 92       	push	r2
    24a2:	3f 92       	push	r3
    24a4:	4f 92       	push	r4
    24a6:	5f 92       	push	r5
    24a8:	6f 92       	push	r6
    24aa:	7f 92       	push	r7
    24ac:	8f 92       	push	r8
    24ae:	9f 92       	push	r9
    24b0:	af 92       	push	r10
    24b2:	bf 92       	push	r11
    24b4:	cf 92       	push	r12
    24b6:	df 92       	push	r13
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	ca 1b       	sub	r28, r26
    24ca:	db 0b       	sbc	r29, r27
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	09 94       	ijmp

000024d8 <__epilogue_restores__>:
    24d8:	2a 88       	ldd	r2, Y+18	; 0x12
    24da:	39 88       	ldd	r3, Y+17	; 0x11
    24dc:	48 88       	ldd	r4, Y+16	; 0x10
    24de:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    24e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    24e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    24e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ea:	b9 84       	ldd	r11, Y+9	; 0x09
    24ec:	c8 84       	ldd	r12, Y+8	; 0x08
    24ee:	df 80       	ldd	r13, Y+7	; 0x07
    24f0:	ee 80       	ldd	r14, Y+6	; 0x06
    24f2:	fd 80       	ldd	r15, Y+5	; 0x05
    24f4:	0c 81       	ldd	r16, Y+4	; 0x04
    24f6:	1b 81       	ldd	r17, Y+3	; 0x03
    24f8:	aa 81       	ldd	r26, Y+2	; 0x02
    24fa:	b9 81       	ldd	r27, Y+1	; 0x01
    24fc:	ce 0f       	add	r28, r30
    24fe:	d1 1d       	adc	r29, r1
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	ed 01       	movw	r28, r26
    250c:	08 95       	ret

0000250e <_exit>:
    250e:	f8 94       	cli

00002510 <__stop_program>:
    2510:	ff cf       	rjmp	.-2      	; 0x2510 <__stop_program>
