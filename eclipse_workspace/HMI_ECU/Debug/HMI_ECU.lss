
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  00003a64  00003af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001f6  008001f6  00003c8e  2**0
                  ALLOC
  3 .stab         00002ff4  00000000  00000000  00003c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000129b  00000000  00000000  00006c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000809f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00008270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000a280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000b3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000c584  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000c842  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__vector_4>
      14:	0c 94 28 19 	jmp	0x3250	; 0x3250 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__vector_9>
      28:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__vector_10>
      2c:	0c 94 5c 18 	jmp	0x30b8	; 0x30b8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 11 	call	0x2236	; 0x2236 <main>
      8a:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ee       	ldi	r26, 0xE6	; 230
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ee       	ldi	r24, 0xE6	; 230
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dc 1c 	jmp	0x39b8	; 0x39b8 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e2 51       	subi	r30, 0x12	; 18
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <GPIO_setupPinDirection+0x8>
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6a 83       	std	Y+2, r22	; 0x02
     cb2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	08 f0       	brcs	.+2      	; 0xcbc <GPIO_setupPinDirection+0x1c>
     cba:	d5 c0       	rjmp	.+426    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <GPIO_setupPinDirection+0x24>
     cc2:	d1 c0       	rjmp	.+418    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3d 83       	std	Y+5, r19	; 0x05
     ccc:	2c 83       	std	Y+4, r18	; 0x04
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
     cd0:	9d 81       	ldd	r25, Y+5	; 0x05
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <GPIO_setupPinDirection+0x3a>
     cd8:	43 c0       	rjmp	.+134    	; 0xd60 <GPIO_setupPinDirection+0xc0>
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	2c f4       	brge	.+10     	; 0xcee <GPIO_setupPinDirection+0x4e>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	71 f0       	breq	.+28     	; 0xd08 <GPIO_setupPinDirection+0x68>
     cec:	bc c0       	rjmp	.+376    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
     cee:	2c 81       	ldd	r18, Y+4	; 0x04
     cf0:	3d 81       	ldd	r19, Y+5	; 0x05
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	31 05       	cpc	r19, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <GPIO_setupPinDirection+0x5a>
     cf8:	5f c0       	rjmp	.+190    	; 0xdb8 <GPIO_setupPinDirection+0x118>
     cfa:	8c 81       	ldd	r24, Y+4	; 0x04
     cfc:	9d 81       	ldd	r25, Y+5	; 0x05
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <GPIO_setupPinDirection+0x66>
     d04:	85 c0       	rjmp	.+266    	; 0xe10 <GPIO_setupPinDirection+0x170>
     d06:	af c0       	rjmp	.+350    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	a1 f4       	brne	.+40     	; 0xd36 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d0e:	aa e3       	ldi	r26, 0x3A	; 58
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	ea e3       	ldi	r30, 0x3A	; 58
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <GPIO_setupPinDirection+0x8c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <GPIO_setupPinDirection+0x88>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	98 c0       	rjmp	.+304    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <GPIO_setupPinDirection+0xb4>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <GPIO_setupPinDirection+0xb0>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	83 c0       	rjmp	.+262    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	a1 f4       	brne	.+40     	; 0xd8e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d66:	a7 e3       	ldi	r26, 0x37	; 55
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e7 e3       	ldi	r30, 0x37	; 55
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0xe4>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0xe0>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	6c c0       	rjmp	.+216    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d8e:	a7 e3       	ldi	r26, 0x37	; 55
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e7 e3       	ldi	r30, 0x37	; 55
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setupPinDirection+0x10c>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setupPinDirection+0x108>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	57 c0       	rjmp	.+174    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	a1 f4       	brne	.+40     	; 0xde6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     dbe:	a4 e3       	ldi	r26, 0x34	; 52
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e4 e3       	ldi	r30, 0x34	; 52
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0x13c>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0x138>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	40 c0       	rjmp	.+128    	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     de6:	a4 e3       	ldi	r26, 0x34	; 52
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e4 e3       	ldi	r30, 0x34	; 52
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <GPIO_setupPinDirection+0x164>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <GPIO_setupPinDirection+0x160>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	2b c0       	rjmp	.+86     	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	a1 f4       	brne	.+40     	; 0xe3e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e16:	a1 e3       	ldi	r26, 0x31	; 49
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e1 e3       	ldi	r30, 0x31	; 49
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <GPIO_setupPinDirection+0x194>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <GPIO_setupPinDirection+0x190>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e3e:	a1 e3       	ldi	r26, 0x31	; 49
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e1 e3       	ldi	r30, 0x31	; 49
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <GPIO_setupPinDirection+0x1bc>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <GPIO_setupPinDirection+0x1b8>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <GPIO_writePin+0x6>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <GPIO_writePin+0x8>
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	6a 83       	std	Y+2, r22	; 0x02
     e88:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <GPIO_writePin+0x1c>
     e90:	d5 c0       	rjmp	.+426    	; 0x103c <GPIO_writePin+0x1c6>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	08 f0       	brcs	.+2      	; 0xe9a <GPIO_writePin+0x24>
     e98:	d1 c0       	rjmp	.+418    	; 0x103c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the value required on the chosen pin */
		switch(port_num)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3d 83       	std	Y+5, r19	; 0x05
     ea2:	2c 83       	std	Y+4, r18	; 0x04
     ea4:	8c 81       	ldd	r24, Y+4	; 0x04
     ea6:	9d 81       	ldd	r25, Y+5	; 0x05
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	09 f4       	brne	.+2      	; 0xeb0 <GPIO_writePin+0x3a>
     eae:	43 c0       	rjmp	.+134    	; 0xf36 <GPIO_writePin+0xc0>
     eb0:	2c 81       	ldd	r18, Y+4	; 0x04
     eb2:	3d 81       	ldd	r19, Y+5	; 0x05
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	2c f4       	brge	.+10     	; 0xec4 <GPIO_writePin+0x4e>
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	9d 81       	ldd	r25, Y+5	; 0x05
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	71 f0       	breq	.+28     	; 0xede <GPIO_writePin+0x68>
     ec2:	bc c0       	rjmp	.+376    	; 0x103c <GPIO_writePin+0x1c6>
     ec4:	2c 81       	ldd	r18, Y+4	; 0x04
     ec6:	3d 81       	ldd	r19, Y+5	; 0x05
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <GPIO_writePin+0x5a>
     ece:	5f c0       	rjmp	.+190    	; 0xf8e <GPIO_writePin+0x118>
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	9d 81       	ldd	r25, Y+5	; 0x05
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	09 f4       	brne	.+2      	; 0xedc <GPIO_writePin+0x66>
     eda:	85 c0       	rjmp	.+266    	; 0xfe6 <GPIO_writePin+0x170>
     edc:	af c0       	rjmp	.+350    	; 0x103c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ee4:	ab e3       	ldi	r26, 0x3B	; 59
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	eb e3       	ldi	r30, 0x3B	; 59
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <GPIO_writePin+0x8c>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <GPIO_writePin+0x88>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	98 c0       	rjmp	.+304    	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f0c:	ab e3       	ldi	r26, 0x3B	; 59
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	eb e3       	ldi	r30, 0x3B	; 59
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <GPIO_writePin+0xb4>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <GPIO_writePin+0xb0>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	83 c0       	rjmp	.+262    	; 0x103c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	a1 f4       	brne	.+40     	; 0xf64 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f3c:	a8 e3       	ldi	r26, 0x38	; 56
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e8 e3       	ldi	r30, 0x38	; 56
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <GPIO_writePin+0xe4>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <GPIO_writePin+0xe0>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	6c c0       	rjmp	.+216    	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f64:	a8 e3       	ldi	r26, 0x38	; 56
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e8 e3       	ldi	r30, 0x38	; 56
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_writePin+0x10c>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_writePin+0x108>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	57 c0       	rjmp	.+174    	; 0x103c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	a1 f4       	brne	.+40     	; 0xfbc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_writePin+0x13c>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_writePin+0x138>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	40 c0       	rjmp	.+128    	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fbc:	a5 e3       	ldi	r26, 0x35	; 53
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e5 e3       	ldi	r30, 0x35	; 53
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_writePin+0x164>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_writePin+0x160>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	2b c0       	rjmp	.+86     	; 0x103c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	a1 f4       	brne	.+40     	; 0x1014 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fec:	a2 e3       	ldi	r26, 0x32	; 50
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e2 e3       	ldi	r30, 0x32	; 50
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_writePin+0x194>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_writePin+0x190>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	14 c0       	rjmp	.+40     	; 0x103c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1014:	a2 e3       	ldi	r26, 0x32	; 50
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_writePin+0x1bc>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_writePin+0x1b8>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPIO_readPin+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <GPIO_readPin+0x8>
    1054:	0f 92       	push	r0
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result;
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	18 f4       	brcc	.+6      	; 0x106a <GPIO_readPin+0x1e>
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	10 f0       	brcs	.+4      	; 0x106e <GPIO_readPin+0x22>
	{
		result =  LOGIC_LOW;
    106a:	19 82       	std	Y+1, r1	; 0x01
    106c:	80 c0       	rjmp	.+256    	; 0x116e <GPIO_readPin+0x122>
	}
	else
	{
		/* Write the value required on the chosen pin */
		switch(port_num)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3d 83       	std	Y+5, r19	; 0x05
    1076:	2c 83       	std	Y+4, r18	; 0x04
    1078:	4c 81       	ldd	r20, Y+4	; 0x04
    107a:	5d 81       	ldd	r21, Y+5	; 0x05
    107c:	41 30       	cpi	r20, 0x01	; 1
    107e:	51 05       	cpc	r21, r1
    1080:	79 f1       	breq	.+94     	; 0x10e0 <GPIO_readPin+0x94>
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <GPIO_readPin+0x4c>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	69 f0       	breq	.+26     	; 0x10b0 <GPIO_readPin+0x64>
    1096:	6b c0       	rjmp	.+214    	; 0x116e <GPIO_readPin+0x122>
    1098:	4c 81       	ldd	r20, Y+4	; 0x04
    109a:	5d 81       	ldd	r21, Y+5	; 0x05
    109c:	42 30       	cpi	r20, 0x02	; 2
    109e:	51 05       	cpc	r21, r1
    10a0:	b9 f1       	breq	.+110    	; 0x1110 <GPIO_readPin+0xc4>
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
    10a4:	9d 81       	ldd	r25, Y+5	; 0x05
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <GPIO_readPin+0x62>
    10ac:	49 c0       	rjmp	.+146    	; 0x1140 <GPIO_readPin+0xf4>
    10ae:	5f c0       	rjmp	.+190    	; 0x116e <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10b0:	e9 e3       	ldi	r30, 0x39	; 57
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	a9 01       	movw	r20, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <GPIO_readPin+0x7c>
    10c4:	55 95       	asr	r21
    10c6:	47 95       	ror	r20
    10c8:	8a 95       	dec	r24
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <GPIO_readPin+0x78>
    10cc:	ca 01       	movw	r24, r20
    10ce:	81 70       	andi	r24, 0x01	; 1
    10d0:	90 70       	andi	r25, 0x00	; 0
    10d2:	88 23       	and	r24, r24
    10d4:	19 f0       	breq	.+6      	; 0x10dc <GPIO_readPin+0x90>
			{
				result =  LOGIC_HIGH;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	49 c0       	rjmp	.+146    	; 0x116e <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    10dc:	19 82       	std	Y+1, r1	; 0x01
    10de:	47 c0       	rjmp	.+142    	; 0x116e <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10e0:	e6 e3       	ldi	r30, 0x36	; 54
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_readPin+0xac>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_readPin+0xa8>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	90 70       	andi	r25, 0x00	; 0
    1102:	88 23       	and	r24, r24
    1104:	19 f0       	breq	.+6      	; 0x110c <GPIO_readPin+0xc0>
			{
				result =  LOGIC_HIGH;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	31 c0       	rjmp	.+98     	; 0x116e <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	2f c0       	rjmp	.+94     	; 0x116e <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1110:	e3 e3       	ldi	r30, 0x33	; 51
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_readPin+0xdc>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_readPin+0xd8>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	88 23       	and	r24, r24
    1134:	19 f0       	breq	.+6      	; 0x113c <GPIO_readPin+0xf0>
			{
				result =  LOGIC_HIGH;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	19 c0       	rjmp	.+50     	; 0x116e <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    113c:	19 82       	std	Y+1, r1	; 0x01
    113e:	17 c0       	rjmp	.+46     	; 0x116e <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1140:	e0 e3       	ldi	r30, 0x30	; 48
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_readPin+0x10c>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_readPin+0x108>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	90 70       	andi	r25, 0x00	; 0
    1162:	88 23       	and	r24, r24
    1164:	19 f0       	breq	.+6      	; 0x116c <GPIO_readPin+0x120>
			{
				result =  LOGIC_HIGH;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	01 c0       	rjmp	.+2      	; 0x116e <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    116c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return result;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	00 d0       	rcall	.+0      	; 0x1186 <GPIO_setupPortDirection+0x6>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <GPIO_setupPortDirection+0x8>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	90 f5       	brcc	.+100    	; 0x11fa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin required */
		switch(port_num)
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3c 83       	std	Y+4, r19	; 0x04
    119e:	2b 83       	std	Y+3, r18	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	d1 f0       	breq	.+52     	; 0x11de <GPIO_setupPortDirection+0x5e>
    11aa:	2b 81       	ldd	r18, Y+3	; 0x03
    11ac:	3c 81       	ldd	r19, Y+4	; 0x04
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <GPIO_setupPortDirection+0x3e>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <GPIO_setupPortDirection+0x54>
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <GPIO_setupPortDirection+0x7a>
    11be:	2b 81       	ldd	r18, Y+3	; 0x03
    11c0:	3c 81       	ldd	r19, Y+4	; 0x04
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	81 f0       	breq	.+32     	; 0x11e8 <GPIO_setupPortDirection+0x68>
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	81 f0       	breq	.+32     	; 0x11f2 <GPIO_setupPortDirection+0x72>
    11d2:	13 c0       	rjmp	.+38     	; 0x11fa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	80 83       	st	Z, r24
    11dc:	0e c0       	rjmp	.+28     	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11de:	e7 e3       	ldi	r30, 0x37	; 55
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	80 83       	st	Z, r24
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	80 83       	st	Z, r24
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11f2:	e1 e3       	ldi	r30, 0x31	; 49
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
			break;
		}
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <GPIO_writePort+0x6>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <GPIO_writePort+0x8>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	90 f5       	brcc	.+100    	; 0x1282 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the required value to the chosen port */
		switch(port_num)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3c 83       	std	Y+4, r19	; 0x04
    1226:	2b 83       	std	Y+3, r18	; 0x03
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	d1 f0       	breq	.+52     	; 0x1266 <GPIO_writePort+0x5e>
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	2c f4       	brge	.+10     	; 0x1246 <GPIO_writePort+0x3e>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	61 f0       	breq	.+24     	; 0x125c <GPIO_writePort+0x54>
    1244:	1e c0       	rjmp	.+60     	; 0x1282 <GPIO_writePort+0x7a>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	81 f0       	breq	.+32     	; 0x1270 <GPIO_writePort+0x68>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	83 30       	cpi	r24, 0x03	; 3
    1256:	91 05       	cpc	r25, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <GPIO_writePort+0x72>
    125a:	13 c0       	rjmp	.+38     	; 0x1282 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	80 83       	st	Z, r24
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1266:	e8 e3       	ldi	r30, 0x38	; 56
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1270:	e5 e3       	ldi	r30, 0x35	; 53
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    127a:	e2 e3       	ldi	r30, 0x32	; 50
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
			break;
		}
	}
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <GPIO_readPort+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <GPIO_readPort+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8a 83       	std	Y+2, r24	; 0x02
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 result;

	if(port_num >= NUM_OF_PORTS)
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	10 f0       	brcs	.+4      	; 0x12a8 <GPIO_readPort+0x18>
	{
		result =  0;
    12a4:	19 82       	std	Y+1, r1	; 0x01
    12a6:	32 c0       	rjmp	.+100    	; 0x130c <GPIO_readPort+0x7c>
	}
	else
	{
		/* Read the required port */
		switch(port_num)
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3c 83       	std	Y+4, r19	; 0x04
    12b0:	2b 83       	std	Y+3, r18	; 0x03
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	d1 f0       	breq	.+52     	; 0x12f0 <GPIO_readPort+0x60>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <GPIO_readPort+0x40>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <GPIO_readPort+0x56>
    12ce:	1e c0       	rjmp	.+60     	; 0x130c <GPIO_readPort+0x7c>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	81 f0       	breq	.+32     	; 0x12fa <GPIO_readPort+0x6a>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	91 05       	cpc	r25, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <GPIO_readPort+0x74>
    12e4:	13 c0       	rjmp	.+38     	; 0x130c <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			result =  PINA;
    12e6:	e9 e3       	ldi	r30, 0x39	; 57
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	0e c0       	rjmp	.+28     	; 0x130c <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			result =  PINB;
    12f0:	e6 e3       	ldi	r30, 0x36	; 54
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			result =  PINC;
    12fa:	e3 e3       	ldi	r30, 0x33	; 51
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	04 c0       	rjmp	.+8      	; 0x130c <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			result =  PIND;
    1304:	e0 e3       	ldi	r30, 0x30	; 48
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	6e 97       	sbiw	r28, 0x1e	; 30
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	63 e0       	ldi	r22, 0x03	; 3
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	64 e0       	ldi	r22, 0x04	; 4
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	65 e0       	ldi	r22, 0x05	; 5
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	66 e0       	ldi	r22, 0x06	; 6
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	67 e0       	ldi	r22, 0x07	; 7
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1380:	1d 8e       	std	Y+29, r1	; 0x1d
    1382:	28 c1       	rjmp	.+592    	; 0x15d4 <KEYPAD_getPressedKey+0x2b8>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1398:	1e 8e       	std	Y+30, r1	; 0x1e
    139a:	9e c0       	rjmp	.+316    	; 0x14d8 <KEYPAD_getPressedKey+0x1bc>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    139c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    139e:	98 2f       	mov	r25, r24
    13a0:	9c 5f       	subi	r25, 0xFC	; 252
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	69 2f       	mov	r22, r25
    13a6:	0e 94 26 08 	call	0x104c	; 0x104c <GPIO_readPin>
    13aa:	88 23       	and	r24, r24
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <KEYPAD_getPressedKey+0x94>
    13ae:	91 c0       	rjmp	.+290    	; 0x14d2 <KEYPAD_getPressedKey+0x1b6>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 ea       	ldi	r26, 0xA0	; 160
    13b6:	b1 e4       	ldi	r27, 0x41	; 65
    13b8:	89 8f       	std	Y+25, r24	; 0x19
    13ba:	9a 8f       	std	Y+26, r25	; 0x1a
    13bc:	ab 8f       	std	Y+27, r26	; 0x1b
    13be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	69 8d       	ldd	r22, Y+25	; 0x19
    13c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e7       	ldi	r20, 0x7A	; 122
    13ce:	55 e4       	ldi	r21, 0x45	; 69
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	8d 8b       	std	Y+21, r24	; 0x15
    13da:	9e 8b       	std	Y+22, r25	; 0x16
    13dc:	af 8b       	std	Y+23, r26	; 0x17
    13de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e0:	6d 89       	ldd	r22, Y+21	; 0x15
    13e2:	7e 89       	ldd	r23, Y+22	; 0x16
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	2c f4       	brge	.+10     	; 0x1402 <KEYPAD_getPressedKey+0xe6>
		__ticks = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9c 8b       	std	Y+20, r25	; 0x14
    13fe:	8b 8b       	std	Y+19, r24	; 0x13
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <KEYPAD_getPressedKey+0x164>
	else if (__tmp > 65535)
    1402:	6d 89       	ldd	r22, Y+21	; 0x15
    1404:	7e 89       	ldd	r23, Y+22	; 0x16
    1406:	8f 89       	ldd	r24, Y+23	; 0x17
    1408:	98 8d       	ldd	r25, Y+24	; 0x18
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	4f e7       	ldi	r20, 0x7F	; 127
    1410:	57 e4       	ldi	r21, 0x47	; 71
    1412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1416:	18 16       	cp	r1, r24
    1418:	4c f5       	brge	.+82     	; 0x146c <KEYPAD_getPressedKey+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	69 8d       	ldd	r22, Y+25	; 0x19
    141c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	51 e4       	ldi	r21, 0x41	; 65
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <KEYPAD_getPressedKey+0x146>
    1444:	80 e9       	ldi	r24, 0x90	; 144
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	9a 8b       	std	Y+18, r25	; 0x12
    144a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    144c:	89 89       	ldd	r24, Y+17	; 0x11
    144e:	9a 89       	ldd	r25, Y+18	; 0x12
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <KEYPAD_getPressedKey+0x134>
    1454:	9a 8b       	std	Y+18, r25	; 0x12
    1456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8b 89       	ldd	r24, Y+19	; 0x13
    145a:	9c 89       	ldd	r25, Y+20	; 0x14
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9c 8b       	std	Y+20, r25	; 0x14
    1460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8b 89       	ldd	r24, Y+19	; 0x13
    1464:	9c 89       	ldd	r25, Y+20	; 0x14
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f7       	brne	.-38     	; 0x1444 <KEYPAD_getPressedKey+0x128>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <KEYPAD_getPressedKey+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	6d 89       	ldd	r22, Y+21	; 0x15
    146e:	7e 89       	ldd	r23, Y+22	; 0x16
    1470:	8f 89       	ldd	r24, Y+23	; 0x17
    1472:	98 8d       	ldd	r25, Y+24	; 0x18
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	8b 89       	ldd	r24, Y+19	; 0x13
    1482:	9c 89       	ldd	r25, Y+20	; 0x14
    1484:	98 8b       	std	Y+16, r25	; 0x10
    1486:	8f 87       	std	Y+15, r24	; 0x0f
    1488:	8f 85       	ldd	r24, Y+15	; 0x0f
    148a:	98 89       	ldd	r25, Y+16	; 0x10
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <KEYPAD_getPressedKey+0x170>
    1490:	98 8b       	std	Y+16, r25	; 0x10
    1492:	8f 87       	std	Y+15, r24	; 0x0f
				{
					/* Debounce delay */
					_delay_ms(20);

					/* Wait until the key is released */
					while (GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED);
    1494:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1496:	98 2f       	mov	r25, r24
    1498:	9c 5f       	subi	r25, 0xFC	; 252
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	69 2f       	mov	r22, r25
    149e:	0e 94 26 08 	call	0x104c	; 0x104c <GPIO_readPin>
    14a2:	88 23       	and	r24, r24
    14a4:	b9 f3       	breq	.-18     	; 0x1494 <KEYPAD_getPressedKey+0x178>

#if (KEYPAD_NUM_COLS == 3)
					return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    14a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	98 2f       	mov	r25, r24
    14b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14b8:	89 0f       	add	r24, r25
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	0e 94 ef 0a 	call	0x15de	; 0x15de <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    14c0:	6e 96       	adiw	r28, 0x1e	; 30
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    14d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14d4:	8f 5f       	subi	r24, 0xFF	; 255
    14d6:	8e 8f       	std	Y+30, r24	; 0x1e
    14d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <KEYPAD_getPressedKey+0x1c4>
    14de:	5e cf       	rjmp	.-324    	; 0x139c <KEYPAD_getPressedKey+0x80>
#elif (KEYPAD_NUM_COLS == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e2       	ldi	r26, 0x20	; 32
    14f0:	b1 e4       	ldi	r27, 0x41	; 65
    14f2:	8b 87       	std	Y+11, r24	; 0x0b
    14f4:	9c 87       	std	Y+12, r25	; 0x0c
    14f6:	ad 87       	std	Y+13, r26	; 0x0d
    14f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	9e 85       	ldd	r25, Y+14	; 0x0e
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	4a e7       	ldi	r20, 0x7A	; 122
    1508:	55 e4       	ldi	r21, 0x45	; 69
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	8f 83       	std	Y+7, r24	; 0x07
    1514:	98 87       	std	Y+8, r25	; 0x08
    1516:	a9 87       	std	Y+9, r26	; 0x09
    1518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    151a:	6f 81       	ldd	r22, Y+7	; 0x07
    151c:	78 85       	ldd	r23, Y+8	; 0x08
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	9a 85       	ldd	r25, Y+10	; 0x0a
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	2c f4       	brge	.+10     	; 0x153c <KEYPAD_getPressedKey+0x220>
		__ticks = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	3f c0       	rjmp	.+126    	; 0x15ba <KEYPAD_getPressedKey+0x29e>
	else if (__tmp > 65535)
    153c:	6f 81       	ldd	r22, Y+7	; 0x07
    153e:	78 85       	ldd	r23, Y+8	; 0x08
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	4f e7       	ldi	r20, 0x7F	; 127
    154a:	57 e4       	ldi	r21, 0x47	; 71
    154c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1550:	18 16       	cp	r1, r24
    1552:	4c f5       	brge	.+82     	; 0x15a6 <KEYPAD_getPressedKey+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1554:	6b 85       	ldd	r22, Y+11	; 0x0b
    1556:	7c 85       	ldd	r23, Y+12	; 0x0c
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	0f c0       	rjmp	.+30     	; 0x159c <KEYPAD_getPressedKey+0x280>
    157e:	80 e9       	ldi	r24, 0x90	; 144
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <KEYPAD_getPressedKey+0x26e>
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f7       	brne	.-38     	; 0x157e <KEYPAD_getPressedKey+0x262>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <KEYPAD_getPressedKey+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	6f 81       	ldd	r22, Y+7	; 0x07
    15a8:	78 85       	ldd	r23, Y+8	; 0x08
    15aa:	89 85       	ldd	r24, Y+9	; 0x09
    15ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <KEYPAD_getPressedKey+0x2aa>
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    15ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	8d 8f       	std	Y+29, r24	; 0x1d
    15d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	08 f4       	brcc	.+2      	; 0x15dc <KEYPAD_getPressedKey+0x2c0>
    15da:	d4 ce       	rjmp	.-600    	; 0x1384 <KEYPAD_getPressedKey+0x68>
    15dc:	d1 ce       	rjmp	.-606    	; 0x1380 <KEYPAD_getPressedKey+0x64>

000015de <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3c 83       	std	Y+4, r19	; 0x04
    15f6:	2b 83       	std	Y+3, r18	; 0x03
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	88 30       	cpi	r24, 0x08	; 8
    15fe:	91 05       	cpc	r25, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1602:	70 c0       	rjmp	.+224    	; 0x16e4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	29 30       	cpi	r18, 0x09	; 9
    160a:	31 05       	cpc	r19, r1
    160c:	5c f5       	brge	.+86     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x86>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1618:	59 c0       	rjmp	.+178    	; 0x16cc <KEYPAD_4x4_adjustKeyNumber+0xee>
    161a:	2b 81       	ldd	r18, Y+3	; 0x03
    161c:	3c 81       	ldd	r19, Y+4	; 0x04
    161e:	25 30       	cpi	r18, 0x05	; 5
    1620:	31 05       	cpc	r19, r1
    1622:	9c f4       	brge	.+38     	; 0x164a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	91 05       	cpc	r25, r1
    162c:	09 f4       	brne	.+2      	; 0x1630 <KEYPAD_4x4_adjustKeyNumber+0x52>
    162e:	48 c0       	rjmp	.+144    	; 0x16c0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	23 30       	cpi	r18, 0x03	; 3
    1636:	31 05       	cpc	r19, r1
    1638:	0c f0       	brlt	.+2      	; 0x163c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    163a:	45 c0       	rjmp	.+138    	; 0x16c6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1646:	39 c0       	rjmp	.+114    	; 0x16ba <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1648:	68 c0       	rjmp	.+208    	; 0x171a <KEYPAD_4x4_adjustKeyNumber+0x13c>
    164a:	2b 81       	ldd	r18, Y+3	; 0x03
    164c:	3c 81       	ldd	r19, Y+4	; 0x04
    164e:	26 30       	cpi	r18, 0x06	; 6
    1650:	31 05       	cpc	r19, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1654:	41 c0       	rjmp	.+130    	; 0x16d8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	87 30       	cpi	r24, 0x07	; 7
    165c:	91 05       	cpc	r25, r1
    165e:	0c f0       	brlt	.+2      	; 0x1662 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1660:	3e c0       	rjmp	.+124    	; 0x16de <KEYPAD_4x4_adjustKeyNumber+0x100>
    1662:	37 c0       	rjmp	.+110    	; 0x16d2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	2c 30       	cpi	r18, 0x0C	; 12
    166a:	31 05       	cpc	r19, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <KEYPAD_4x4_adjustKeyNumber+0x92>
    166e:	46 c0       	rjmp	.+140    	; 0x16fc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	8d 30       	cpi	r24, 0x0D	; 13
    1676:	91 05       	cpc	r25, r1
    1678:	5c f4       	brge	.+22     	; 0x1690 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	2a 30       	cpi	r18, 0x0A	; 10
    1680:	31 05       	cpc	r19, r1
    1682:	b1 f1       	breq	.+108    	; 0x16f0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	8b 30       	cpi	r24, 0x0B	; 11
    168a:	91 05       	cpc	r25, r1
    168c:	a4 f5       	brge	.+104    	; 0x16f6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    168e:	2d c0       	rjmp	.+90     	; 0x16ea <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	2e 30       	cpi	r18, 0x0E	; 14
    1696:	31 05       	cpc	r19, r1
    1698:	b9 f1       	breq	.+110    	; 0x1708 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	8e 30       	cpi	r24, 0x0E	; 14
    16a0:	91 05       	cpc	r25, r1
    16a2:	7c f1       	brlt	.+94     	; 0x1702 <KEYPAD_4x4_adjustKeyNumber+0x124>
    16a4:	2b 81       	ldd	r18, Y+3	; 0x03
    16a6:	3c 81       	ldd	r19, Y+4	; 0x04
    16a8:	2f 30       	cpi	r18, 0x0F	; 15
    16aa:	31 05       	cpc	r19, r1
    16ac:	81 f1       	breq	.+96     	; 0x170e <KEYPAD_4x4_adjustKeyNumber+0x130>
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	80 31       	cpi	r24, 0x10	; 16
    16b4:	91 05       	cpc	r25, r1
    16b6:	71 f1       	breq	.+92     	; 0x1714 <KEYPAD_4x4_adjustKeyNumber+0x136>
    16b8:	30 c0       	rjmp	.+96     	; 0x171a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
	case 1: return '7';
    16ba:	97 e3       	ldi	r25, 0x37	; 55
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	2e c0       	rjmp	.+92     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 2: return '8';
    16c0:	28 e3       	ldi	r18, 0x38	; 56
    16c2:	2a 83       	std	Y+2, r18	; 0x02
    16c4:	2b c0       	rjmp	.+86     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 3: return '9';
    16c6:	39 e3       	ldi	r19, 0x39	; 57
    16c8:	3a 83       	std	Y+2, r19	; 0x02
    16ca:	28 c0       	rjmp	.+80     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 4: return '%';
    16cc:	85 e2       	ldi	r24, 0x25	; 37
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	25 c0       	rjmp	.+74     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 5: return '4';
    16d2:	94 e3       	ldi	r25, 0x34	; 52
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	22 c0       	rjmp	.+68     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 6: return '5';
    16d8:	25 e3       	ldi	r18, 0x35	; 53
    16da:	2a 83       	std	Y+2, r18	; 0x02
    16dc:	1f c0       	rjmp	.+62     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 7: return '6';
    16de:	36 e3       	ldi	r19, 0x36	; 54
    16e0:	3a 83       	std	Y+2, r19	; 0x02
    16e2:	1c c0       	rjmp	.+56     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 8: return '*';
    16e4:	8a e2       	ldi	r24, 0x2A	; 42
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	19 c0       	rjmp	.+50     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 9: return '1';
    16ea:	91 e3       	ldi	r25, 0x31	; 49
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	16 c0       	rjmp	.+44     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 10: return '2';
    16f0:	22 e3       	ldi	r18, 0x32	; 50
    16f2:	2a 83       	std	Y+2, r18	; 0x02
    16f4:	13 c0       	rjmp	.+38     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 11: return '3';
    16f6:	33 e3       	ldi	r19, 0x33	; 51
    16f8:	3a 83       	std	Y+2, r19	; 0x02
    16fa:	10 c0       	rjmp	.+32     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 12: return '-';
    16fc:	8d e2       	ldi	r24, 0x2D	; 45
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    1700:	0d c0       	rjmp	.+26     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 13: return ' ';
    1702:	90 e2       	ldi	r25, 0x20	; 32
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	0a c0       	rjmp	.+20     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 14: return '0';
    1708:	20 e3       	ldi	r18, 0x30	; 48
    170a:	2a 83       	std	Y+2, r18	; 0x02
    170c:	07 c0       	rjmp	.+14     	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 15: return '=';
    170e:	3d e3       	ldi	r19, 0x3D	; 61
    1710:	3a 83       	std	Y+2, r19	; 0x02
    1712:	04 c0       	rjmp	.+8      	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
	case 16: return '+';
    1714:	8b e2       	ldi	r24, 0x2B	; 43
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	01 c0       	rjmp	.+2      	; 0x171c <KEYPAD_4x4_adjustKeyNumber+0x13e>
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <KEYPAD_4x4_adjustKeyNumber+0x142>
	}
}
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	9d 83       	std	Y+5, r25	; 0x05
    1720:	8d 81       	ldd	r24, Y+5	; 0x05
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <LCD_init>:
#include "std_types.h"
#include <util/delay.h>

/*LCD init*/
void LCD_init(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	2e 97       	sbiw	r28, 0x0e	; 14
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(RS_PORT, RS_PIN, PIN_OUTPUT);
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	41 e0       	ldi	r20, 0x01	; 1
    174c:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ENABLE_PORT, ENABLE_PIN, PIN_OUTPUT);
    1750:	82 e0       	ldi	r24, 0x02	; 2
    1752:	61 e0       	ldi	r22, 0x01	; 1
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 50 06 	call	0xca0	; 0xca0 <GPIO_setupPinDirection>

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	0e 94 c0 08 	call	0x1180	; 0x1180 <GPIO_setupPortDirection>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 ea       	ldi	r26, 0xA0	; 160
    1768:	b1 e4       	ldi	r27, 0x41	; 65
    176a:	8b 87       	std	Y+11, r24	; 0x0b
    176c:	9c 87       	std	Y+12, r25	; 0x0c
    176e:	ad 87       	std	Y+13, r26	; 0x0d
    1770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6b 85       	ldd	r22, Y+11	; 0x0b
    1774:	7c 85       	ldd	r23, Y+12	; 0x0c
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a e7       	ldi	r20, 0x7A	; 122
    1780:	55 e4       	ldi	r21, 0x45	; 69
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8f 83       	std	Y+7, r24	; 0x07
    178c:	98 87       	std	Y+8, r25	; 0x08
    178e:	a9 87       	std	Y+9, r26	; 0x09
    1790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <LCD_init+0x82>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9e 83       	std	Y+6, r25	; 0x06
    17b0:	8d 83       	std	Y+5, r24	; 0x05
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <LCD_init+0x100>
	else if (__tmp > 65535)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9e 83       	std	Y+6, r25	; 0x06
    17f2:	8d 83       	std	Y+5, r24	; 0x05
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_init+0xe2>
    17f6:	80 e9       	ldi	r24, 0x90	; 144
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9c 83       	std	Y+4, r25	; 0x04
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	9c 81       	ldd	r25, Y+4	; 0x04
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_init+0xd0>
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8d 81       	ldd	r24, Y+5	; 0x05
    1816:	9e 81       	ldd	r25, Y+6	; 0x06
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_init+0xc4>
    181c:	14 c0       	rjmp	.+40     	; 0x1846 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	6f 81       	ldd	r22, Y+7	; 0x07
    1820:	78 85       	ldd	r23, Y+8	; 0x08
    1822:	89 85       	ldd	r24, Y+9	; 0x09
    1824:	9a 85       	ldd	r25, Y+10	; 0x0a
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_init+0x10c>
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1846:	88 e3       	ldi	r24, 0x38	; 56
    1848:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    184c:	8c e0       	ldi	r24, 0x0C	; 12
    184e:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_sendCommand>
}
    1858:	2e 96       	adiw	r28, 0x0e	; 14
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <LCD_sendCommand>:

/*Send commad*/
void LCD_sendCommand(uint8 command)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	e9 97       	sbiw	r28, 0x39	; 57
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT, RS_PIN, LOGIC_LOW);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e8       	ldi	r26, 0x80	; 128
    1890:	bf e3       	ldi	r27, 0x3F	; 63
    1892:	8d ab       	std	Y+53, r24	; 0x35
    1894:	9e ab       	std	Y+54, r25	; 0x36
    1896:	af ab       	std	Y+55, r26	; 0x37
    1898:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6d a9       	ldd	r22, Y+53	; 0x35
    189c:	7e a9       	ldd	r23, Y+54	; 0x36
    189e:	8f a9       	ldd	r24, Y+55	; 0x37
    18a0:	98 ad       	ldd	r25, Y+56	; 0x38
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a e7       	ldi	r20, 0x7A	; 122
    18a8:	55 e4       	ldi	r21, 0x45	; 69
    18aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	89 ab       	std	Y+49, r24	; 0x31
    18b4:	9a ab       	std	Y+50, r25	; 0x32
    18b6:	ab ab       	std	Y+51, r26	; 0x33
    18b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18ba:	69 a9       	ldd	r22, Y+49	; 0x31
    18bc:	7a a9       	ldd	r23, Y+50	; 0x32
    18be:	8b a9       	ldd	r24, Y+51	; 0x33
    18c0:	9c a9       	ldd	r25, Y+52	; 0x34
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <LCD_sendCommand+0x72>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	98 ab       	std	Y+48, r25	; 0x30
    18d8:	8f a7       	std	Y+47, r24	; 0x2f
    18da:	3f c0       	rjmp	.+126    	; 0x195a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    18dc:	69 a9       	ldd	r22, Y+49	; 0x31
    18de:	7a a9       	ldd	r23, Y+50	; 0x32
    18e0:	8b a9       	ldd	r24, Y+51	; 0x33
    18e2:	9c a9       	ldd	r25, Y+52	; 0x34
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6d a9       	ldd	r22, Y+53	; 0x35
    18f6:	7e a9       	ldd	r23, Y+54	; 0x36
    18f8:	8f a9       	ldd	r24, Y+55	; 0x37
    18fa:	98 ad       	ldd	r25, Y+56	; 0x38
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	0f c0       	rjmp	.+30     	; 0x193c <LCD_sendCommand+0xd2>
    191e:	80 e9       	ldi	r24, 0x90	; 144
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	9e a7       	std	Y+46, r25	; 0x2e
    1924:	8d a7       	std	Y+45, r24	; 0x2d
    1926:	8d a5       	ldd	r24, Y+45	; 0x2d
    1928:	9e a5       	ldd	r25, Y+46	; 0x2e
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCD_sendCommand+0xc0>
    192e:	9e a7       	std	Y+46, r25	; 0x2e
    1930:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	8f a5       	ldd	r24, Y+47	; 0x2f
    1934:	98 a9       	ldd	r25, Y+48	; 0x30
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	98 ab       	std	Y+48, r25	; 0x30
    193a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	8f a5       	ldd	r24, Y+47	; 0x2f
    193e:	98 a9       	ldd	r25, Y+48	; 0x30
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <LCD_sendCommand+0xb4>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	69 a9       	ldd	r22, Y+49	; 0x31
    1948:	7a a9       	ldd	r23, Y+50	; 0x32
    194a:	8b a9       	ldd	r24, Y+51	; 0x33
    194c:	9c a9       	ldd	r25, Y+52	; 0x34
    194e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	98 ab       	std	Y+48, r25	; 0x30
    1958:	8f a7       	std	Y+47, r24	; 0x2f
    195a:	8f a5       	ldd	r24, Y+47	; 0x2f
    195c:	98 a9       	ldd	r25, Y+48	; 0x30
    195e:	9c a7       	std	Y+44, r25	; 0x2c
    1960:	8b a7       	std	Y+43, r24	; 0x2b
    1962:	8b a5       	ldd	r24, Y+43	; 0x2b
    1964:	9c a5       	ldd	r25, Y+44	; 0x2c
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_sendCommand+0xfc>
    196a:	9c a7       	std	Y+44, r25	; 0x2c
    196c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_HIGH);
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>
    1978:	80 e0       	ldi	r24, 0x00	; 0
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	a0 e8       	ldi	r26, 0x80	; 128
    197e:	bf e3       	ldi	r27, 0x3F	; 63
    1980:	8f a3       	std	Y+39, r24	; 0x27
    1982:	98 a7       	std	Y+40, r25	; 0x28
    1984:	a9 a7       	std	Y+41, r26	; 0x29
    1986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1988:	6f a1       	ldd	r22, Y+39	; 0x27
    198a:	78 a5       	ldd	r23, Y+40	; 0x28
    198c:	89 a5       	ldd	r24, Y+41	; 0x29
    198e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	4a e7       	ldi	r20, 0x7A	; 122
    1996:	55 e4       	ldi	r21, 0x45	; 69
    1998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8b a3       	std	Y+35, r24	; 0x23
    19a2:	9c a3       	std	Y+36, r25	; 0x24
    19a4:	ad a3       	std	Y+37, r26	; 0x25
    19a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19a8:	6b a1       	ldd	r22, Y+35	; 0x23
    19aa:	7c a1       	ldd	r23, Y+36	; 0x24
    19ac:	8d a1       	ldd	r24, Y+37	; 0x25
    19ae:	9e a1       	ldd	r25, Y+38	; 0x26
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e8       	ldi	r20, 0x80	; 128
    19b6:	5f e3       	ldi	r21, 0x3F	; 63
    19b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	2c f4       	brge	.+10     	; 0x19ca <LCD_sendCommand+0x160>
		__ticks = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
    19c8:	3f c0       	rjmp	.+126    	; 0x1a48 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    19ca:	6b a1       	ldd	r22, Y+35	; 0x23
    19cc:	7c a1       	ldd	r23, Y+36	; 0x24
    19ce:	8d a1       	ldd	r24, Y+37	; 0x25
    19d0:	9e a1       	ldd	r25, Y+38	; 0x26
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	3f ef       	ldi	r19, 0xFF	; 255
    19d6:	4f e7       	ldi	r20, 0x7F	; 127
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19de:	18 16       	cp	r1, r24
    19e0:	4c f5       	brge	.+82     	; 0x1a34 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e2:	6f a1       	ldd	r22, Y+39	; 0x27
    19e4:	78 a5       	ldd	r23, Y+40	; 0x28
    19e6:	89 a5       	ldd	r24, Y+41	; 0x29
    19e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9a a3       	std	Y+34, r25	; 0x22
    1a08:	89 a3       	std	Y+33, r24	; 0x21
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_sendCommand+0x1c0>
    1a0c:	80 e9       	ldi	r24, 0x90	; 144
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	98 a3       	std	Y+32, r25	; 0x20
    1a12:	8f 8f       	std	Y+31, r24	; 0x1f
    1a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a16:	98 a1       	ldd	r25, Y+32	; 0x20
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_sendCommand+0x1ae>
    1a1c:	98 a3       	std	Y+32, r25	; 0x20
    1a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	89 a1       	ldd	r24, Y+33	; 0x21
    1a22:	9a a1       	ldd	r25, Y+34	; 0x22
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9a a3       	std	Y+34, r25	; 0x22
    1a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_sendCommand+0x1a2>
    1a32:	14 c0       	rjmp	.+40     	; 0x1a5c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	6b a1       	ldd	r22, Y+35	; 0x23
    1a36:	7c a1       	ldd	r23, Y+36	; 0x24
    1a38:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9a a3       	std	Y+34, r25	; 0x22
    1a46:	89 a3       	std	Y+33, r24	; 0x21
    1a48:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_sendCommand+0x1ea>
    1a58:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT, command);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	69 ad       	ldd	r22, Y+57	; 0x39
    1a60:	0e 94 04 09 	call	0x1208	; 0x1208 <GPIO_writePort>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a0 e8       	ldi	r26, 0x80	; 128
    1a6a:	bf e3       	ldi	r27, 0x3F	; 63
    1a6c:	89 8f       	std	Y+25, r24	; 0x19
    1a6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a70:	ab 8f       	std	Y+27, r26	; 0x1b
    1a72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a74:	69 8d       	ldd	r22, Y+25	; 0x19
    1a76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a e7       	ldi	r20, 0x7A	; 122
    1a82:	55 e4       	ldi	r21, 0x45	; 69
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8d 8b       	std	Y+21, r24	; 0x15
    1a8e:	9e 8b       	std	Y+22, r25	; 0x16
    1a90:	af 8b       	std	Y+23, r26	; 0x17
    1a92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a94:	6d 89       	ldd	r22, Y+21	; 0x15
    1a96:	7e 89       	ldd	r23, Y+22	; 0x16
    1a98:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
    1ab4:	3f c0       	rjmp	.+126    	; 0x1b34 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	4c f5       	brge	.+82     	; 0x1b20 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ace:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e2       	ldi	r20, 0x20	; 32
    1adc:	51 e4       	ldi	r21, 0x41	; 65
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	9c 8b       	std	Y+20, r25	; 0x14
    1af4:	8b 8b       	std	Y+19, r24	; 0x13
    1af6:	0f c0       	rjmp	.+30     	; 0x1b16 <LCD_sendCommand+0x2ac>
    1af8:	80 e9       	ldi	r24, 0x90	; 144
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	9a 8b       	std	Y+18, r25	; 0x12
    1afe:	89 8b       	std	Y+17, r24	; 0x11
    1b00:	89 89       	ldd	r24, Y+17	; 0x11
    1b02:	9a 89       	ldd	r25, Y+18	; 0x12
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <LCD_sendCommand+0x29a>
    1b08:	9a 8b       	std	Y+18, r25	; 0x12
    1b0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	9c 8b       	std	Y+20, r25	; 0x14
    1b14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <LCD_sendCommand+0x28e>
    1b1e:	14 c0       	rjmp	.+40     	; 0x1b48 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b20:	6d 89       	ldd	r22, Y+21	; 0x15
    1b22:	7e 89       	ldd	r23, Y+22	; 0x16
    1b24:	8f 89       	ldd	r24, Y+23	; 0x17
    1b26:	98 8d       	ldd	r25, Y+24	; 0x18
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	8b 89       	ldd	r24, Y+19	; 0x13
    1b36:	9c 89       	ldd	r25, Y+20	; 0x14
    1b38:	98 8b       	std	Y+16, r25	; 0x10
    1b3a:	8f 87       	std	Y+15, r24	; 0x0f
    1b3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3e:	98 89       	ldd	r25, Y+16	; 0x10
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_sendCommand+0x2d6>
    1b44:	98 8b       	std	Y+16, r25	; 0x10
    1b46:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_4,GET_BIT(command,3));

#endif

	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_LOW);
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	a0 e8       	ldi	r26, 0x80	; 128
    1b58:	bf e3       	ldi	r27, 0x3F	; 63
    1b5a:	8b 87       	std	Y+11, r24	; 0x0b
    1b5c:	9c 87       	std	Y+12, r25	; 0x0c
    1b5e:	ad 87       	std	Y+13, r26	; 0x0d
    1b60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4a e7       	ldi	r20, 0x7A	; 122
    1b70:	55 e4       	ldi	r21, 0x45	; 69
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f 83       	std	Y+7, r24	; 0x07
    1b7c:	98 87       	std	Y+8, r25	; 0x08
    1b7e:	a9 87       	std	Y+9, r26	; 0x09
    1b80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	2c f4       	brge	.+10     	; 0x1ba4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	9e 83       	std	Y+6, r25	; 0x06
    1ba0:	8d 83       	std	Y+5, r24	; 0x05
    1ba2:	3f c0       	rjmp	.+126    	; 0x1c22 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	3f ef       	ldi	r19, 0xFF	; 255
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	57 e4       	ldi	r21, 0x47	; 71
    1bb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	4c f5       	brge	.+82     	; 0x1c0e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e2       	ldi	r20, 0x20	; 32
    1bca:	51 e4       	ldi	r21, 0x41	; 65
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	cd 01       	movw	r24, r26
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	0f c0       	rjmp	.+30     	; 0x1c04 <LCD_sendCommand+0x39a>
    1be6:	80 e9       	ldi	r24, 0x90	; 144
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	9c 83       	std	Y+4, r25	; 0x04
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_sendCommand+0x388>
    1bf6:	9c 83       	std	Y+4, r25	; 0x04
    1bf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	69 f7       	brne	.-38     	; 0x1be6 <LCD_sendCommand+0x37c>
    1c0c:	14 c0       	rjmp	.+40     	; 0x1c36 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c10:	78 85       	ldd	r23, Y+8	; 0x08
    1c12:	89 85       	ldd	r24, Y+9	; 0x09
    1c14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_sendCommand+0x3c4>
    1c32:	9a 83       	std	Y+2, r25	; 0x02
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1c36:	e9 96       	adiw	r28, 0x39	; 57
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <LCD_displayCharacter>:

/*Display character*/
void LCD_displayCharacter(uint8 character)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	e9 97       	sbiw	r28, 0x39	; 57
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(RS_PORT, RS_PIN, LOGIC_HIGH);
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e8       	ldi	r26, 0x80	; 128
    1c6e:	bf e3       	ldi	r27, 0x3F	; 63
    1c70:	8d ab       	std	Y+53, r24	; 0x35
    1c72:	9e ab       	std	Y+54, r25	; 0x36
    1c74:	af ab       	std	Y+55, r26	; 0x37
    1c76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6d a9       	ldd	r22, Y+53	; 0x35
    1c7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a e7       	ldi	r20, 0x7A	; 122
    1c86:	55 e4       	ldi	r21, 0x45	; 69
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	89 ab       	std	Y+49, r24	; 0x31
    1c92:	9a ab       	std	Y+50, r25	; 0x32
    1c94:	ab ab       	std	Y+51, r26	; 0x33
    1c96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c98:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_displayCharacter+0x72>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	98 ab       	std	Y+48, r25	; 0x30
    1cb6:	8f a7       	std	Y+47, r24	; 0x2f
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1cba:	69 a9       	ldd	r22, Y+49	; 0x31
    1cbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	98 ab       	std	Y+48, r25	; 0x30
    1cf8:	8f a7       	std	Y+47, r24	; 0x2f
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_displayCharacter+0xd2>
    1cfc:	80 e9       	ldi	r24, 0x90	; 144
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	9e a7       	std	Y+46, r25	; 0x2e
    1d02:	8d a7       	std	Y+45, r24	; 0x2d
    1d04:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d06:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_displayCharacter+0xc0>
    1d0c:	9e a7       	std	Y+46, r25	; 0x2e
    1d0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d12:	98 a9       	ldd	r25, Y+48	; 0x30
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	98 ab       	std	Y+48, r25	; 0x30
    1d18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_displayCharacter+0xb4>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	69 a9       	ldd	r22, Y+49	; 0x31
    1d26:	7a a9       	ldd	r23, Y+50	; 0x32
    1d28:	8b a9       	ldd	r24, Y+51	; 0x33
    1d2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	98 ab       	std	Y+48, r25	; 0x30
    1d36:	8f a7       	std	Y+47, r24	; 0x2f
    1d38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d3c:	9c a7       	std	Y+44, r25	; 0x2c
    1d3e:	8b a7       	std	Y+43, r24	; 0x2b
    1d40:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d42:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_displayCharacter+0xfc>
    1d48:	9c a7       	std	Y+44, r25	; 0x2c
    1d4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_HIGH);
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	61 e0       	ldi	r22, 0x01	; 1
    1d50:	41 e0       	ldi	r20, 0x01	; 1
    1d52:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	a0 e8       	ldi	r26, 0x80	; 128
    1d5c:	bf e3       	ldi	r27, 0x3F	; 63
    1d5e:	8f a3       	std	Y+39, r24	; 0x27
    1d60:	98 a7       	std	Y+40, r25	; 0x28
    1d62:	a9 a7       	std	Y+41, r26	; 0x29
    1d64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d66:	6f a1       	ldd	r22, Y+39	; 0x27
    1d68:	78 a5       	ldd	r23, Y+40	; 0x28
    1d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a e7       	ldi	r20, 0x7A	; 122
    1d74:	55 e4       	ldi	r21, 0x45	; 69
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8b a3       	std	Y+35, r24	; 0x23
    1d80:	9c a3       	std	Y+36, r25	; 0x24
    1d82:	ad a3       	std	Y+37, r26	; 0x25
    1d84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d86:	6b a1       	ldd	r22, Y+35	; 0x23
    1d88:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e8       	ldi	r20, 0x80	; 128
    1d94:	5f e3       	ldi	r21, 0x3F	; 63
    1d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d9a:	88 23       	and	r24, r24
    1d9c:	2c f4       	brge	.+10     	; 0x1da8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9a a3       	std	Y+34, r25	; 0x22
    1da4:	89 a3       	std	Y+33, r24	; 0x21
    1da6:	3f c0       	rjmp	.+126    	; 0x1e26 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1da8:	6b a1       	ldd	r22, Y+35	; 0x23
    1daa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	3f ef       	ldi	r19, 0xFF	; 255
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	57 e4       	ldi	r21, 0x47	; 71
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	4c f5       	brge	.+82     	; 0x1e12 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	51 e4       	ldi	r21, 0x41	; 65
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	bc 01       	movw	r22, r24
    1dda:	cd 01       	movw	r24, r26
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9a a3       	std	Y+34, r25	; 0x22
    1de6:	89 a3       	std	Y+33, r24	; 0x21
    1de8:	0f c0       	rjmp	.+30     	; 0x1e08 <LCD_displayCharacter+0x1c0>
    1dea:	80 e9       	ldi	r24, 0x90	; 144
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	98 a3       	std	Y+32, r25	; 0x20
    1df0:	8f 8f       	std	Y+31, r24	; 0x1f
    1df2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df4:	98 a1       	ldd	r25, Y+32	; 0x20
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCD_displayCharacter+0x1ae>
    1dfa:	98 a3       	std	Y+32, r25	; 0x20
    1dfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1e00:	9a a1       	ldd	r25, Y+34	; 0x22
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	9a a3       	std	Y+34, r25	; 0x22
    1e06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <LCD_displayCharacter+0x1a2>
    1e10:	14 c0       	rjmp	.+40     	; 0x1e3a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e12:	6b a1       	ldd	r22, Y+35	; 0x23
    1e14:	7c a1       	ldd	r23, Y+36	; 0x24
    1e16:	8d a1       	ldd	r24, Y+37	; 0x25
    1e18:	9e a1       	ldd	r25, Y+38	; 0x26
    1e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	9a a3       	std	Y+34, r25	; 0x22
    1e24:	89 a3       	std	Y+33, r24	; 0x21
    1e26:	89 a1       	ldd	r24, Y+33	; 0x21
    1e28:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1e2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_displayCharacter+0x1ea>
    1e36:	9e 8f       	std	Y+30, r25	; 0x1e
    1e38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT, character);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	69 ad       	ldd	r22, Y+57	; 0x39
    1e3e:	0e 94 04 09 	call	0x1208	; 0x1208 <GPIO_writePort>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	89 8f       	std	Y+25, r24	; 0x19
    1e4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e52:	69 8d       	ldd	r22, Y+25	; 0x19
    1e54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	55 e4       	ldi	r21, 0x45	; 69
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	8d 8b       	std	Y+21, r24	; 0x15
    1e6c:	9e 8b       	std	Y+22, r25	; 0x16
    1e6e:	af 8b       	std	Y+23, r26	; 0x17
    1e70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e72:	6d 89       	ldd	r22, Y+21	; 0x15
    1e74:	7e 89       	ldd	r23, Y+22	; 0x16
    1e76:	8f 89       	ldd	r24, Y+23	; 0x17
    1e78:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9c 8b       	std	Y+20, r25	; 0x14
    1e90:	8b 8b       	std	Y+19, r24	; 0x13
    1e92:	3f c0       	rjmp	.+126    	; 0x1f12 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	57 e4       	ldi	r21, 0x47	; 71
    1ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	4c f5       	brge	.+82     	; 0x1efe <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	69 8d       	ldd	r22, Y+25	; 0x19
    1eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9c 8b       	std	Y+20, r25	; 0x14
    1ed2:	8b 8b       	std	Y+19, r24	; 0x13
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <LCD_displayCharacter+0x2ac>
    1ed6:	80 e9       	ldi	r24, 0x90	; 144
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	9a 8b       	std	Y+18, r25	; 0x12
    1edc:	89 8b       	std	Y+17, r24	; 0x11
    1ede:	89 89       	ldd	r24, Y+17	; 0x11
    1ee0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_displayCharacter+0x29a>
    1ee6:	9a 8b       	std	Y+18, r25	; 0x12
    1ee8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eea:	8b 89       	ldd	r24, Y+19	; 0x13
    1eec:	9c 89       	ldd	r25, Y+20	; 0x14
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <LCD_displayCharacter+0x28e>
    1efc:	14 c0       	rjmp	.+40     	; 0x1f26 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	6d 89       	ldd	r22, Y+21	; 0x15
    1f00:	7e 89       	ldd	r23, Y+22	; 0x16
    1f02:	8f 89       	ldd	r24, Y+23	; 0x17
    1f04:	98 8d       	ldd	r25, Y+24	; 0x18
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9c 8b       	std	Y+20, r25	; 0x14
    1f10:	8b 8b       	std	Y+19, r24	; 0x13
    1f12:	8b 89       	ldd	r24, Y+19	; 0x13
    1f14:	9c 89       	ldd	r25, Y+20	; 0x14
    1f16:	98 8b       	std	Y+16, r25	; 0x10
    1f18:	8f 87       	std	Y+15, r24	; 0x0f
    1f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1c:	98 89       	ldd	r25, Y+16	; 0x10
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_displayCharacter+0x2d6>
    1f22:	98 8b       	std	Y+16, r25	; 0x10
    1f24:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_4,GET_BIT(character,3));

#endif

	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_LOW);
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	61 e0       	ldi	r22, 0x01	; 1
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 3b 07 	call	0xe76	; 0xe76 <GPIO_writePin>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e8       	ldi	r26, 0x80	; 128
    1f36:	bf e3       	ldi	r27, 0x3F	; 63
    1f38:	8b 87       	std	Y+11, r24	; 0x0b
    1f3a:	9c 87       	std	Y+12, r25	; 0x0c
    1f3c:	ad 87       	std	Y+13, r26	; 0x0d
    1f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	55 e4       	ldi	r21, 0x45	; 69
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8f 83       	std	Y+7, r24	; 0x07
    1f5a:	98 87       	std	Y+8, r25	; 0x08
    1f5c:	a9 87       	std	Y+9, r26	; 0x09
    1f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e 83       	std	Y+6, r25	; 0x06
    1f7e:	8d 83       	std	Y+5, r24	; 0x05
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <LCD_displayCharacter+0x39a>
    1fc4:	80 e9       	ldi	r24, 0x90	; 144
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_displayCharacter+0x388>
    1fd4:	9c 83       	std	Y+4, r25	; 0x04
    1fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <LCD_displayCharacter+0x37c>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	6f 81       	ldd	r22, Y+7	; 0x07
    1fee:	78 85       	ldd	r23, Y+8	; 0x08
    1ff0:	89 85       	ldd	r24, Y+9	; 0x09
    1ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_displayCharacter+0x3c4>
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2014:	e9 96       	adiw	r28, 0x39	; 57
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <LCD_displayString>:

/*Display string*/
void LCD_displayString(const uint8* str)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <LCD_displayString+0x6>
    202c:	0f 92       	push	r0
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	9b 83       	std	Y+3, r25	; 0x03
    2034:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2036:	19 82       	std	Y+1, r1	; 0x01
    2038:	0e c0       	rjmp	.+28     	; 0x2056 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	fc 01       	movw	r30, r24
    2046:	e2 0f       	add	r30, r18
    2048:	f3 1f       	adc	r31, r19
    204a:	80 81       	ld	r24, Z
    204c:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_displayCharacter>
		i++;
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	89 83       	std	Y+1, r24	; 0x01

/*Display string*/
void LCD_displayString(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	80 81       	ld	r24, Z
    2068:	88 23       	and	r24, r24
    206a:	39 f7       	brne	.-50     	; 0x203a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <LCD_moveCursor>:

/*Change cursor position*/
void LCD_moveCursor(uint8 row,uint8 col)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <LCD_moveCursor+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <LCD_moveCursor+0x8>
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	8a 83       	std	Y+2, r24	; 0x02
    2088:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3d 83       	std	Y+5, r19	; 0x05
    2092:	2c 83       	std	Y+4, r18	; 0x04
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	9d 81       	ldd	r25, Y+5	; 0x05
    2098:	81 30       	cpi	r24, 0x01	; 1
    209a:	91 05       	cpc	r25, r1
    209c:	c1 f0       	breq	.+48     	; 0x20ce <LCD_moveCursor+0x56>
    209e:	2c 81       	ldd	r18, Y+4	; 0x04
    20a0:	3d 81       	ldd	r19, Y+5	; 0x05
    20a2:	22 30       	cpi	r18, 0x02	; 2
    20a4:	31 05       	cpc	r19, r1
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <LCD_moveCursor+0x3a>
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <LCD_moveCursor+0x50>
    20b0:	19 c0       	rjmp	.+50     	; 0x20e4 <LCD_moveCursor+0x6c>
    20b2:	2c 81       	ldd	r18, Y+4	; 0x04
    20b4:	3d 81       	ldd	r19, Y+5	; 0x05
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	69 f0       	breq	.+26     	; 0x20d6 <LCD_moveCursor+0x5e>
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	9d 81       	ldd	r25, Y+5	; 0x05
    20c0:	83 30       	cpi	r24, 0x03	; 3
    20c2:	91 05       	cpc	r25, r1
    20c4:	61 f0       	breq	.+24     	; 0x20de <LCD_moveCursor+0x66>
    20c6:	0e c0       	rjmp	.+28     	; 0x20e4 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	0b c0       	rjmp	.+22     	; 0x20e4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	80 5c       	subi	r24, 0xC0	; 192
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	07 c0       	rjmp	.+14     	; 0x20e4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	80 5f       	subi	r24, 0xF0	; 240
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	80 5b       	subi	r24, 0xB0	; 176
    20e2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	80 68       	ori	r24, 0x80	; 128
    20e8:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_sendCommand>
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <LCD_intgerToString>:

/*Integer display*/
void LCD_intgerToString(int data)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	62 97       	sbiw	r28, 0x12	; 18
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	9a 8b       	std	Y+18, r25	; 0x12
    2112:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2114:	89 89       	ldd	r24, Y+17	; 0x11
    2116:	9a 89       	ldd	r25, Y+18	; 0x12
    2118:	9e 01       	movw	r18, r28
    211a:	2f 5f       	subi	r18, 0xFF	; 255
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	b9 01       	movw	r22, r18
    2120:	4a e0       	ldi	r20, 0x0A	; 10
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2128:	ce 01       	movw	r24, r28
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
}
    2130:	62 96       	adiw	r28, 0x12	; 18
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <LCD_floatToString>:

 /*Float display*/
void LCD_floatToString(float32 data)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	64 97       	sbiw	r28, 0x14	; 20
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	69 8b       	std	Y+17, r22	; 0x11
    2158:	7a 8b       	std	Y+18, r23	; 0x12
    215a:	8b 8b       	std	Y+19, r24	; 0x13
    215c:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16]; /* String to hold the ascii result */
	itoa((int)data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    215e:	69 89       	ldd	r22, Y+17	; 0x11
    2160:	7a 89       	ldd	r23, Y+18	; 0x12
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 01       	movw	r18, r28
    2170:	2f 5f       	subi	r18, 0xFF	; 255
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	b9 01       	movw	r22, r18
    2176:	4a e0       	ldi	r20, 0x0A	; 10
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <itoa>
	LCD_displayString(buff);
    217e:	ce 01       	movw	r24, r28
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
	LCD_displayCharacter('.');
    2186:	8e e2       	ldi	r24, 0x2E	; 46
    2188:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_displayCharacter>
	data -= (int)data;
    218c:	69 89       	ldd	r22, Y+17	; 0x11
    218e:	7a 89       	ldd	r23, Y+18	; 0x12
    2190:	8b 89       	ldd	r24, Y+19	; 0x13
    2192:	9c 89       	ldd	r25, Y+20	; 0x14
    2194:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	aa 27       	eor	r26, r26
    219e:	97 fd       	sbrc	r25, 7
    21a0:	a0 95       	com	r26
    21a2:	ba 2f       	mov	r27, r26
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    21ac:	9b 01       	movw	r18, r22
    21ae:	ac 01       	movw	r20, r24
    21b0:	69 89       	ldd	r22, Y+17	; 0x11
    21b2:	7a 89       	ldd	r23, Y+18	; 0x12
    21b4:	8b 89       	ldd	r24, Y+19	; 0x13
    21b6:	9c 89       	ldd	r25, Y+20	; 0x14
    21b8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	89 8b       	std	Y+17, r24	; 0x11
    21c2:	9a 8b       	std	Y+18, r25	; 0x12
    21c4:	ab 8b       	std	Y+19, r26	; 0x13
    21c6:	bc 8b       	std	Y+20, r27	; 0x14
	data*=1000;
    21c8:	69 89       	ldd	r22, Y+17	; 0x11
    21ca:	7a 89       	ldd	r23, Y+18	; 0x12
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	54 e4       	ldi	r21, 0x44	; 68
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	89 8b       	std	Y+17, r24	; 0x11
    21e2:	9a 8b       	std	Y+18, r25	; 0x12
    21e4:	ab 8b       	std	Y+19, r26	; 0x13
    21e6:	bc 8b       	std	Y+20, r27	; 0x14
	itoa((int)data,buff,10);
    21e8:	69 89       	ldd	r22, Y+17	; 0x11
    21ea:	7a 89       	ldd	r23, Y+18	; 0x12
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9e 01       	movw	r18, r28
    21fa:	2f 5f       	subi	r18, 0xFF	; 255
    21fc:	3f 4f       	sbci	r19, 0xFF	; 255
    21fe:	b9 01       	movw	r22, r18
    2200:	4a e0       	ldi	r20, 0x0A	; 10
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <itoa>
	LCD_displayString(buff);
    2208:	ce 01       	movw	r24, r28
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>

}
    2210:	64 96       	adiw	r28, 0x14	; 20
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <LCD_clearScreen>:

/*Clear screen*/
void LCD_clearScreen(void)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	0e 94 35 0c 	call	0x186a	; 0x186a <LCD_sendCommand>
}
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <main>:


#define PASSWORD_SIZE 5

int main(void)
{
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	c6 59       	subi	r28, 0x96	; 150
    2244:	d0 40       	sbci	r29, 0x00	; 0
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);
    2250:	af e5       	ldi	r26, 0x5F	; 95
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ef e5       	ldi	r30, 0x5F	; 95
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 68       	ori	r24, 0x80	; 128
    225c:	8c 93       	st	X, r24

	uint8 system_case = 0;
    225e:	fe 01       	movw	r30, r28
    2260:	ea 58       	subi	r30, 0x8A	; 138
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	10 82       	st	Z, r1
	uint8 i = 0;
    2266:	fe 01       	movw	r30, r28
    2268:	eb 58       	subi	r30, 0x8B	; 139
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	10 82       	st	Z, r1
	uint8 new_password[6];
	uint8 saved_password[6];
	uint8 entered_password[6];
	uint8 choice = 0;
    226e:	fe 01       	movw	r30, r28
    2270:	ec 58       	subi	r30, 0x8C	; 140
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	10 82       	st	Z, r1
	uint8 check_flag = 0;
    2276:	fe 01       	movw	r30, r28
    2278:	ed 58       	subi	r30, 0x8D	; 141
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	10 82       	st	Z, r1
	uint8 enter_key = ' ';
    227e:	fe 01       	movw	r30, r28
    2280:	ee 58       	subi	r30, 0x8E	; 142
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 e2       	ldi	r24, 0x20	; 32
    2286:	80 83       	st	Z, r24
	uint8 unmatch_num = 0;
    2288:	fe 01       	movw	r30, r28
    228a:	ef 58       	subi	r30, 0x8F	; 143
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	10 82       	st	Z, r1
	UART_ConfigType uart_conf_hmi = {
			CharacterSize_8bit,
			DisabledParity,
			STOPBIT_1bit,
			9600
	};
    2290:	ce 01       	movw	r24, r28
    2292:	87 57       	subi	r24, 0x77	; 119
    2294:	9f 4f       	sbci	r25, 0xFF	; 255
    2296:	ce 56       	subi	r28, 0x6E	; 110
    2298:	df 4f       	sbci	r29, 0xFF	; 255
    229a:	99 83       	std	Y+1, r25	; 0x01
    229c:	88 83       	st	Y, r24
    229e:	c2 59       	subi	r28, 0x92	; 146
    22a0:	d0 40       	sbci	r29, 0x00	; 0
    22a2:	2e ee       	ldi	r18, 0xEE	; 238
    22a4:	31 e0       	ldi	r19, 0x01	; 1
    22a6:	cc 56       	subi	r28, 0x6C	; 108
    22a8:	df 4f       	sbci	r29, 0xFF	; 255
    22aa:	39 83       	std	Y+1, r19	; 0x01
    22ac:	28 83       	st	Y, r18
    22ae:	c4 59       	subi	r28, 0x94	; 148
    22b0:	d0 40       	sbci	r29, 0x00	; 0
    22b2:	37 e0       	ldi	r19, 0x07	; 7
    22b4:	ca 56       	subi	r28, 0x6A	; 106
    22b6:	df 4f       	sbci	r29, 0xFF	; 255
    22b8:	38 83       	st	Y, r19
    22ba:	c6 59       	subi	r28, 0x96	; 150
    22bc:	d0 40       	sbci	r29, 0x00	; 0
    22be:	cc 56       	subi	r28, 0x6C	; 108
    22c0:	df 4f       	sbci	r29, 0xFF	; 255
    22c2:	e8 81       	ld	r30, Y
    22c4:	f9 81       	ldd	r31, Y+1	; 0x01
    22c6:	c4 59       	subi	r28, 0x94	; 148
    22c8:	d0 40       	sbci	r29, 0x00	; 0
    22ca:	00 80       	ld	r0, Z
    22cc:	cc 56       	subi	r28, 0x6C	; 108
    22ce:	df 4f       	sbci	r29, 0xFF	; 255
    22d0:	28 81       	ld	r18, Y
    22d2:	39 81       	ldd	r19, Y+1	; 0x01
    22d4:	c4 59       	subi	r28, 0x94	; 148
    22d6:	d0 40       	sbci	r29, 0x00	; 0
    22d8:	2f 5f       	subi	r18, 0xFF	; 255
    22da:	3f 4f       	sbci	r19, 0xFF	; 255
    22dc:	cc 56       	subi	r28, 0x6C	; 108
    22de:	df 4f       	sbci	r29, 0xFF	; 255
    22e0:	39 83       	std	Y+1, r19	; 0x01
    22e2:	28 83       	st	Y, r18
    22e4:	c4 59       	subi	r28, 0x94	; 148
    22e6:	d0 40       	sbci	r29, 0x00	; 0
    22e8:	ce 56       	subi	r28, 0x6E	; 110
    22ea:	df 4f       	sbci	r29, 0xFF	; 255
    22ec:	e8 81       	ld	r30, Y
    22ee:	f9 81       	ldd	r31, Y+1	; 0x01
    22f0:	c2 59       	subi	r28, 0x92	; 146
    22f2:	d0 40       	sbci	r29, 0x00	; 0
    22f4:	00 82       	st	Z, r0
    22f6:	ce 56       	subi	r28, 0x6E	; 110
    22f8:	df 4f       	sbci	r29, 0xFF	; 255
    22fa:	28 81       	ld	r18, Y
    22fc:	39 81       	ldd	r19, Y+1	; 0x01
    22fe:	c2 59       	subi	r28, 0x92	; 146
    2300:	d0 40       	sbci	r29, 0x00	; 0
    2302:	2f 5f       	subi	r18, 0xFF	; 255
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	ce 56       	subi	r28, 0x6E	; 110
    2308:	df 4f       	sbci	r29, 0xFF	; 255
    230a:	39 83       	std	Y+1, r19	; 0x01
    230c:	28 83       	st	Y, r18
    230e:	c2 59       	subi	r28, 0x92	; 146
    2310:	d0 40       	sbci	r29, 0x00	; 0
    2312:	ca 56       	subi	r28, 0x6A	; 106
    2314:	df 4f       	sbci	r29, 0xFF	; 255
    2316:	38 81       	ld	r19, Y
    2318:	c6 59       	subi	r28, 0x96	; 150
    231a:	d0 40       	sbci	r29, 0x00	; 0
    231c:	31 50       	subi	r19, 0x01	; 1
    231e:	ca 56       	subi	r28, 0x6A	; 106
    2320:	df 4f       	sbci	r29, 0xFF	; 255
    2322:	38 83       	st	Y, r19
    2324:	c6 59       	subi	r28, 0x96	; 150
    2326:	d0 40       	sbci	r29, 0x00	; 0
    2328:	ca 56       	subi	r28, 0x6A	; 106
    232a:	df 4f       	sbci	r29, 0xFF	; 255
    232c:	88 81       	ld	r24, Y
    232e:	c6 59       	subi	r28, 0x96	; 150
    2330:	d0 40       	sbci	r29, 0x00	; 0
    2332:	88 23       	and	r24, r24
    2334:	21 f6       	brne	.-120    	; 0x22be <main+0x88>
	UART_init(&uart_conf_hmi);
    2336:	ce 01       	movw	r24, r28
    2338:	87 57       	subi	r24, 0x77	; 119
    233a:	9f 4f       	sbci	r25, 0xFF	; 255
    233c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <UART_init>

	/*devices initialization*/
	LCD_init();
    2340:	0e 94 99 0b 	call	0x1732	; 0x1732 <LCD_init>
	LCD_moveCursor(0,0);
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>


	while(1)
	{
		switch(system_case)
    234c:	fe 01       	movw	r30, r28
    234e:	ea 58       	subi	r30, 0x8A	; 138
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	e8 2f       	mov	r30, r24
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	c0 57       	subi	r28, 0x70	; 112
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	f9 83       	std	Y+1, r31	; 0x01
    235e:	e8 83       	st	Y, r30
    2360:	c0 59       	subi	r28, 0x90	; 144
    2362:	d0 40       	sbci	r29, 0x00	; 0
    2364:	c0 57       	subi	r28, 0x70	; 112
    2366:	df 4f       	sbci	r29, 0xFF	; 255
    2368:	28 81       	ld	r18, Y
    236a:	39 81       	ldd	r19, Y+1	; 0x01
    236c:	c0 59       	subi	r28, 0x90	; 144
    236e:	d0 40       	sbci	r29, 0x00	; 0
    2370:	22 30       	cpi	r18, 0x02	; 2
    2372:	31 05       	cpc	r19, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <main+0x142>
    2376:	14 c3       	rjmp	.+1576   	; 0x29a0 <main+0x76a>
    2378:	c0 57       	subi	r28, 0x70	; 112
    237a:	df 4f       	sbci	r29, 0xFF	; 255
    237c:	88 81       	ld	r24, Y
    237e:	99 81       	ldd	r25, Y+1	; 0x01
    2380:	c0 59       	subi	r28, 0x90	; 144
    2382:	d0 40       	sbci	r29, 0x00	; 0
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	91 05       	cpc	r25, r1
    2388:	9c f4       	brge	.+38     	; 0x23b0 <main+0x17a>
    238a:	c0 57       	subi	r28, 0x70	; 112
    238c:	df 4f       	sbci	r29, 0xFF	; 255
    238e:	e8 81       	ld	r30, Y
    2390:	f9 81       	ldd	r31, Y+1	; 0x01
    2392:	c0 59       	subi	r28, 0x90	; 144
    2394:	d0 40       	sbci	r29, 0x00	; 0
    2396:	30 97       	sbiw	r30, 0x00	; 0
    2398:	01 f1       	breq	.+64     	; 0x23da <main+0x1a4>
    239a:	c0 57       	subi	r28, 0x70	; 112
    239c:	df 4f       	sbci	r29, 0xFF	; 255
    239e:	28 81       	ld	r18, Y
    23a0:	39 81       	ldd	r19, Y+1	; 0x01
    23a2:	c0 59       	subi	r28, 0x90	; 144
    23a4:	d0 40       	sbci	r29, 0x00	; 0
    23a6:	21 30       	cpi	r18, 0x01	; 1
    23a8:	31 05       	cpc	r19, r1
    23aa:	09 f4       	brne	.+2      	; 0x23ae <main+0x178>
    23ac:	c8 c2       	rjmp	.+1424   	; 0x293e <main+0x708>
    23ae:	ce cf       	rjmp	.-100    	; 0x234c <main+0x116>
    23b0:	c0 57       	subi	r28, 0x70	; 112
    23b2:	df 4f       	sbci	r29, 0xFF	; 255
    23b4:	88 81       	ld	r24, Y
    23b6:	99 81       	ldd	r25, Y+1	; 0x01
    23b8:	c0 59       	subi	r28, 0x90	; 144
    23ba:	d0 40       	sbci	r29, 0x00	; 0
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <main+0x18e>
    23c2:	4b c5       	rjmp	.+2710   	; 0x2e5a <main+0xc24>
    23c4:	c0 57       	subi	r28, 0x70	; 112
    23c6:	df 4f       	sbci	r29, 0xFF	; 255
    23c8:	e8 81       	ld	r30, Y
    23ca:	f9 81       	ldd	r31, Y+1	; 0x01
    23cc:	c0 59       	subi	r28, 0x90	; 144
    23ce:	d0 40       	sbci	r29, 0x00	; 0
    23d0:	e4 30       	cpi	r30, 0x04	; 4
    23d2:	f1 05       	cpc	r31, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <main+0x1a2>
    23d6:	1d c4       	rjmp	.+2106   	; 0x2c12 <main+0x9dc>
    23d8:	b9 cf       	rjmp	.-142    	; 0x234c <main+0x116>
		{
		case NEW_PASSWORD_ENTER:
			LCD_clearScreen();
    23da:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    23de:	80 e6       	ldi	r24, 0x60	; 96
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
			LCD_moveCursor(1,0);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	60 e0       	ldi	r22, 0x00	; 0
    23ea:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>

			for(i = 0; i<PASSWORD_SIZE; i++)
    23ee:	fe 01       	movw	r30, r28
    23f0:	eb 58       	subi	r30, 0x8B	; 139
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	10 82       	st	Z, r1
    23f6:	cf c0       	rjmp	.+414    	; 0x2596 <main+0x360>
			{
				new_password[i] = KEYPAD_getPressedKey();
    23f8:	fe 01       	movw	r30, r28
    23fa:	eb 58       	subi	r30, 0x8B	; 139
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	08 2f       	mov	r16, r24
    2402:	10 e0       	ldi	r17, 0x00	; 0
    2404:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    2408:	28 2f       	mov	r18, r24
    240a:	ce 01       	movw	r24, r28
    240c:	89 58       	subi	r24, 0x89	; 137
    240e:	9f 4f       	sbci	r25, 0xFF	; 255
    2410:	fc 01       	movw	r30, r24
    2412:	e0 0f       	add	r30, r16
    2414:	f1 1f       	adc	r31, r17
    2416:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2418:	8a e2       	ldi	r24, 0x2A	; 42
    241a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_displayCharacter>
    241e:	fe 01       	movw	r30, r28
    2420:	e3 59       	subi	r30, 0x93	; 147
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a8 e4       	ldi	r26, 0x48	; 72
    242a:	b2 e4       	ldi	r27, 0x42	; 66
    242c:	80 83       	st	Z, r24
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	a2 83       	std	Z+2, r26	; 0x02
    2432:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	8e 01       	movw	r16, r28
    2436:	07 59       	subi	r16, 0x97	; 151
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	e3 59       	subi	r30, 0x93	; 147
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	55 e4       	ldi	r21, 0x45	; 69
    2450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	f8 01       	movw	r30, r16
    245a:	80 83       	st	Z, r24
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	a2 83       	std	Z+2, r26	; 0x02
    2460:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2462:	fe 01       	movw	r30, r28
    2464:	e7 59       	subi	r30, 0x97	; 151
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	44 f4       	brge	.+16     	; 0x2490 <main+0x25a>
		__ticks = 1;
    2480:	fe 01       	movw	r30, r28
    2482:	e9 59       	subi	r30, 0x99	; 153
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24
    248e:	64 c0       	rjmp	.+200    	; 0x2558 <main+0x322>
	else if (__tmp > 65535)
    2490:	fe 01       	movw	r30, r28
    2492:	e7 59       	subi	r30, 0x97	; 151
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	60 81       	ld	r22, Z
    2498:	71 81       	ldd	r23, Z+1	; 0x01
    249a:	82 81       	ldd	r24, Z+2	; 0x02
    249c:	93 81       	ldd	r25, Z+3	; 0x03
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	3f ef       	ldi	r19, 0xFF	; 255
    24a2:	4f e7       	ldi	r20, 0x7F	; 127
    24a4:	57 e4       	ldi	r21, 0x47	; 71
    24a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	0c f0       	brlt	.+2      	; 0x24b0 <main+0x27a>
    24ae:	43 c0       	rjmp	.+134    	; 0x2536 <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b0:	fe 01       	movw	r30, r28
    24b2:	e3 59       	subi	r30, 0x93	; 147
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	60 81       	ld	r22, Z
    24b8:	71 81       	ldd	r23, Z+1	; 0x01
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	93 81       	ldd	r25, Z+3	; 0x03
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8e 01       	movw	r16, r28
    24d0:	09 59       	subi	r16, 0x99	; 153
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	f8 01       	movw	r30, r16
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    24e6:	1f c0       	rjmp	.+62     	; 0x2526 <main+0x2f0>
    24e8:	fe 01       	movw	r30, r28
    24ea:	eb 59       	subi	r30, 0x9B	; 155
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 e9       	ldi	r24, 0x90	; 144
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	91 83       	std	Z+1, r25	; 0x01
    24f4:	80 83       	st	Z, r24
    24f6:	fe 01       	movw	r30, r28
    24f8:	eb 59       	subi	r30, 0x9B	; 155
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <main+0x2ca>
    2504:	fe 01       	movw	r30, r28
    2506:	eb 59       	subi	r30, 0x9B	; 155
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	de 01       	movw	r26, r28
    2510:	a9 59       	subi	r26, 0x99	; 153
    2512:	bf 4f       	sbci	r27, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e9 59       	subi	r30, 0x99	; 153
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	11 96       	adiw	r26, 0x01	; 1
    2522:	9c 93       	st	X, r25
    2524:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	fe 01       	movw	r30, r28
    2528:	e9 59       	subi	r30, 0x99	; 153
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	d1 f6       	brne	.-76     	; 0x24e8 <main+0x2b2>
    2534:	27 c0       	rjmp	.+78     	; 0x2584 <main+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	8e 01       	movw	r16, r28
    2538:	09 59       	subi	r16, 0x99	; 153
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	fe 01       	movw	r30, r28
    253e:	e7 59       	subi	r30, 0x97	; 151
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	de 01       	movw	r26, r28
    255a:	ad 59       	subi	r26, 0x9D	; 157
    255c:	bf 4f       	sbci	r27, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e9 59       	subi	r30, 0x99	; 153
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	8d 93       	st	X+, r24
    256a:	9c 93       	st	X, r25
    256c:	fe 01       	movw	r30, r28
    256e:	ed 59       	subi	r30, 0x9D	; 157
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <main+0x340>
    257a:	fe 01       	movw	r30, r28
    257c:	ed 59       	subi	r30, 0x9D	; 157
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
		case NEW_PASSWORD_ENTER:
			LCD_clearScreen();
			LCD_displayString("Plz enter pass:");
			LCD_moveCursor(1,0);

			for(i = 0; i<PASSWORD_SIZE; i++)
    2584:	de 01       	movw	r26, r28
    2586:	ab 58       	subi	r26, 0x8B	; 139
    2588:	bf 4f       	sbci	r27, 0xFF	; 255
    258a:	fe 01       	movw	r30, r28
    258c:	eb 58       	subi	r30, 0x8B	; 139
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 81       	ld	r24, Z
    2592:	8f 5f       	subi	r24, 0xFF	; 255
    2594:	8c 93       	st	X, r24
    2596:	fe 01       	movw	r30, r28
    2598:	eb 58       	subi	r30, 0x8B	; 139
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	85 30       	cpi	r24, 0x05	; 5
    25a0:	08 f4       	brcc	.+2      	; 0x25a4 <main+0x36e>
    25a2:	2a cf       	rjmp	.-428    	; 0x23f8 <main+0x1c2>
				new_password[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(50);
			}

			while(KEYPAD_getPressedKey() != enter_key);
    25a4:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    25a8:	fe 01       	movw	r30, r28
    25aa:	ee 58       	subi	r30, 0x8E	; 142
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	90 81       	ld	r25, Z
    25b0:	89 17       	cp	r24, r25
    25b2:	c1 f7       	brne	.-16     	; 0x25a4 <main+0x36e>

			LCD_moveCursor(1,0);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Same pass:");
    25bc:	80 e7       	ldi	r24, 0x70	; 112
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>

			LCD_moveCursor(1,11);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	6b e0       	ldi	r22, 0x0B	; 11
    25c8:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			for(i = 0; i<PASSWORD_SIZE; i++)
    25cc:	fe 01       	movw	r30, r28
    25ce:	eb 58       	subi	r30, 0x8B	; 139
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	10 82       	st	Z, r1
    25d4:	cf c0       	rjmp	.+414    	; 0x2774 <main+0x53e>
			{
				new_password[i] = KEYPAD_getPressedKey();
    25d6:	fe 01       	movw	r30, r28
    25d8:	eb 58       	subi	r30, 0x8B	; 139
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	08 2f       	mov	r16, r24
    25e0:	10 e0       	ldi	r17, 0x00	; 0
    25e2:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    25e6:	28 2f       	mov	r18, r24
    25e8:	ce 01       	movw	r24, r28
    25ea:	89 58       	subi	r24, 0x89	; 137
    25ec:	9f 4f       	sbci	r25, 0xFF	; 255
    25ee:	fc 01       	movw	r30, r24
    25f0:	e0 0f       	add	r30, r16
    25f2:	f1 1f       	adc	r31, r17
    25f4:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    25f6:	8a e2       	ldi	r24, 0x2A	; 42
    25f8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_displayCharacter>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e1 5a       	subi	r30, 0xA1	; 161
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a8 e4       	ldi	r26, 0x48	; 72
    2608:	b2 e4       	ldi	r27, 0x42	; 66
    260a:	80 83       	st	Z, r24
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	a2 83       	std	Z+2, r26	; 0x02
    2610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	8e 01       	movw	r16, r28
    2614:	05 5a       	subi	r16, 0xA5	; 165
    2616:	1f 4f       	sbci	r17, 0xFF	; 255
    2618:	fe 01       	movw	r30, r28
    261a:	e1 5a       	subi	r30, 0xA1	; 161
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a e7       	ldi	r20, 0x7A	; 122
    262c:	55 e4       	ldi	r21, 0x45	; 69
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	f8 01       	movw	r30, r16
    2638:	80 83       	st	Z, r24
    263a:	91 83       	std	Z+1, r25	; 0x01
    263c:	a2 83       	std	Z+2, r26	; 0x02
    263e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2640:	fe 01       	movw	r30, r28
    2642:	e5 5a       	subi	r30, 0xA5	; 165
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	60 81       	ld	r22, Z
    2648:	71 81       	ldd	r23, Z+1	; 0x01
    264a:	82 81       	ldd	r24, Z+2	; 0x02
    264c:	93 81       	ldd	r25, Z+3	; 0x03
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	44 f4       	brge	.+16     	; 0x266e <main+0x438>
		__ticks = 1;
    265e:	fe 01       	movw	r30, r28
    2660:	e7 5a       	subi	r30, 0xA7	; 167
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
    266c:	64 c0       	rjmp	.+200    	; 0x2736 <main+0x500>
	else if (__tmp > 65535)
    266e:	fe 01       	movw	r30, r28
    2670:	e5 5a       	subi	r30, 0xA5	; 165
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	60 81       	ld	r22, Z
    2676:	71 81       	ldd	r23, Z+1	; 0x01
    2678:	82 81       	ldd	r24, Z+2	; 0x02
    267a:	93 81       	ldd	r25, Z+3	; 0x03
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	3f ef       	ldi	r19, 0xFF	; 255
    2680:	4f e7       	ldi	r20, 0x7F	; 127
    2682:	57 e4       	ldi	r21, 0x47	; 71
    2684:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2688:	18 16       	cp	r1, r24
    268a:	0c f0       	brlt	.+2      	; 0x268e <main+0x458>
    268c:	43 c0       	rjmp	.+134    	; 0x2714 <main+0x4de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	fe 01       	movw	r30, r28
    2690:	e1 5a       	subi	r30, 0xA1	; 161
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	60 81       	ld	r22, Z
    2696:	71 81       	ldd	r23, Z+1	; 0x01
    2698:	82 81       	ldd	r24, Z+2	; 0x02
    269a:	93 81       	ldd	r25, Z+3	; 0x03
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	8e 01       	movw	r16, r28
    26ae:	07 5a       	subi	r16, 0xA7	; 167
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	f8 01       	movw	r30, r16
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	1f c0       	rjmp	.+62     	; 0x2704 <main+0x4ce>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e9 5a       	subi	r30, 0xA9	; 169
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 e9       	ldi	r24, 0x90	; 144
    26ce:	91 e0       	ldi	r25, 0x01	; 1
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	fe 01       	movw	r30, r28
    26d6:	e9 5a       	subi	r30, 0xA9	; 169
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <main+0x4a8>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e9 5a       	subi	r30, 0xA9	; 169
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ec:	de 01       	movw	r26, r28
    26ee:	a7 5a       	subi	r26, 0xA7	; 167
    26f0:	bf 4f       	sbci	r27, 0xFF	; 255
    26f2:	fe 01       	movw	r30, r28
    26f4:	e7 5a       	subi	r30, 0xA7	; 167
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	11 96       	adiw	r26, 0x01	; 1
    2700:	9c 93       	st	X, r25
    2702:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	fe 01       	movw	r30, r28
    2706:	e7 5a       	subi	r30, 0xA7	; 167
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	d1 f6       	brne	.-76     	; 0x26c6 <main+0x490>
    2712:	27 c0       	rjmp	.+78     	; 0x2762 <main+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	8e 01       	movw	r16, r28
    2716:	07 5a       	subi	r16, 0xA7	; 167
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	e5 5a       	subi	r30, 0xA5	; 165
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	f8 01       	movw	r30, r16
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	de 01       	movw	r26, r28
    2738:	ab 5a       	subi	r26, 0xAB	; 171
    273a:	bf 4f       	sbci	r27, 0xFF	; 255
    273c:	fe 01       	movw	r30, r28
    273e:	e7 5a       	subi	r30, 0xA7	; 167
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	8d 93       	st	X+, r24
    2748:	9c 93       	st	X, r25
    274a:	fe 01       	movw	r30, r28
    274c:	eb 5a       	subi	r30, 0xAB	; 171
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	01 97       	sbiw	r24, 0x01	; 1
    2756:	f1 f7       	brne	.-4      	; 0x2754 <main+0x51e>
    2758:	fe 01       	movw	r30, r28
    275a:	eb 5a       	subi	r30, 0xAB	; 171
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24

			LCD_moveCursor(1,0);
			LCD_displayString("Same pass:");

			LCD_moveCursor(1,11);
			for(i = 0; i<PASSWORD_SIZE; i++)
    2762:	de 01       	movw	r26, r28
    2764:	ab 58       	subi	r26, 0x8B	; 139
    2766:	bf 4f       	sbci	r27, 0xFF	; 255
    2768:	fe 01       	movw	r30, r28
    276a:	eb 58       	subi	r30, 0x8B	; 139
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	8f 5f       	subi	r24, 0xFF	; 255
    2772:	8c 93       	st	X, r24
    2774:	fe 01       	movw	r30, r28
    2776:	eb 58       	subi	r30, 0x8B	; 139
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	85 30       	cpi	r24, 0x05	; 5
    277e:	08 f4       	brcc	.+2      	; 0x2782 <main+0x54c>
    2780:	2a cf       	rjmp	.-428    	; 0x25d6 <main+0x3a0>
				new_password[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(50);
			}

			while(KEYPAD_getPressedKey() != enter_key);
    2782:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    2786:	fe 01       	movw	r30, r28
    2788:	ee 58       	subi	r30, 0x8E	; 142
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	90 81       	ld	r25, Z
    278e:	89 17       	cp	r24, r25
    2790:	c1 f7       	brne	.-16     	; 0x2782 <main+0x54c>

			new_password[i] = '#';
    2792:	fe 01       	movw	r30, r28
    2794:	eb 58       	subi	r30, 0x8B	; 139
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	80 81       	ld	r24, Z
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	ce 01       	movw	r24, r28
    27a0:	89 58       	subi	r24, 0x89	; 137
    27a2:	9f 4f       	sbci	r25, 0xFF	; 255
    27a4:	fc 01       	movw	r30, r24
    27a6:	e2 0f       	add	r30, r18
    27a8:	f3 1f       	adc	r31, r19
    27aa:	83 e2       	ldi	r24, 0x23	; 35
    27ac:	80 83       	st	Z, r24
    27ae:	fe 01       	movw	r30, r28
    27b0:	ef 5a       	subi	r30, 0xAF	; 175
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	a8 ec       	ldi	r26, 0xC8	; 200
    27ba:	b2 e4       	ldi	r27, 0x42	; 66
    27bc:	80 83       	st	Z, r24
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	a2 83       	std	Z+2, r26	; 0x02
    27c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c4:	8e 01       	movw	r16, r28
    27c6:	03 5b       	subi	r16, 0xB3	; 179
    27c8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ca:	fe 01       	movw	r30, r28
    27cc:	ef 5a       	subi	r30, 0xAF	; 175
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	60 81       	ld	r22, Z
    27d2:	71 81       	ldd	r23, Z+1	; 0x01
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a e7       	ldi	r20, 0x7A	; 122
    27de:	55 e4       	ldi	r21, 0x45	; 69
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	f8 01       	movw	r30, r16
    27ea:	80 83       	st	Z, r24
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	a2 83       	std	Z+2, r26	; 0x02
    27f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27f2:	fe 01       	movw	r30, r28
    27f4:	e3 5b       	subi	r30, 0xB3	; 179
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	44 f4       	brge	.+16     	; 0x2820 <main+0x5ea>
		__ticks = 1;
    2810:	fe 01       	movw	r30, r28
    2812:	e5 5b       	subi	r30, 0xB5	; 181
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
    281e:	64 c0       	rjmp	.+200    	; 0x28e8 <main+0x6b2>
	else if (__tmp > 65535)
    2820:	fe 01       	movw	r30, r28
    2822:	e3 5b       	subi	r30, 0xB3	; 179
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	3f ef       	ldi	r19, 0xFF	; 255
    2832:	4f e7       	ldi	r20, 0x7F	; 127
    2834:	57 e4       	ldi	r21, 0x47	; 71
    2836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283a:	18 16       	cp	r1, r24
    283c:	0c f0       	brlt	.+2      	; 0x2840 <main+0x60a>
    283e:	43 c0       	rjmp	.+134    	; 0x28c6 <main+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2840:	fe 01       	movw	r30, r28
    2842:	ef 5a       	subi	r30, 0xAF	; 175
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	60 81       	ld	r22, Z
    2848:	71 81       	ldd	r23, Z+1	; 0x01
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e2       	ldi	r20, 0x20	; 32
    2854:	51 e4       	ldi	r21, 0x41	; 65
    2856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	8e 01       	movw	r16, r28
    2860:	05 5b       	subi	r16, 0xB5	; 181
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	f8 01       	movw	r30, r16
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	1f c0       	rjmp	.+62     	; 0x28b6 <main+0x680>
    2878:	fe 01       	movw	r30, r28
    287a:	e7 5b       	subi	r30, 0xB7	; 183
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	80 e9       	ldi	r24, 0x90	; 144
    2880:	91 e0       	ldi	r25, 0x01	; 1
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	fe 01       	movw	r30, r28
    2888:	e7 5b       	subi	r30, 0xB7	; 183
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	91 81       	ldd	r25, Z+1	; 0x01
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <main+0x65a>
    2894:	fe 01       	movw	r30, r28
    2896:	e7 5b       	subi	r30, 0xB7	; 183
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289e:	de 01       	movw	r26, r28
    28a0:	a5 5b       	subi	r26, 0xB5	; 181
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	fe 01       	movw	r30, r28
    28a6:	e5 5b       	subi	r30, 0xB5	; 181
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	11 96       	adiw	r26, 0x01	; 1
    28b2:	9c 93       	st	X, r25
    28b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	fe 01       	movw	r30, r28
    28b8:	e5 5b       	subi	r30, 0xB5	; 181
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	91 81       	ldd	r25, Z+1	; 0x01
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	d1 f6       	brne	.-76     	; 0x2878 <main+0x642>
    28c4:	27 c0       	rjmp	.+78     	; 0x2914 <main+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	8e 01       	movw	r16, r28
    28c8:	05 5b       	subi	r16, 0xB5	; 181
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e3 5b       	subi	r30, 0xB3	; 179
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	f8 01       	movw	r30, r16
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    28e8:	de 01       	movw	r26, r28
    28ea:	a9 5b       	subi	r26, 0xB9	; 185
    28ec:	bf 4f       	sbci	r27, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	e5 5b       	subi	r30, 0xB5	; 181
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	91 81       	ldd	r25, Z+1	; 0x01
    28f8:	8d 93       	st	X+, r24
    28fa:	9c 93       	st	X, r25
    28fc:	fe 01       	movw	r30, r28
    28fe:	e9 5b       	subi	r30, 0xB9	; 185
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <main+0x6d0>
    290a:	fe 01       	movw	r30, r28
    290c:	e9 5b       	subi	r30, 0xB9	; 185
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	80 83       	st	Z, r24
			_delay_ms(100);

			UART_sendByte(SEND_NEW_PASSWORD);
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
			while(UART_recieveByte() != Control_ECU_READY){}
    291a:	0e 94 17 1c 	call	0x382e	; 0x382e <UART_recieveByte>
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	e1 f7       	brne	.-8      	; 0x291a <main+0x6e4>
			UART_sendString(new_password);
    2922:	ce 01       	movw	r24, r28
    2924:	89 58       	subi	r24, 0x89	; 137
    2926:	9f 4f       	sbci	r25, 0xFF	; 255
    2928:	0e 94 26 1c 	call	0x384c	; 0x384c <UART_sendString>
			UART_sendByte(SEND_DONE);
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
			system_case = MAIN_OPTIONS;
    2932:	fe 01       	movw	r30, r28
    2934:	ea 58       	subi	r30, 0x8A	; 138
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	80 83       	st	Z, r24
    293c:	07 cd       	rjmp	.-1522   	; 0x234c <main+0x116>
			break;


		case MAIN_OPTIONS:
			LCD_clearScreen();
    293e:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2942:	80 e0       	ldi	r24, 0x00	; 0
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("+ : Open Door");
    294a:	8b e7       	ldi	r24, 0x7B	; 123
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
			LCD_moveCursor(1,0);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    295a:	89 e8       	ldi	r24, 0x89	; 137
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
			choice = KEYPAD_getPressedKey();
    2962:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    2966:	fe 01       	movw	r30, r28
    2968:	ec 58       	subi	r30, 0x8C	; 140
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 83       	st	Z, r24
			if(choice == '+')
    296e:	fe 01       	movw	r30, r28
    2970:	ec 58       	subi	r30, 0x8C	; 140
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	80 81       	ld	r24, Z
    2976:	8b 32       	cpi	r24, 0x2B	; 43
    2978:	31 f4       	brne	.+12     	; 0x2986 <main+0x750>
			{
				system_case = ENTER_PASSWORD;
    297a:	fe 01       	movw	r30, r28
    297c:	ea 58       	subi	r30, 0x8A	; 138
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	80 83       	st	Z, r24
    2984:	e3 cc       	rjmp	.-1594   	; 0x234c <main+0x116>
			}
			else if(choice == '-')
    2986:	fe 01       	movw	r30, r28
    2988:	ec 58       	subi	r30, 0x8C	; 140
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	8d 32       	cpi	r24, 0x2D	; 45
    2990:	09 f0       	breq	.+2      	; 0x2994 <main+0x75e>
    2992:	dc cc       	rjmp	.-1608   	; 0x234c <main+0x116>
			{
				system_case = ENTER_PASSWORD;
    2994:	fe 01       	movw	r30, r28
    2996:	ea 58       	subi	r30, 0x8A	; 138
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	80 83       	st	Z, r24
    299e:	d6 cc       	rjmp	.-1620   	; 0x234c <main+0x116>
			}
			break;

		case ENTER_PASSWORD:
			UART_sendByte(RETRIEVE_NEW_PASSWORD);
    29a0:	82 e0       	ldi	r24, 0x02	; 2
    29a2:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
			UART_sendByte(Control_ECU_READY);
    29a6:	83 e0       	ldi	r24, 0x03	; 3
    29a8:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
			UART_receiveString(saved_password);
    29ac:	ce 01       	movw	r24, r28
    29ae:	83 58       	subi	r24, 0x83	; 131
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	0e 94 4f 1c 	call	0x389e	; 0x389e <UART_receiveString>
			UART_sendByte(SEND_DONE); /*saved password retrieved*/
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>

			/*ask user to enter password*/
			LCD_clearScreen();
    29bc:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	60 e0       	ldi	r22, 0x00	; 0
    29c4:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Plz enter pass:");
    29c8:	80 e6       	ldi	r24, 0x60	; 96
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
			LCD_moveCursor(1,0);
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>

			for(i = 0; i<PASSWORD_SIZE; i++)
    29d8:	fe 01       	movw	r30, r28
    29da:	eb 58       	subi	r30, 0x8B	; 139
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	10 82       	st	Z, r1
    29e0:	a1 c0       	rjmp	.+322    	; 0x2b24 <main+0x8ee>
			{
				entered_password[i] = KEYPAD_getPressedKey();
    29e2:	fe 01       	movw	r30, r28
    29e4:	eb 58       	subi	r30, 0x8B	; 139
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	08 2f       	mov	r16, r24
    29ec:	10 e0       	ldi	r17, 0x00	; 0
    29ee:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    29f2:	28 2f       	mov	r18, r24
    29f4:	ce 01       	movw	r24, r28
    29f6:	8d 57       	subi	r24, 0x7D	; 125
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	fc 01       	movw	r30, r24
    29fc:	e0 0f       	add	r30, r16
    29fe:	f1 1f       	adc	r31, r17
    2a00:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    2a02:	8a e2       	ldi	r24, 0x2A	; 42
    2a04:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_displayCharacter>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ed 5b       	subi	r30, 0xBD	; 189
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a8 e4       	ldi	r26, 0x48	; 72
    2a14:	b2 e4       	ldi	r27, 0x42	; 66
    2a16:	80 83       	st	Z, r24
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	a2 83       	std	Z+2, r26	; 0x02
    2a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	8e 01       	movw	r16, r28
    2a20:	01 5c       	subi	r16, 0xC1	; 193
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	ed 5b       	subi	r30, 0xBD	; 189
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	55 e4       	ldi	r21, 0x45	; 69
    2a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	ff 96       	adiw	r30, 0x3f	; 63
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <main+0x83c>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9e af       	std	Y+62, r25	; 0x3e
    2a6e:	8d af       	std	Y+61, r24	; 0x3d
    2a70:	46 c0       	rjmp	.+140    	; 0x2afe <main+0x8c8>
	else if (__tmp > 65535)
    2a72:	fe 01       	movw	r30, r28
    2a74:	ff 96       	adiw	r30, 0x3f	; 63
    2a76:	60 81       	ld	r22, Z
    2a78:	71 81       	ldd	r23, Z+1	; 0x01
    2a7a:	82 81       	ldd	r24, Z+2	; 0x02
    2a7c:	93 81       	ldd	r25, Z+3	; 0x03
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	64 f5       	brge	.+88     	; 0x2ae6 <main+0x8b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ed 5b       	subi	r30, 0xBD	; 189
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 e2       	ldi	r20, 0x20	; 32
    2aa2:	51 e4       	ldi	r21, 0x41	; 65
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e af       	std	Y+62, r25	; 0x3e
    2aba:	8d af       	std	Y+61, r24	; 0x3d
    2abc:	0f c0       	rjmp	.+30     	; 0x2adc <main+0x8a6>
    2abe:	80 e9       	ldi	r24, 0x90	; 144
    2ac0:	91 e0       	ldi	r25, 0x01	; 1
    2ac2:	9c af       	std	Y+60, r25	; 0x3c
    2ac4:	8b af       	std	Y+59, r24	; 0x3b
    2ac6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ac8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <main+0x894>
    2ace:	9c af       	std	Y+60, r25	; 0x3c
    2ad0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	9e af       	std	Y+62, r25	; 0x3e
    2ada:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2adc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ade:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	69 f7       	brne	.-38     	; 0x2abe <main+0x888>
    2ae4:	16 c0       	rjmp	.+44     	; 0x2b12 <main+0x8dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	ff 96       	adiw	r30, 0x3f	; 63
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9e af       	std	Y+62, r25	; 0x3e
    2afc:	8d af       	std	Y+61, r24	; 0x3d
    2afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b02:	9a af       	std	Y+58, r25	; 0x3a
    2b04:	89 af       	std	Y+57, r24	; 0x39
    2b06:	89 ad       	ldd	r24, Y+57	; 0x39
    2b08:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <main+0x8d4>
    2b0e:	9a af       	std	Y+58, r25	; 0x3a
    2b10:	89 af       	std	Y+57, r24	; 0x39
			LCD_clearScreen();
			LCD_moveCursor(0,0);
			LCD_displayString("Plz enter pass:");
			LCD_moveCursor(1,0);

			for(i = 0; i<PASSWORD_SIZE; i++)
    2b12:	de 01       	movw	r26, r28
    2b14:	ab 58       	subi	r26, 0x8B	; 139
    2b16:	bf 4f       	sbci	r27, 0xFF	; 255
    2b18:	fe 01       	movw	r30, r28
    2b1a:	eb 58       	subi	r30, 0x8B	; 139
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 81       	ld	r24, Z
    2b20:	8f 5f       	subi	r24, 0xFF	; 255
    2b22:	8c 93       	st	X, r24
    2b24:	fe 01       	movw	r30, r28
    2b26:	eb 58       	subi	r30, 0x8B	; 139
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	80 81       	ld	r24, Z
    2b2c:	85 30       	cpi	r24, 0x05	; 5
    2b2e:	08 f4       	brcc	.+2      	; 0x2b32 <main+0x8fc>
    2b30:	58 cf       	rjmp	.-336    	; 0x29e2 <main+0x7ac>
				entered_password[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(50);
			}

			while(KEYPAD_getPressedKey() != enter_key);
    2b32:	0e 94 8e 09 	call	0x131c	; 0x131c <KEYPAD_getPressedKey>
    2b36:	fe 01       	movw	r30, r28
    2b38:	ee 58       	subi	r30, 0x8E	; 142
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	90 81       	ld	r25, Z
    2b3e:	89 17       	cp	r24, r25
    2b40:	c1 f7       	brne	.-16     	; 0x2b32 <main+0x8fc>

			/*check if password is right*/
			for(i = 0; i<PASSWORD_SIZE; i++)
    2b42:	fe 01       	movw	r30, r28
    2b44:	eb 58       	subi	r30, 0x8B	; 139
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	10 82       	st	Z, r1
    2b4a:	30 c0       	rjmp	.+96     	; 0x2bac <main+0x976>
			{
				if(entered_password[i] != saved_password[i])
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	eb 58       	subi	r30, 0x8B	; 139
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	28 2f       	mov	r18, r24
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	ce 01       	movw	r24, r28
    2b5a:	8d 57       	subi	r24, 0x7D	; 125
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	fc 01       	movw	r30, r24
    2b60:	e2 0f       	add	r30, r18
    2b62:	f3 1f       	adc	r31, r19
    2b64:	40 81       	ld	r20, Z
    2b66:	fe 01       	movw	r30, r28
    2b68:	eb 58       	subi	r30, 0x8B	; 139
    2b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6c:	80 81       	ld	r24, Z
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	ce 01       	movw	r24, r28
    2b74:	83 58       	subi	r24, 0x83	; 131
    2b76:	9f 4f       	sbci	r25, 0xFF	; 255
    2b78:	fc 01       	movw	r30, r24
    2b7a:	e2 0f       	add	r30, r18
    2b7c:	f3 1f       	adc	r31, r19
    2b7e:	80 81       	ld	r24, Z
    2b80:	48 17       	cp	r20, r24
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <main+0x95a>
				{
					system_case = WRONG_PASSWORD_ENTERED;
    2b84:	fe 01       	movw	r30, r28
    2b86:	ea 58       	subi	r30, 0x8A	; 138
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	83 e0       	ldi	r24, 0x03	; 3
    2b8c:	80 83       	st	Z, r24
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <main+0x982>
				}
				else
				{

				}
				check_flag = 1;
    2b90:	fe 01       	movw	r30, r28
    2b92:	ed 58       	subi	r30, 0x8D	; 141
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	80 83       	st	Z, r24
			}

			while(KEYPAD_getPressedKey() != enter_key);

			/*check if password is right*/
			for(i = 0; i<PASSWORD_SIZE; i++)
    2b9a:	de 01       	movw	r26, r28
    2b9c:	ab 58       	subi	r26, 0x8B	; 139
    2b9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	eb 58       	subi	r30, 0x8B	; 139
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	8c 93       	st	X, r24
    2bac:	fe 01       	movw	r30, r28
    2bae:	eb 58       	subi	r30, 0x8B	; 139
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 81       	ld	r24, Z
    2bb4:	85 30       	cpi	r24, 0x05	; 5
    2bb6:	50 f2       	brcs	.-108    	; 0x2b4c <main+0x916>
				{

				}
				check_flag = 1;
			}
			if(check_flag && choice == '+')
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ed 58       	subi	r30, 0x8D	; 141
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	88 23       	and	r24, r24
    2bc2:	81 f0       	breq	.+32     	; 0x2be4 <main+0x9ae>
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	ec 58       	subi	r30, 0x8C	; 140
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	8b 32       	cpi	r24, 0x2B	; 43
    2bce:	51 f4       	brne	.+20     	; 0x2be4 <main+0x9ae>
			{
				unmatch_num =0;
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ef 58       	subi	r30, 0x8F	; 143
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	10 82       	st	Z, r1
				system_case = RIGHT_PASSWORD_ENTERED;
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ea 58       	subi	r30, 0x8A	; 138
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	84 e0       	ldi	r24, 0x04	; 4
    2be0:	80 83       	st	Z, r24
    2be2:	b4 cb       	rjmp	.-2200   	; 0x234c <main+0x116>
			}
			else if(check_flag && choice == '-')
    2be4:	fe 01       	movw	r30, r28
    2be6:	ed 58       	subi	r30, 0x8D	; 141
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <main+0x9bc>
    2bf0:	ad cb       	rjmp	.-2214   	; 0x234c <main+0x116>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	ec 58       	subi	r30, 0x8C	; 140
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	8d 32       	cpi	r24, 0x2D	; 45
    2bfc:	09 f0       	breq	.+2      	; 0x2c00 <main+0x9ca>
    2bfe:	a6 cb       	rjmp	.-2228   	; 0x234c <main+0x116>
			{
				unmatch_num =0;
    2c00:	fe 01       	movw	r30, r28
    2c02:	ef 58       	subi	r30, 0x8F	; 143
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	10 82       	st	Z, r1
				system_case = NEW_PASSWORD_ENTER;
    2c08:	fe 01       	movw	r30, r28
    2c0a:	ea 58       	subi	r30, 0x8A	; 138
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	10 82       	st	Z, r1
    2c10:	9d cb       	rjmp	.-2246   	; 0x234c <main+0x116>
			}
			break;

		case RIGHT_PASSWORD_ENTERED:
			UART_sendByte(RIGHT_PASSWORD);
    2c12:	84 e0       	ldi	r24, 0x04	; 4
    2c14:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
			LCD_clearScreen();
    2c18:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Door is ");
    2c24:	89 e9       	ldi	r24, 0x99	; 153
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
			LCD_moveCursor(1,0);
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Unlocking");
    2c34:	82 ea       	ldi	r24, 0xA2	; 162
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e6       	ldi	r25, 0x60	; 96
    2c40:	aa e6       	ldi	r26, 0x6A	; 106
    2c42:	b6 e4       	ldi	r27, 0x46	; 70
    2c44:	8d ab       	std	Y+53, r24	; 0x35
    2c46:	9e ab       	std	Y+54, r25	; 0x36
    2c48:	af ab       	std	Y+55, r26	; 0x37
    2c4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c50:	8f a9       	ldd	r24, Y+55	; 0x37
    2c52:	98 ad       	ldd	r25, Y+56	; 0x38
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	4a e7       	ldi	r20, 0x7A	; 122
    2c5a:	55 e4       	ldi	r21, 0x45	; 69
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	89 ab       	std	Y+49, r24	; 0x31
    2c66:	9a ab       	std	Y+50, r25	; 0x32
    2c68:	ab ab       	std	Y+51, r26	; 0x33
    2c6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c6c:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6e:	7a a9       	ldd	r23, Y+50	; 0x32
    2c70:	8b a9       	ldd	r24, Y+51	; 0x33
    2c72:	9c a9       	ldd	r25, Y+52	; 0x34
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <main+0xa58>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	98 ab       	std	Y+48, r25	; 0x30
    2c8a:	8f a7       	std	Y+47, r24	; 0x2f
    2c8c:	3f c0       	rjmp	.+126    	; 0x2d0c <main+0xad6>
	else if (__tmp > 65535)
    2c8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c90:	7a a9       	ldd	r23, Y+50	; 0x32
    2c92:	8b a9       	ldd	r24, Y+51	; 0x33
    2c94:	9c a9       	ldd	r25, Y+52	; 0x34
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	3f ef       	ldi	r19, 0xFF	; 255
    2c9a:	4f e7       	ldi	r20, 0x7F	; 127
    2c9c:	57 e4       	ldi	r21, 0x47	; 71
    2c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca2:	18 16       	cp	r1, r24
    2ca4:	4c f5       	brge	.+82     	; 0x2cf8 <main+0xac2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca8:	7e a9       	ldd	r23, Y+54	; 0x36
    2caa:	8f a9       	ldd	r24, Y+55	; 0x37
    2cac:	98 ad       	ldd	r25, Y+56	; 0x38
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e2       	ldi	r20, 0x20	; 32
    2cb4:	51 e4       	ldi	r21, 0x41	; 65
    2cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	cb 01       	movw	r24, r22
    2cca:	98 ab       	std	Y+48, r25	; 0x30
    2ccc:	8f a7       	std	Y+47, r24	; 0x2f
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <main+0xab8>
    2cd0:	80 e9       	ldi	r24, 0x90	; 144
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	9e a7       	std	Y+46, r25	; 0x2e
    2cd6:	8d a7       	std	Y+45, r24	; 0x2d
    2cd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cda:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	f1 f7       	brne	.-4      	; 0x2cdc <main+0xaa6>
    2ce0:	9e a7       	std	Y+46, r25	; 0x2e
    2ce2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce8:	01 97       	sbiw	r24, 0x01	; 1
    2cea:	98 ab       	std	Y+48, r25	; 0x30
    2cec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cf0:	98 a9       	ldd	r25, Y+48	; 0x30
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	69 f7       	brne	.-38     	; 0x2cd0 <main+0xa9a>
    2cf6:	14 c0       	rjmp	.+40     	; 0x2d20 <main+0xaea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cfa:	7a a9       	ldd	r23, Y+50	; 0x32
    2cfc:	8b a9       	ldd	r24, Y+51	; 0x33
    2cfe:	9c a9       	ldd	r25, Y+52	; 0x34
    2d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	98 ab       	std	Y+48, r25	; 0x30
    2d0a:	8f a7       	std	Y+47, r24	; 0x2f
    2d0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d10:	9c a7       	std	Y+44, r25	; 0x2c
    2d12:	8b a7       	std	Y+43, r24	; 0x2b
    2d14:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d16:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <main+0xae2>
    2d1c:	9c a7       	std	Y+44, r25	; 0x2c
    2d1e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(15000);

			LCD_clearScreen();
    2d20:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Wait for people");
    2d2c:	8c ea       	ldi	r24, 0xAC	; 172
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
			LCD_moveCursor(1,5);
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	65 e0       	ldi	r22, 0x05	; 5
    2d38:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("to Enter");
    2d3c:	8c eb       	ldi	r24, 0xBC	; 188
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>

			while(UART_recieveByte() != PIR_OFF){}
    2d44:	0e 94 17 1c 	call	0x382e	; 0x382e <UART_recieveByte>
    2d48:	86 30       	cpi	r24, 0x06	; 6
    2d4a:	e1 f7       	brne	.-8      	; 0x2d44 <main+0xb0e>

			LCD_clearScreen();
    2d4c:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Door is Locking");
    2d58:	85 ec       	ldi	r24, 0xC5	; 197
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e6       	ldi	r25, 0x60	; 96
    2d64:	aa e6       	ldi	r26, 0x6A	; 106
    2d66:	b6 e4       	ldi	r27, 0x46	; 70
    2d68:	8f a3       	std	Y+39, r24	; 0x27
    2d6a:	98 a7       	std	Y+40, r25	; 0x28
    2d6c:	a9 a7       	std	Y+41, r26	; 0x29
    2d6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d70:	6f a1       	ldd	r22, Y+39	; 0x27
    2d72:	78 a5       	ldd	r23, Y+40	; 0x28
    2d74:	89 a5       	ldd	r24, Y+41	; 0x29
    2d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	4a e7       	ldi	r20, 0x7A	; 122
    2d7e:	55 e4       	ldi	r21, 0x45	; 69
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	8b a3       	std	Y+35, r24	; 0x23
    2d8a:	9c a3       	std	Y+36, r25	; 0x24
    2d8c:	ad a3       	std	Y+37, r26	; 0x25
    2d8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d90:	6b a1       	ldd	r22, Y+35	; 0x23
    2d92:	7c a1       	ldd	r23, Y+36	; 0x24
    2d94:	8d a1       	ldd	r24, Y+37	; 0x25
    2d96:	9e a1       	ldd	r25, Y+38	; 0x26
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da4:	88 23       	and	r24, r24
    2da6:	2c f4       	brge	.+10     	; 0x2db2 <main+0xb7c>
		__ticks = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9a a3       	std	Y+34, r25	; 0x22
    2dae:	89 a3       	std	Y+33, r24	; 0x21
    2db0:	3f c0       	rjmp	.+126    	; 0x2e30 <main+0xbfa>
	else if (__tmp > 65535)
    2db2:	6b a1       	ldd	r22, Y+35	; 0x23
    2db4:	7c a1       	ldd	r23, Y+36	; 0x24
    2db6:	8d a1       	ldd	r24, Y+37	; 0x25
    2db8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	57 e4       	ldi	r21, 0x47	; 71
    2dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	4c f5       	brge	.+82     	; 0x2e1c <main+0xbe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dca:	6f a1       	ldd	r22, Y+39	; 0x27
    2dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2dce:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e2       	ldi	r20, 0x20	; 32
    2dd8:	51 e4       	ldi	r21, 0x41	; 65
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9a a3       	std	Y+34, r25	; 0x22
    2df0:	89 a3       	std	Y+33, r24	; 0x21
    2df2:	0f c0       	rjmp	.+30     	; 0x2e12 <main+0xbdc>
    2df4:	80 e9       	ldi	r24, 0x90	; 144
    2df6:	91 e0       	ldi	r25, 0x01	; 1
    2df8:	98 a3       	std	Y+32, r25	; 0x20
    2dfa:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfe:	98 a1       	ldd	r25, Y+32	; 0x20
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <main+0xbca>
    2e04:	98 a3       	std	Y+32, r25	; 0x20
    2e06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e08:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	9a a3       	std	Y+34, r25	; 0x22
    2e10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e12:	89 a1       	ldd	r24, Y+33	; 0x21
    2e14:	9a a1       	ldd	r25, Y+34	; 0x22
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	69 f7       	brne	.-38     	; 0x2df4 <main+0xbbe>
    2e1a:	14 c0       	rjmp	.+40     	; 0x2e44 <main+0xc0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e20:	8d a1       	ldd	r24, Y+37	; 0x25
    2e22:	9e a1       	ldd	r25, Y+38	; 0x26
    2e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9a a3       	std	Y+34, r25	; 0x22
    2e2e:	89 a3       	std	Y+33, r24	; 0x21
    2e30:	89 a1       	ldd	r24, Y+33	; 0x21
    2e32:	9a a1       	ldd	r25, Y+34	; 0x22
    2e34:	9e 8f       	std	Y+30, r25	; 0x1e
    2e36:	8d 8f       	std	Y+29, r24	; 0x1d
    2e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <main+0xc06>
    2e40:	9e 8f       	std	Y+30, r25	; 0x1e
    2e42:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(15000);
			LCD_clearScreen();
    2e44:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>

			UART_sendByte(SEND_DONE);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>

			system_case = MAIN_OPTIONS;
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ea 58       	subi	r30, 0x8A	; 138
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	80 83       	st	Z, r24
    2e58:	79 ca       	rjmp	.-2830   	; 0x234c <main+0x116>
			break;

		case WRONG_PASSWORD_ENTERED:
			unmatch_num++;
    2e5a:	de 01       	movw	r26, r28
    2e5c:	af 58       	subi	r26, 0x8F	; 143
    2e5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 58       	subi	r30, 0x8F	; 143
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	8f 5f       	subi	r24, 0xFF	; 255
    2e6a:	8c 93       	st	X, r24
			LCD_clearScreen();
    2e6c:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			LCD_moveCursor(0,0);
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
			LCD_displayString("Wrong pass");
    2e78:	85 ed       	ldi	r24, 0xD5	; 213
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	aa ef       	ldi	r26, 0xFA	; 250
    2e86:	b3 e4       	ldi	r27, 0x43	; 67
    2e88:	89 8f       	std	Y+25, r24	; 0x19
    2e8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e90:	69 8d       	ldd	r22, Y+25	; 0x19
    2e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	4a e7       	ldi	r20, 0x7A	; 122
    2e9e:	55 e4       	ldi	r21, 0x45	; 69
    2ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	8d 8b       	std	Y+21, r24	; 0x15
    2eaa:	9e 8b       	std	Y+22, r25	; 0x16
    2eac:	af 8b       	std	Y+23, r26	; 0x17
    2eae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e8       	ldi	r20, 0x80	; 128
    2ebe:	5f e3       	ldi	r21, 0x3F	; 63
    2ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec4:	88 23       	and	r24, r24
    2ec6:	2c f4       	brge	.+10     	; 0x2ed2 <main+0xc9c>
		__ticks = 1;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 8b       	std	Y+20, r25	; 0x14
    2ece:	8b 8b       	std	Y+19, r24	; 0x13
    2ed0:	3f c0       	rjmp	.+126    	; 0x2f50 <main+0xd1a>
	else if (__tmp > 65535)
    2ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	3f ef       	ldi	r19, 0xFF	; 255
    2ede:	4f e7       	ldi	r20, 0x7F	; 127
    2ee0:	57 e4       	ldi	r21, 0x47	; 71
    2ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	4c f5       	brge	.+82     	; 0x2f3c <main+0xd06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eea:	69 8d       	ldd	r22, Y+25	; 0x19
    2eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e2       	ldi	r20, 0x20	; 32
    2ef8:	51 e4       	ldi	r21, 0x41	; 65
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	9c 8b       	std	Y+20, r25	; 0x14
    2f10:	8b 8b       	std	Y+19, r24	; 0x13
    2f12:	0f c0       	rjmp	.+30     	; 0x2f32 <main+0xcfc>
    2f14:	80 e9       	ldi	r24, 0x90	; 144
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	9a 8b       	std	Y+18, r25	; 0x12
    2f1a:	89 8b       	std	Y+17, r24	; 0x11
    2f1c:	89 89       	ldd	r24, Y+17	; 0x11
    2f1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0xcea>
    2f24:	9a 8b       	std	Y+18, r25	; 0x12
    2f26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f28:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	9c 8b       	std	Y+20, r25	; 0x14
    2f30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f32:	8b 89       	ldd	r24, Y+19	; 0x13
    2f34:	9c 89       	ldd	r25, Y+20	; 0x14
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	69 f7       	brne	.-38     	; 0x2f14 <main+0xcde>
    2f3a:	14 c0       	rjmp	.+40     	; 0x2f64 <main+0xd2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f40:	8f 89       	ldd	r24, Y+23	; 0x17
    2f42:	98 8d       	ldd	r25, Y+24	; 0x18
    2f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9c 8b       	std	Y+20, r25	; 0x14
    2f4e:	8b 8b       	std	Y+19, r24	; 0x13
    2f50:	8b 89       	ldd	r24, Y+19	; 0x13
    2f52:	9c 89       	ldd	r25, Y+20	; 0x14
    2f54:	98 8b       	std	Y+16, r25	; 0x10
    2f56:	8f 87       	std	Y+15, r24	; 0x0f
    2f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5a:	98 89       	ldd	r25, Y+16	; 0x10
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <main+0xd26>
    2f60:	98 8b       	std	Y+16, r25	; 0x10
    2f62:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			LCD_clearScreen();
    2f64:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_clearScreen>
			if(unmatch_num == 3)
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ef 58       	subi	r30, 0x8F	; 143
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	83 30       	cpi	r24, 0x03	; 3
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <main+0xd40>
    2f74:	9b c0       	rjmp	.+310    	; 0x30ac <main+0xe76>
			{
				UART_sendByte(WRONG_PASSWORD);
    2f76:	85 e0       	ldi	r24, 0x05	; 5
    2f78:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
				LCD_moveCursor(0,4);
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	64 e0       	ldi	r22, 0x04	; 4
    2f80:	0e 94 3c 10 	call	0x2078	; 0x2078 <LCD_moveCursor>
				LCD_displayString("ERROR");
    2f84:	80 ee       	ldi	r24, 0xE0	; 224
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	0e 94 13 10 	call	0x2026	; 0x2026 <LCD_displayString>
				for(i=0; i<61; i++)
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	eb 58       	subi	r30, 0x8B	; 139
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	10 82       	st	Z, r1
    2f94:	7b c0       	rjmp	.+246    	; 0x308c <main+0xe56>
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	aa e7       	ldi	r26, 0x7A	; 122
    2f9c:	b4 e4       	ldi	r27, 0x44	; 68
    2f9e:	8b 87       	std	Y+11, r24	; 0x0b
    2fa0:	9c 87       	std	Y+12, r25	; 0x0c
    2fa2:	ad 87       	std	Y+13, r26	; 0x0d
    2fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	4a e7       	ldi	r20, 0x7A	; 122
    2fb4:	55 e4       	ldi	r21, 0x45	; 69
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	8f 83       	std	Y+7, r24	; 0x07
    2fc0:	98 87       	std	Y+8, r25	; 0x08
    2fc2:	a9 87       	std	Y+9, r26	; 0x09
    2fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc8:	78 85       	ldd	r23, Y+8	; 0x08
    2fca:	89 85       	ldd	r24, Y+9	; 0x09
    2fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e8       	ldi	r20, 0x80	; 128
    2fd4:	5f e3       	ldi	r21, 0x3F	; 63
    2fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fda:	88 23       	and	r24, r24
    2fdc:	2c f4       	brge	.+10     	; 0x2fe8 <main+0xdb2>
		__ticks = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9e 83       	std	Y+6, r25	; 0x06
    2fe4:	8d 83       	std	Y+5, r24	; 0x05
    2fe6:	3f c0       	rjmp	.+126    	; 0x3066 <main+0xe30>
	else if (__tmp > 65535)
    2fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fea:	78 85       	ldd	r23, Y+8	; 0x08
    2fec:	89 85       	ldd	r24, Y+9	; 0x09
    2fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	3f ef       	ldi	r19, 0xFF	; 255
    2ff4:	4f e7       	ldi	r20, 0x7F	; 127
    2ff6:	57 e4       	ldi	r21, 0x47	; 71
    2ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ffc:	18 16       	cp	r1, r24
    2ffe:	4c f5       	brge	.+82     	; 0x3052 <main+0xe1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3000:	6b 85       	ldd	r22, Y+11	; 0x0b
    3002:	7c 85       	ldd	r23, Y+12	; 0x0c
    3004:	8d 85       	ldd	r24, Y+13	; 0x0d
    3006:	9e 85       	ldd	r25, Y+14	; 0x0e
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 e2       	ldi	r20, 0x20	; 32
    300e:	51 e4       	ldi	r21, 0x41	; 65
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9e 83       	std	Y+6, r25	; 0x06
    3026:	8d 83       	std	Y+5, r24	; 0x05
    3028:	0f c0       	rjmp	.+30     	; 0x3048 <main+0xe12>
    302a:	80 e9       	ldi	r24, 0x90	; 144
    302c:	91 e0       	ldi	r25, 0x01	; 1
    302e:	9c 83       	std	Y+4, r25	; 0x04
    3030:	8b 83       	std	Y+3, r24	; 0x03
    3032:	8b 81       	ldd	r24, Y+3	; 0x03
    3034:	9c 81       	ldd	r25, Y+4	; 0x04
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <main+0xe00>
    303a:	9c 83       	std	Y+4, r25	; 0x04
    303c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303e:	8d 81       	ldd	r24, Y+5	; 0x05
    3040:	9e 81       	ldd	r25, Y+6	; 0x06
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	9e 83       	std	Y+6, r25	; 0x06
    3046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	69 f7       	brne	.-38     	; 0x302a <main+0xdf4>
    3050:	14 c0       	rjmp	.+40     	; 0x307a <main+0xe44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3052:	6f 81       	ldd	r22, Y+7	; 0x07
    3054:	78 85       	ldd	r23, Y+8	; 0x08
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	9a 81       	ldd	r25, Y+2	; 0x02
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	f1 f7       	brne	.-4      	; 0x3072 <main+0xe3c>
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	de 01       	movw	r26, r28
    307c:	ab 58       	subi	r26, 0x8B	; 139
    307e:	bf 4f       	sbci	r27, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	eb 58       	subi	r30, 0x8B	; 139
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	8f 5f       	subi	r24, 0xFF	; 255
    308a:	8c 93       	st	X, r24
    308c:	fe 01       	movw	r30, r28
    308e:	eb 58       	subi	r30, 0x8B	; 139
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	80 81       	ld	r24, Z
    3094:	8d 33       	cpi	r24, 0x3D	; 61
    3096:	08 f4       	brcc	.+2      	; 0x309a <main+0xe64>
    3098:	7e cf       	rjmp	.-260    	; 0x2f96 <main+0xd60>
				{
					_delay_ms(1000);
				}

				UART_sendByte(SEND_DONE);
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
				system_case = MAIN_OPTIONS;
    30a0:	fe 01       	movw	r30, r28
    30a2:	ea 58       	subi	r30, 0x8A	; 138
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	80 83       	st	Z, r24
    30aa:	50 c9       	rjmp	.-3424   	; 0x234c <main+0x116>
			}
			else
			{
				system_case = ENTER_PASSWORD;
    30ac:	fe 01       	movw	r30, r28
    30ae:	ea 58       	subi	r30, 0x8A	; 138
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	82 e0       	ldi	r24, 0x02	; 2
    30b4:	80 83       	st	Z, r24
    30b6:	4a c9       	rjmp	.-3436   	; 0x234c <main+0x116>

000030b8 <__vector_11>:
static char g_timer1Mode = 0;
static char g_timer2Mode = 0;

/*interrupt service routine of timer0 in normal mode*/
ISR(TIMER0_OVF_vect)
{
    30b8:	1f 92       	push	r1
    30ba:	0f 92       	push	r0
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	0f 92       	push	r0
    30c0:	11 24       	eor	r1, r1
    30c2:	2f 93       	push	r18
    30c4:	3f 93       	push	r19
    30c6:	4f 93       	push	r20
    30c8:	5f 93       	push	r21
    30ca:	6f 93       	push	r22
    30cc:	7f 93       	push	r23
    30ce:	8f 93       	push	r24
    30d0:	9f 93       	push	r25
    30d2:	af 93       	push	r26
    30d4:	bf 93       	push	r27
    30d6:	ef 93       	push	r30
    30d8:	ff 93       	push	r31
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackFuncPtr != NULL_PTR)
    30e2:	80 91 f6 01 	lds	r24, 0x01F6
    30e6:	90 91 f7 01 	lds	r25, 0x01F7
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	29 f0       	breq	.+10     	; 0x30f8 <__vector_11+0x40>
	{
		(*g_timer0CallBackFuncPtr)();
    30ee:	e0 91 f6 01 	lds	r30, 0x01F6
    30f2:	f0 91 f7 01 	lds	r31, 0x01F7
    30f6:	09 95       	icall
	}
}
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	ff 91       	pop	r31
    30fe:	ef 91       	pop	r30
    3100:	bf 91       	pop	r27
    3102:	af 91       	pop	r26
    3104:	9f 91       	pop	r25
    3106:	8f 91       	pop	r24
    3108:	7f 91       	pop	r23
    310a:	6f 91       	pop	r22
    310c:	5f 91       	pop	r21
    310e:	4f 91       	pop	r20
    3110:	3f 91       	pop	r19
    3112:	2f 91       	pop	r18
    3114:	0f 90       	pop	r0
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	0f 90       	pop	r0
    311a:	1f 90       	pop	r1
    311c:	18 95       	reti

0000311e <__vector_10>:

/*interrupt service routine of timer0 in compare mode*/
ISR(TIMER0_COMP_vect)
{
    311e:	1f 92       	push	r1
    3120:	0f 92       	push	r0
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	0f 92       	push	r0
    3126:	11 24       	eor	r1, r1
    3128:	2f 93       	push	r18
    312a:	3f 93       	push	r19
    312c:	4f 93       	push	r20
    312e:	5f 93       	push	r21
    3130:	6f 93       	push	r22
    3132:	7f 93       	push	r23
    3134:	8f 93       	push	r24
    3136:	9f 93       	push	r25
    3138:	af 93       	push	r26
    313a:	bf 93       	push	r27
    313c:	ef 93       	push	r30
    313e:	ff 93       	push	r31
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackFuncPtr != NULL_PTR)
    3148:	80 91 f6 01 	lds	r24, 0x01F6
    314c:	90 91 f7 01 	lds	r25, 0x01F7
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	29 f0       	breq	.+10     	; 0x315e <__vector_10+0x40>
	{
		(*g_timer0CallBackFuncPtr)();
    3154:	e0 91 f6 01 	lds	r30, 0x01F6
    3158:	f0 91 f7 01 	lds	r31, 0x01F7
    315c:	09 95       	icall
	}
}
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	ff 91       	pop	r31
    3164:	ef 91       	pop	r30
    3166:	bf 91       	pop	r27
    3168:	af 91       	pop	r26
    316a:	9f 91       	pop	r25
    316c:	8f 91       	pop	r24
    316e:	7f 91       	pop	r23
    3170:	6f 91       	pop	r22
    3172:	5f 91       	pop	r21
    3174:	4f 91       	pop	r20
    3176:	3f 91       	pop	r19
    3178:	2f 91       	pop	r18
    317a:	0f 90       	pop	r0
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	0f 90       	pop	r0
    3180:	1f 90       	pop	r1
    3182:	18 95       	reti

00003184 <__vector_9>:

/*interrupt service routine of timer1 in normal mode*/
ISR(TIMER1_OVF_vect)
{
    3184:	1f 92       	push	r1
    3186:	0f 92       	push	r0
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	0f 92       	push	r0
    318c:	11 24       	eor	r1, r1
    318e:	2f 93       	push	r18
    3190:	3f 93       	push	r19
    3192:	4f 93       	push	r20
    3194:	5f 93       	push	r21
    3196:	6f 93       	push	r22
    3198:	7f 93       	push	r23
    319a:	8f 93       	push	r24
    319c:	9f 93       	push	r25
    319e:	af 93       	push	r26
    31a0:	bf 93       	push	r27
    31a2:	ef 93       	push	r30
    31a4:	ff 93       	push	r31
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackFuncPtr != NULL_PTR)
    31ae:	80 91 f8 01 	lds	r24, 0x01F8
    31b2:	90 91 f9 01 	lds	r25, 0x01F9
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	29 f0       	breq	.+10     	; 0x31c4 <__vector_9+0x40>
	{
		(*g_timer1CallBackFuncPtr)();
    31ba:	e0 91 f8 01 	lds	r30, 0x01F8
    31be:	f0 91 f9 01 	lds	r31, 0x01F9
    31c2:	09 95       	icall
	}
}
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	ff 91       	pop	r31
    31ca:	ef 91       	pop	r30
    31cc:	bf 91       	pop	r27
    31ce:	af 91       	pop	r26
    31d0:	9f 91       	pop	r25
    31d2:	8f 91       	pop	r24
    31d4:	7f 91       	pop	r23
    31d6:	6f 91       	pop	r22
    31d8:	5f 91       	pop	r21
    31da:	4f 91       	pop	r20
    31dc:	3f 91       	pop	r19
    31de:	2f 91       	pop	r18
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	0f 90       	pop	r0
    31e6:	1f 90       	pop	r1
    31e8:	18 95       	reti

000031ea <__vector_7>:

/*interrupt service routine of timer1 in compare mode*/
ISR(TIMER1_COMPA_vect)
{
    31ea:	1f 92       	push	r1
    31ec:	0f 92       	push	r0
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	0f 92       	push	r0
    31f2:	11 24       	eor	r1, r1
    31f4:	2f 93       	push	r18
    31f6:	3f 93       	push	r19
    31f8:	4f 93       	push	r20
    31fa:	5f 93       	push	r21
    31fc:	6f 93       	push	r22
    31fe:	7f 93       	push	r23
    3200:	8f 93       	push	r24
    3202:	9f 93       	push	r25
    3204:	af 93       	push	r26
    3206:	bf 93       	push	r27
    3208:	ef 93       	push	r30
    320a:	ff 93       	push	r31
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
	if(g_timer1CallBackFuncPtr != NULL_PTR)
    3214:	80 91 f8 01 	lds	r24, 0x01F8
    3218:	90 91 f9 01 	lds	r25, 0x01F9
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	29 f0       	breq	.+10     	; 0x322a <__vector_7+0x40>
	{
		(*g_timer1CallBackFuncPtr)();
    3220:	e0 91 f8 01 	lds	r30, 0x01F8
    3224:	f0 91 f9 01 	lds	r31, 0x01F9
    3228:	09 95       	icall
	}
}
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	ff 91       	pop	r31
    3230:	ef 91       	pop	r30
    3232:	bf 91       	pop	r27
    3234:	af 91       	pop	r26
    3236:	9f 91       	pop	r25
    3238:	8f 91       	pop	r24
    323a:	7f 91       	pop	r23
    323c:	6f 91       	pop	r22
    323e:	5f 91       	pop	r21
    3240:	4f 91       	pop	r20
    3242:	3f 91       	pop	r19
    3244:	2f 91       	pop	r18
    3246:	0f 90       	pop	r0
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	0f 90       	pop	r0
    324c:	1f 90       	pop	r1
    324e:	18 95       	reti

00003250 <__vector_5>:

/*interrupt service routine of timer2 in normal mode*/
ISR(TIMER2_OVF_vect)
{
    3250:	1f 92       	push	r1
    3252:	0f 92       	push	r0
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	0f 92       	push	r0
    3258:	11 24       	eor	r1, r1
    325a:	2f 93       	push	r18
    325c:	3f 93       	push	r19
    325e:	4f 93       	push	r20
    3260:	5f 93       	push	r21
    3262:	6f 93       	push	r22
    3264:	7f 93       	push	r23
    3266:	8f 93       	push	r24
    3268:	9f 93       	push	r25
    326a:	af 93       	push	r26
    326c:	bf 93       	push	r27
    326e:	ef 93       	push	r30
    3270:	ff 93       	push	r31
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackFuncPtr != NULL_PTR)
    327a:	80 91 fa 01 	lds	r24, 0x01FA
    327e:	90 91 fb 01 	lds	r25, 0x01FB
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	29 f0       	breq	.+10     	; 0x3290 <__vector_5+0x40>
	{
		(*g_timer2CallBackFuncPtr)();
    3286:	e0 91 fa 01 	lds	r30, 0x01FA
    328a:	f0 91 fb 01 	lds	r31, 0x01FB
    328e:	09 95       	icall
	}
}
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	ff 91       	pop	r31
    3296:	ef 91       	pop	r30
    3298:	bf 91       	pop	r27
    329a:	af 91       	pop	r26
    329c:	9f 91       	pop	r25
    329e:	8f 91       	pop	r24
    32a0:	7f 91       	pop	r23
    32a2:	6f 91       	pop	r22
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

000032b6 <__vector_4>:

/*interrupt service routine of timer2 in compare mode*/
ISR(TIMER2_COMP_vect)
{
    32b6:	1f 92       	push	r1
    32b8:	0f 92       	push	r0
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	0f 92       	push	r0
    32be:	11 24       	eor	r1, r1
    32c0:	2f 93       	push	r18
    32c2:	3f 93       	push	r19
    32c4:	4f 93       	push	r20
    32c6:	5f 93       	push	r21
    32c8:	6f 93       	push	r22
    32ca:	7f 93       	push	r23
    32cc:	8f 93       	push	r24
    32ce:	9f 93       	push	r25
    32d0:	af 93       	push	r26
    32d2:	bf 93       	push	r27
    32d4:	ef 93       	push	r30
    32d6:	ff 93       	push	r31
    32d8:	df 93       	push	r29
    32da:	cf 93       	push	r28
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
	if(g_timer2CallBackFuncPtr != NULL_PTR)
    32e0:	80 91 fa 01 	lds	r24, 0x01FA
    32e4:	90 91 fb 01 	lds	r25, 0x01FB
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	29 f0       	breq	.+10     	; 0x32f6 <__vector_4+0x40>
	{
		(*g_timer2CallBackFuncPtr)();
    32ec:	e0 91 fa 01 	lds	r30, 0x01FA
    32f0:	f0 91 fb 01 	lds	r31, 0x01FB
    32f4:	09 95       	icall
	}
}
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	ff 91       	pop	r31
    32fc:	ef 91       	pop	r30
    32fe:	bf 91       	pop	r27
    3300:	af 91       	pop	r26
    3302:	9f 91       	pop	r25
    3304:	8f 91       	pop	r24
    3306:	7f 91       	pop	r23
    3308:	6f 91       	pop	r22
    330a:	5f 91       	pop	r21
    330c:	4f 91       	pop	r20
    330e:	3f 91       	pop	r19
    3310:	2f 91       	pop	r18
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	0f 90       	pop	r0
    3318:	1f 90       	pop	r1
    331a:	18 95       	reti

0000331c <Timer_init>:

/*Function to initialize the Timer driver*/
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	00 d0       	rcall	.+0      	; 0x3322 <Timer_init+0x6>
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9a 83       	std	Y+2, r25	; 0x02
    3328:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_ID == TIMER0)
    332a:	e9 81       	ldd	r30, Y+1	; 0x01
    332c:	fa 81       	ldd	r31, Y+2	; 0x02
    332e:	84 81       	ldd	r24, Z+4	; 0x04
    3330:	88 23       	and	r24, r24
    3332:	09 f0       	breq	.+2      	; 0x3336 <Timer_init+0x1a>
    3334:	48 c0       	rjmp	.+144    	; 0x33c6 <Timer_init+0xaa>
	{
		SET_BIT(TCCR0,FOC0);
    3336:	a3 e5       	ldi	r26, 0x53	; 83
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	e3 e5       	ldi	r30, 0x53	; 83
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	80 68       	ori	r24, 0x80	; 128
    3342:	8c 93       	st	X, r24

		if(Config_Ptr->timer_mode == NORMAL_MODE)
    3344:	e9 81       	ldd	r30, Y+1	; 0x01
    3346:	fa 81       	ldd	r31, Y+2	; 0x02
    3348:	86 81       	ldd	r24, Z+6	; 0x06
    334a:	88 23       	and	r24, r24
    334c:	51 f4       	brne	.+20     	; 0x3362 <Timer_init+0x46>
		{
			SET_BIT(TIMSK,TOIE0);
    334e:	a9 e5       	ldi	r26, 0x59	; 89
    3350:	b0 e0       	ldi	r27, 0x00	; 0
    3352:	e9 e5       	ldi	r30, 0x59	; 89
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	81 60       	ori	r24, 0x01	; 1
    335a:	8c 93       	st	X, r24

			g_timer0Mode = NORMAL_MODE;
    335c:	10 92 fc 01 	sts	0x01FC, r1
    3360:	1d c0       	rjmp	.+58     	; 0x339c <Timer_init+0x80>
		}
		else if(Config_Ptr->timer_mode == COMPARE_MODE)
    3362:	e9 81       	ldd	r30, Y+1	; 0x01
    3364:	fa 81       	ldd	r31, Y+2	; 0x02
    3366:	86 81       	ldd	r24, Z+6	; 0x06
    3368:	81 30       	cpi	r24, 0x01	; 1
    336a:	c1 f4       	brne	.+48     	; 0x339c <Timer_init+0x80>
		{
			SET_BIT(TCCR0,WGM01);
    336c:	a3 e5       	ldi	r26, 0x53	; 83
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	e3 e5       	ldi	r30, 0x53	; 83
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	80 81       	ld	r24, Z
    3376:	88 60       	ori	r24, 0x08	; 8
    3378:	8c 93       	st	X, r24

			OCR0 = Config_Ptr->timer_compare_MatchValue;
    337a:	ac e5       	ldi	r26, 0x5C	; 92
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e9 81       	ldd	r30, Y+1	; 0x01
    3380:	fa 81       	ldd	r31, Y+2	; 0x02
    3382:	82 81       	ldd	r24, Z+2	; 0x02
    3384:	93 81       	ldd	r25, Z+3	; 0x03
    3386:	8c 93       	st	X, r24

			SET_BIT(TIMSK,OCIE0);
    3388:	a9 e5       	ldi	r26, 0x59	; 89
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	e9 e5       	ldi	r30, 0x59	; 89
    338e:	f0 e0       	ldi	r31, 0x00	; 0
    3390:	80 81       	ld	r24, Z
    3392:	82 60       	ori	r24, 0x02	; 2
    3394:	8c 93       	st	X, r24

			g_timer0Mode = COMPARE_MODE;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	80 93 fc 01 	sts	0x01FC, r24
		}

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    339c:	a3 e5       	ldi	r26, 0x53	; 83
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	e3 e5       	ldi	r30, 0x53	; 83
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	80 81       	ld	r24, Z
    33a6:	98 2f       	mov	r25, r24
    33a8:	98 7f       	andi	r25, 0xF8	; 248
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	85 81       	ldd	r24, Z+5	; 0x05
    33b0:	87 70       	andi	r24, 0x07	; 7
    33b2:	89 2b       	or	r24, r25
    33b4:	8c 93       	st	X, r24

		TCNT0 = Config_Ptr->timer_InitialValue;
    33b6:	a2 e5       	ldi	r26, 0x52	; 82
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	e9 81       	ldd	r30, Y+1	; 0x01
    33bc:	fa 81       	ldd	r31, Y+2	; 0x02
    33be:	80 81       	ld	r24, Z
    33c0:	91 81       	ldd	r25, Z+1	; 0x01
    33c2:	8c 93       	st	X, r24
    33c4:	a6 c0       	rjmp	.+332    	; 0x3512 <Timer_init+0x1f6>
	}

	else if(Config_Ptr->timer_ID == TIMER1)
    33c6:	e9 81       	ldd	r30, Y+1	; 0x01
    33c8:	fa 81       	ldd	r31, Y+2	; 0x02
    33ca:	84 81       	ldd	r24, Z+4	; 0x04
    33cc:	81 30       	cpi	r24, 0x01	; 1
    33ce:	09 f0       	breq	.+2      	; 0x33d2 <Timer_init+0xb6>
    33d0:	53 c0       	rjmp	.+166    	; 0x3478 <Timer_init+0x15c>
	{
		SET_BIT(TCCR1A,FOC1A);
    33d2:	af e4       	ldi	r26, 0x4F	; 79
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	ef e4       	ldi	r30, 0x4F	; 79
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	88 60       	ori	r24, 0x08	; 8
    33de:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,FOC1B);
    33e0:	af e4       	ldi	r26, 0x4F	; 79
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	ef e4       	ldi	r30, 0x4F	; 79
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	84 60       	ori	r24, 0x04	; 4
    33ec:	8c 93       	st	X, r24

		if(Config_Ptr->timer_mode == NORMAL_MODE)
    33ee:	e9 81       	ldd	r30, Y+1	; 0x01
    33f0:	fa 81       	ldd	r31, Y+2	; 0x02
    33f2:	86 81       	ldd	r24, Z+6	; 0x06
    33f4:	88 23       	and	r24, r24
    33f6:	51 f4       	brne	.+20     	; 0x340c <Timer_init+0xf0>
		{
			SET_BIT(TIMSK,TOIE1);
    33f8:	a9 e5       	ldi	r26, 0x59	; 89
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e9 e5       	ldi	r30, 0x59	; 89
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	84 60       	ori	r24, 0x04	; 4
    3404:	8c 93       	st	X, r24

			g_timer1Mode = NORMAL_MODE;
    3406:	10 92 fd 01 	sts	0x01FD, r1
    340a:	1f c0       	rjmp	.+62     	; 0x344a <Timer_init+0x12e>
		}
		else if(Config_Ptr->timer_mode == COMPARE_MODE)
    340c:	e9 81       	ldd	r30, Y+1	; 0x01
    340e:	fa 81       	ldd	r31, Y+2	; 0x02
    3410:	86 81       	ldd	r24, Z+6	; 0x06
    3412:	81 30       	cpi	r24, 0x01	; 1
    3414:	d1 f4       	brne	.+52     	; 0x344a <Timer_init+0x12e>
		{
			SET_BIT(TCCR1B,WGM12);
    3416:	ae e4       	ldi	r26, 0x4E	; 78
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	ee e4       	ldi	r30, 0x4E	; 78
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	88 60       	ori	r24, 0x08	; 8
    3422:	8c 93       	st	X, r24

			/*Using channel A*/
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    3424:	aa e4       	ldi	r26, 0x4A	; 74
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	e9 81       	ldd	r30, Y+1	; 0x01
    342a:	fa 81       	ldd	r31, Y+2	; 0x02
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	93 81       	ldd	r25, Z+3	; 0x03
    3430:	11 96       	adiw	r26, 0x01	; 1
    3432:	9c 93       	st	X, r25
    3434:	8e 93       	st	-X, r24

			SET_BIT(TIMSK,OCIE1A);
    3436:	a9 e5       	ldi	r26, 0x59	; 89
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e9 e5       	ldi	r30, 0x59	; 89
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	80 61       	ori	r24, 0x10	; 16
    3442:	8c 93       	st	X, r24

			g_timer1Mode = COMPARE_MODE;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	80 93 fd 01 	sts	0x01FD, r24
		}

		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    344a:	ae e4       	ldi	r26, 0x4E	; 78
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	ee e4       	ldi	r30, 0x4E	; 78
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	98 2f       	mov	r25, r24
    3456:	98 7f       	andi	r25, 0xF8	; 248
    3458:	e9 81       	ldd	r30, Y+1	; 0x01
    345a:	fa 81       	ldd	r31, Y+2	; 0x02
    345c:	85 81       	ldd	r24, Z+5	; 0x05
    345e:	87 70       	andi	r24, 0x07	; 7
    3460:	89 2b       	or	r24, r25
    3462:	8c 93       	st	X, r24

		TCNT1 = Config_Ptr->timer_InitialValue;
    3464:	ac e4       	ldi	r26, 0x4C	; 76
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	e9 81       	ldd	r30, Y+1	; 0x01
    346a:	fa 81       	ldd	r31, Y+2	; 0x02
    346c:	80 81       	ld	r24, Z
    346e:	91 81       	ldd	r25, Z+1	; 0x01
    3470:	11 96       	adiw	r26, 0x01	; 1
    3472:	9c 93       	st	X, r25
    3474:	8e 93       	st	-X, r24
    3476:	4d c0       	rjmp	.+154    	; 0x3512 <Timer_init+0x1f6>
	}

	else if(Config_Ptr->timer_ID == TIMER2)
    3478:	e9 81       	ldd	r30, Y+1	; 0x01
    347a:	fa 81       	ldd	r31, Y+2	; 0x02
    347c:	84 81       	ldd	r24, Z+4	; 0x04
    347e:	82 30       	cpi	r24, 0x02	; 2
    3480:	09 f0       	breq	.+2      	; 0x3484 <Timer_init+0x168>
    3482:	47 c0       	rjmp	.+142    	; 0x3512 <Timer_init+0x1f6>
	{
		SET_BIT(TCCR2,FOC2);
    3484:	a5 e4       	ldi	r26, 0x45	; 69
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e5 e4       	ldi	r30, 0x45	; 69
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	80 68       	ori	r24, 0x80	; 128
    3490:	8c 93       	st	X, r24

		if(Config_Ptr->timer_mode == NORMAL_MODE)
    3492:	e9 81       	ldd	r30, Y+1	; 0x01
    3494:	fa 81       	ldd	r31, Y+2	; 0x02
    3496:	86 81       	ldd	r24, Z+6	; 0x06
    3498:	88 23       	and	r24, r24
    349a:	51 f4       	brne	.+20     	; 0x34b0 <Timer_init+0x194>
		{
			SET_BIT(TIMSK,TOIE2);
    349c:	a9 e5       	ldi	r26, 0x59	; 89
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e9 e5       	ldi	r30, 0x59	; 89
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	80 64       	ori	r24, 0x40	; 64
    34a8:	8c 93       	st	X, r24

			g_timer2Mode = NORMAL_MODE;
    34aa:	10 92 fe 01 	sts	0x01FE, r1
    34ae:	1d c0       	rjmp	.+58     	; 0x34ea <Timer_init+0x1ce>
		}
		else if(Config_Ptr->timer_mode == COMPARE_MODE)
    34b0:	e9 81       	ldd	r30, Y+1	; 0x01
    34b2:	fa 81       	ldd	r31, Y+2	; 0x02
    34b4:	86 81       	ldd	r24, Z+6	; 0x06
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	c1 f4       	brne	.+48     	; 0x34ea <Timer_init+0x1ce>
		{
			SET_BIT(TCCR2,WGM21);
    34ba:	a5 e4       	ldi	r26, 0x45	; 69
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	e5 e4       	ldi	r30, 0x45	; 69
    34c0:	f0 e0       	ldi	r31, 0x00	; 0
    34c2:	80 81       	ld	r24, Z
    34c4:	88 60       	ori	r24, 0x08	; 8
    34c6:	8c 93       	st	X, r24

			OCR2 = Config_Ptr->timer_compare_MatchValue;
    34c8:	a3 e4       	ldi	r26, 0x43	; 67
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	e9 81       	ldd	r30, Y+1	; 0x01
    34ce:	fa 81       	ldd	r31, Y+2	; 0x02
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	8c 93       	st	X, r24

			SET_BIT(TIMSK,OCIE2);
    34d6:	a9 e5       	ldi	r26, 0x59	; 89
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	e9 e5       	ldi	r30, 0x59	; 89
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	80 81       	ld	r24, Z
    34e0:	80 68       	ori	r24, 0x80	; 128
    34e2:	8c 93       	st	X, r24

			g_timer2Mode = COMPARE_MODE;
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	80 93 fe 01 	sts	0x01FE, r24
		}

		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock & 0x07);
    34ea:	a5 e4       	ldi	r26, 0x45	; 69
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	e5 e4       	ldi	r30, 0x45	; 69
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	98 2f       	mov	r25, r24
    34f6:	98 7f       	andi	r25, 0xF8	; 248
    34f8:	e9 81       	ldd	r30, Y+1	; 0x01
    34fa:	fa 81       	ldd	r31, Y+2	; 0x02
    34fc:	85 81       	ldd	r24, Z+5	; 0x05
    34fe:	87 70       	andi	r24, 0x07	; 7
    3500:	89 2b       	or	r24, r25
    3502:	8c 93       	st	X, r24

		TCNT2 = Config_Ptr->timer_InitialValue;
    3504:	a4 e4       	ldi	r26, 0x44	; 68
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	e9 81       	ldd	r30, Y+1	; 0x01
    350a:	fa 81       	ldd	r31, Y+2	; 0x02
    350c:	80 81       	ld	r24, Z
    350e:	91 81       	ldd	r25, Z+1	; 0x01
    3510:	8c 93       	st	X, r24
	else
	{

	}

}
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	08 95       	ret

0000351c <Timer_deInit>:

/*Function to disable the Timer via Timer_ID*/
void Timer_deInit(Timer_ID_Type timer_type)
{
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	0f 92       	push	r0
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	89 83       	std	Y+1, r24	; 0x01
	if(timer_type == TIMER0)
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	88 23       	and	r24, r24
    352c:	41 f4       	brne	.+16     	; 0x353e <Timer_deInit+0x22>
	{
		TCCR0 = (TCCR0 & 0xF8) | (NO_CLOCK & 0x07); // check this
    352e:	a3 e5       	ldi	r26, 0x53	; 83
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e3 e5       	ldi	r30, 0x53	; 83
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	88 7f       	andi	r24, 0xF8	; 248
    353a:	8c 93       	st	X, r24
    353c:	15 c0       	rjmp	.+42     	; 0x3568 <Timer_deInit+0x4c>
	}
	else if(timer_type == TIMER1)
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	81 30       	cpi	r24, 0x01	; 1
    3542:	41 f4       	brne	.+16     	; 0x3554 <Timer_deInit+0x38>
	{
		TCCR1B = (TCCR1B & 0xF8) | (NO_CLOCK & 0x07); // check this
    3544:	ae e4       	ldi	r26, 0x4E	; 78
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	ee e4       	ldi	r30, 0x4E	; 78
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	88 7f       	andi	r24, 0xF8	; 248
    3550:	8c 93       	st	X, r24
    3552:	0a c0       	rjmp	.+20     	; 0x3568 <Timer_deInit+0x4c>
	}
	else if(timer_type == TIMER2)
    3554:	89 81       	ldd	r24, Y+1	; 0x01
    3556:	82 30       	cpi	r24, 0x02	; 2
    3558:	39 f4       	brne	.+14     	; 0x3568 <Timer_deInit+0x4c>
	{
		TCCR2 = (TCCR2 & 0xF8) | (NO_CLOCK & 0x07); // check this
    355a:	a5 e4       	ldi	r26, 0x45	; 69
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	e5 e4       	ldi	r30, 0x45	; 69
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	88 7f       	andi	r24, 0xF8	; 248
    3566:	8c 93       	st	X, r24
	else
	{

	}

}
    3568:	0f 90       	pop	r0
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <Timer_setCallBack>:

}*/

/*Function to set the Call Back function address to the required Timer.*/
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	00 d0       	rcall	.+0      	; 0x3576 <Timer_setCallBack+0x6>
    3576:	0f 92       	push	r0
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
    3580:	6b 83       	std	Y+3, r22	; 0x03
	if(a_timer_ID == TIMER0)
    3582:	8b 81       	ldd	r24, Y+3	; 0x03
    3584:	88 23       	and	r24, r24
    3586:	39 f4       	brne	.+14     	; 0x3596 <Timer_setCallBack+0x26>
	{
		g_timer0CallBackFuncPtr = a_ptr;
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	9a 81       	ldd	r25, Y+2	; 0x02
    358c:	90 93 f7 01 	sts	0x01F7, r25
    3590:	80 93 f6 01 	sts	0x01F6, r24
    3594:	13 c0       	rjmp	.+38     	; 0x35bc <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID == TIMER1)
    3596:	8b 81       	ldd	r24, Y+3	; 0x03
    3598:	81 30       	cpi	r24, 0x01	; 1
    359a:	39 f4       	brne	.+14     	; 0x35aa <Timer_setCallBack+0x3a>
	{
		g_timer1CallBackFuncPtr = a_ptr;
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	90 93 f9 01 	sts	0x01F9, r25
    35a4:	80 93 f8 01 	sts	0x01F8, r24
    35a8:	09 c0       	rjmp	.+18     	; 0x35bc <Timer_setCallBack+0x4c>
	}
	else if(a_timer_ID == TIMER2)
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	82 30       	cpi	r24, 0x02	; 2
    35ae:	31 f4       	brne	.+12     	; 0x35bc <Timer_setCallBack+0x4c>
	{
		g_timer2CallBackFuncPtr = a_ptr;
    35b0:	89 81       	ldd	r24, Y+1	; 0x01
    35b2:	9a 81       	ldd	r25, Y+2	; 0x02
    35b4:	90 93 fb 01 	sts	0x01FB, r25
    35b8:	80 93 fa 01 	sts	0x01FA, r24
	}
	else
	{

	}
}
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <UART_init>:
#include "uart.h"
#include "avr/io.h"
#include "common_macros.h"

void UART_init(const UART_ConfigType * Config_Ptr)
{
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <UART_init+0x6>
    35ce:	00 d0       	rcall	.+0      	; 0x35d0 <UART_init+0x8>
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	9c 83       	std	Y+4, r25	; 0x04
    35d6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    35d8:	1a 82       	std	Y+2, r1	; 0x02
    35da:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35dc:	eb e2       	ldi	r30, 0x2B	; 43
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	82 e0       	ldi	r24, 0x02	; 2
    35e2:	80 83       	st	Z, r24

	/*Receiver and transmitter enable*/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    35e4:	ea e2       	ldi	r30, 0x2A	; 42
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	88 e1       	ldi	r24, 0x18	; 24
    35ea:	80 83       	st	Z, r24

	/*URSEL must be set to write in UCSRC*/
	SET_BIT(UCSRC,URSEL);
    35ec:	a0 e4       	ldi	r26, 0x40	; 64
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e0 e4       	ldi	r30, 0x40	; 64
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	80 68       	ori	r24, 0x80	; 128
    35f8:	8c 93       	st	X, r24

	/*choose the character size*/
	if(Config_Ptr->bit_data == CharacterSize_9bit)
    35fa:	eb 81       	ldd	r30, Y+3	; 0x03
    35fc:	fc 81       	ldd	r31, Y+4	; 0x04
    35fe:	80 81       	ld	r24, Z
    3600:	87 30       	cpi	r24, 0x07	; 7
    3602:	b1 f4       	brne	.+44     	; 0x3630 <UART_init+0x68>
	{
		SET_BIT(UCSRB,UCSZ2);
    3604:	aa e2       	ldi	r26, 0x2A	; 42
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	ea e2       	ldi	r30, 0x2A	; 42
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	84 60       	ori	r24, 0x04	; 4
    3610:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ1);
    3612:	aa e2       	ldi	r26, 0x2A	; 42
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	ea e2       	ldi	r30, 0x2A	; 42
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	84 60       	ori	r24, 0x04	; 4
    361e:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ0);
    3620:	aa e2       	ldi	r26, 0x2A	; 42
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	ea e2       	ldi	r30, 0x2A	; 42
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	82 60       	ori	r24, 0x02	; 2
    362c:	8c 93       	st	X, r24
    362e:	56 c0       	rjmp	.+172    	; 0x36dc <UART_init+0x114>

	}
	else
	{
		CLEAR_BIT(UCSRB,UCSZ2);
    3630:	aa e2       	ldi	r26, 0x2A	; 42
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	ea e2       	ldi	r30, 0x2A	; 42
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	8b 7f       	andi	r24, 0xFB	; 251
    363c:	8c 93       	st	X, r24

		if(Config_Ptr->bit_data == CharacterSize_5bit)
    363e:	eb 81       	ldd	r30, Y+3	; 0x03
    3640:	fc 81       	ldd	r31, Y+4	; 0x04
    3642:	80 81       	ld	r24, Z
    3644:	88 23       	and	r24, r24
    3646:	79 f4       	brne	.+30     	; 0x3666 <UART_init+0x9e>
		{
			CLEAR_BIT(UCSRB,UCSZ1);
    3648:	aa e2       	ldi	r26, 0x2A	; 42
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	ea e2       	ldi	r30, 0x2A	; 42
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	8b 7f       	andi	r24, 0xFB	; 251
    3654:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,UCSZ0);
    3656:	aa e2       	ldi	r26, 0x2A	; 42
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	ea e2       	ldi	r30, 0x2A	; 42
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	8d 7f       	andi	r24, 0xFD	; 253
    3662:	8c 93       	st	X, r24
    3664:	3b c0       	rjmp	.+118    	; 0x36dc <UART_init+0x114>
		}
		else if(Config_Ptr->bit_data == CharacterSize_6bit)
    3666:	eb 81       	ldd	r30, Y+3	; 0x03
    3668:	fc 81       	ldd	r31, Y+4	; 0x04
    366a:	80 81       	ld	r24, Z
    366c:	81 30       	cpi	r24, 0x01	; 1
    366e:	79 f4       	brne	.+30     	; 0x368e <UART_init+0xc6>
		{
			CLEAR_BIT(UCSRB,UCSZ1);
    3670:	aa e2       	ldi	r26, 0x2A	; 42
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	ea e2       	ldi	r30, 0x2A	; 42
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	80 81       	ld	r24, Z
    367a:	8b 7f       	andi	r24, 0xFB	; 251
    367c:	8c 93       	st	X, r24
			SET_BIT(UCSRB,UCSZ0);
    367e:	aa e2       	ldi	r26, 0x2A	; 42
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	ea e2       	ldi	r30, 0x2A	; 42
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	82 60       	ori	r24, 0x02	; 2
    368a:	8c 93       	st	X, r24
    368c:	27 c0       	rjmp	.+78     	; 0x36dc <UART_init+0x114>
		}
		else if(Config_Ptr->bit_data == CharacterSize_7bit)
    368e:	eb 81       	ldd	r30, Y+3	; 0x03
    3690:	fc 81       	ldd	r31, Y+4	; 0x04
    3692:	80 81       	ld	r24, Z
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	79 f4       	brne	.+30     	; 0x36b6 <UART_init+0xee>
		{
			SET_BIT(UCSRB,UCSZ1);
    3698:	aa e2       	ldi	r26, 0x2A	; 42
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	ea e2       	ldi	r30, 0x2A	; 42
    369e:	f0 e0       	ldi	r31, 0x00	; 0
    36a0:	80 81       	ld	r24, Z
    36a2:	84 60       	ori	r24, 0x04	; 4
    36a4:	8c 93       	st	X, r24
			CLEAR_BIT(UCSRB,UCSZ0);
    36a6:	aa e2       	ldi	r26, 0x2A	; 42
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	ea e2       	ldi	r30, 0x2A	; 42
    36ac:	f0 e0       	ldi	r31, 0x00	; 0
    36ae:	80 81       	ld	r24, Z
    36b0:	8d 7f       	andi	r24, 0xFD	; 253
    36b2:	8c 93       	st	X, r24
    36b4:	13 c0       	rjmp	.+38     	; 0x36dc <UART_init+0x114>
		}
		else if(Config_Ptr->bit_data == CharacterSize_8bit)
    36b6:	eb 81       	ldd	r30, Y+3	; 0x03
    36b8:	fc 81       	ldd	r31, Y+4	; 0x04
    36ba:	80 81       	ld	r24, Z
    36bc:	83 30       	cpi	r24, 0x03	; 3
    36be:	71 f4       	brne	.+28     	; 0x36dc <UART_init+0x114>
		{
			SET_BIT(UCSRB,UCSZ1);
    36c0:	aa e2       	ldi	r26, 0x2A	; 42
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	ea e2       	ldi	r30, 0x2A	; 42
    36c6:	f0 e0       	ldi	r31, 0x00	; 0
    36c8:	80 81       	ld	r24, Z
    36ca:	84 60       	ori	r24, 0x04	; 4
    36cc:	8c 93       	st	X, r24
			SET_BIT(UCSRB,UCSZ0);
    36ce:	aa e2       	ldi	r26, 0x2A	; 42
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	ea e2       	ldi	r30, 0x2A	; 42
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	82 60       	ori	r24, 0x02	; 2
    36da:	8c 93       	st	X, r24

		}
	}

	/*Clear UMSEL for Asynchronous Operation*/
	CLEAR_BIT(UCSRC,UMSEL);
    36dc:	a0 e4       	ldi	r26, 0x40	; 64
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e0 e4       	ldi	r30, 0x40	; 64
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	8f 7b       	andi	r24, 0xBF	; 191
    36e8:	8c 93       	st	X, r24

	/*choose the parity*/
	if(Config_Ptr->parity == DisabledParity)
    36ea:	eb 81       	ldd	r30, Y+3	; 0x03
    36ec:	fc 81       	ldd	r31, Y+4	; 0x04
    36ee:	81 81       	ldd	r24, Z+1	; 0x01
    36f0:	88 23       	and	r24, r24
    36f2:	79 f4       	brne	.+30     	; 0x3712 <UART_init+0x14a>
	{
		CLEAR_BIT(UCSRC,UPM1);
    36f4:	a0 e4       	ldi	r26, 0x40	; 64
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	e0 e4       	ldi	r30, 0x40	; 64
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	80 81       	ld	r24, Z
    36fe:	8f 7d       	andi	r24, 0xDF	; 223
    3700:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM0);
    3702:	a0 e4       	ldi	r26, 0x40	; 64
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	e0 e4       	ldi	r30, 0x40	; 64
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	80 81       	ld	r24, Z
    370c:	8f 7e       	andi	r24, 0xEF	; 239
    370e:	8c 93       	st	X, r24
    3710:	27 c0       	rjmp	.+78     	; 0x3760 <UART_init+0x198>
	}
	else if(Config_Ptr->parity == EvenParity)
    3712:	eb 81       	ldd	r30, Y+3	; 0x03
    3714:	fc 81       	ldd	r31, Y+4	; 0x04
    3716:	81 81       	ldd	r24, Z+1	; 0x01
    3718:	82 30       	cpi	r24, 0x02	; 2
    371a:	79 f4       	brne	.+30     	; 0x373a <UART_init+0x172>
	{
		SET_BIT(UCSRC,UPM1);
    371c:	a0 e4       	ldi	r26, 0x40	; 64
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e0 e4       	ldi	r30, 0x40	; 64
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	80 62       	ori	r24, 0x20	; 32
    3728:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM0);
    372a:	a0 e4       	ldi	r26, 0x40	; 64
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	e0 e4       	ldi	r30, 0x40	; 64
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	8f 7e       	andi	r24, 0xEF	; 239
    3736:	8c 93       	st	X, r24
    3738:	13 c0       	rjmp	.+38     	; 0x3760 <UART_init+0x198>
	}
	else if(Config_Ptr->parity == OddParity)
    373a:	eb 81       	ldd	r30, Y+3	; 0x03
    373c:	fc 81       	ldd	r31, Y+4	; 0x04
    373e:	81 81       	ldd	r24, Z+1	; 0x01
    3740:	83 30       	cpi	r24, 0x03	; 3
    3742:	71 f4       	brne	.+28     	; 0x3760 <UART_init+0x198>
	{
		SET_BIT(UCSRC,UPM1);
    3744:	a0 e4       	ldi	r26, 0x40	; 64
    3746:	b0 e0       	ldi	r27, 0x00	; 0
    3748:	e0 e4       	ldi	r30, 0x40	; 64
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	80 81       	ld	r24, Z
    374e:	80 62       	ori	r24, 0x20	; 32
    3750:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM0);
    3752:	a0 e4       	ldi	r26, 0x40	; 64
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	e0 e4       	ldi	r30, 0x40	; 64
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	80 81       	ld	r24, Z
    375c:	80 61       	ori	r24, 0x10	; 16
    375e:	8c 93       	st	X, r24
	{

	}

	/*choose #stopbits*/
	if(Config_Ptr->stop_bit == STOPBIT_1bit)
    3760:	eb 81       	ldd	r30, Y+3	; 0x03
    3762:	fc 81       	ldd	r31, Y+4	; 0x04
    3764:	82 81       	ldd	r24, Z+2	; 0x02
    3766:	88 23       	and	r24, r24
    3768:	41 f4       	brne	.+16     	; 0x377a <UART_init+0x1b2>
	{
		CLEAR_BIT(UCSRC,USBS);
    376a:	a0 e4       	ldi	r26, 0x40	; 64
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	e0 e4       	ldi	r30, 0x40	; 64
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	87 7f       	andi	r24, 0xF7	; 247
    3776:	8c 93       	st	X, r24
    3778:	0c c0       	rjmp	.+24     	; 0x3792 <UART_init+0x1ca>
	}
	else if(Config_Ptr->stop_bit == STOPBIT_2bit)
    377a:	eb 81       	ldd	r30, Y+3	; 0x03
    377c:	fc 81       	ldd	r31, Y+4	; 0x04
    377e:	82 81       	ldd	r24, Z+2	; 0x02
    3780:	81 30       	cpi	r24, 0x01	; 1
    3782:	39 f4       	brne	.+14     	; 0x3792 <UART_init+0x1ca>
	{
		SET_BIT(UCSRC,USBS);
    3784:	a0 e4       	ldi	r26, 0x40	; 64
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	e0 e4       	ldi	r30, 0x40	; 64
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	80 81       	ld	r24, Z
    378e:	88 60       	ori	r24, 0x08	; 8
    3790:	8c 93       	st	X, r24
	{

	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 16UL))) - 1);
    3792:	eb 81       	ldd	r30, Y+3	; 0x03
    3794:	fc 81       	ldd	r31, Y+4	; 0x04
    3796:	83 81       	ldd	r24, Z+3	; 0x03
    3798:	94 81       	ldd	r25, Z+4	; 0x04
    379a:	a5 81       	ldd	r26, Z+5	; 0x05
    379c:	b6 81       	ldd	r27, Z+6	; 0x06
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	aa 1f       	adc	r26, r26
    37a4:	bb 1f       	adc	r27, r27
    37a6:	88 0f       	add	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	aa 1f       	adc	r26, r26
    37ac:	bb 1f       	adc	r27, r27
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	aa 1f       	adc	r26, r26
    37b4:	bb 1f       	adc	r27, r27
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	aa 1f       	adc	r26, r26
    37bc:	bb 1f       	adc	r27, r27
    37be:	9c 01       	movw	r18, r24
    37c0:	ad 01       	movw	r20, r26
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	94 e2       	ldi	r25, 0x24	; 36
    37c6:	a4 ef       	ldi	r26, 0xF4	; 244
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	0e 94 92 1c 	call	0x3924	; 0x3924 <__udivmodsi4>
    37d2:	da 01       	movw	r26, r20
    37d4:	c9 01       	movw	r24, r18
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	9a 83       	std	Y+2, r25	; 0x02
    37da:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    37dc:	e0 e4       	ldi	r30, 0x40	; 64
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	9a 81       	ldd	r25, Y+2	; 0x02
    37e4:	89 2f       	mov	r24, r25
    37e6:	99 27       	eor	r25, r25
    37e8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    37ea:	e9 e2       	ldi	r30, 0x29	; 41
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	80 83       	st	Z, r24
}
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	cf 91       	pop	r28
    37fc:	df 91       	pop	r29
    37fe:	08 95       	ret

00003800 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	0f 92       	push	r0
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    380c:	eb e2       	ldi	r30, 0x2B	; 43
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	80 81       	ld	r24, Z
    3812:	88 2f       	mov	r24, r24
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	80 72       	andi	r24, 0x20	; 32
    3818:	90 70       	andi	r25, 0x00	; 0
    381a:	00 97       	sbiw	r24, 0x00	; 0
    381c:	b9 f3       	breq	.-18     	; 0x380c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    381e:	ec e2       	ldi	r30, 0x2C	; 44
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3826:	0f 90       	pop	r0
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3836:	eb e2       	ldi	r30, 0x2B	; 43
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	80 81       	ld	r24, Z
    383c:	88 23       	and	r24, r24
    383e:	dc f7       	brge	.-10     	; 0x3836 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3840:	ec e2       	ldi	r30, 0x2C	; 44
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
}
    3846:	cf 91       	pop	r28
    3848:	df 91       	pop	r29
    384a:	08 95       	ret

0000384c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	00 d0       	rcall	.+0      	; 0x3852 <UART_sendString+0x6>
    3852:	0f 92       	push	r0
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	9b 83       	std	Y+3, r25	; 0x03
    385a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    385c:	19 82       	std	Y+1, r1	; 0x01
    385e:	0e c0       	rjmp	.+28     	; 0x387c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	28 2f       	mov	r18, r24
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	9b 81       	ldd	r25, Y+3	; 0x03
    386a:	fc 01       	movw	r30, r24
    386c:	e2 0f       	add	r30, r18
    386e:	f3 1f       	adc	r31, r19
    3870:	80 81       	ld	r24, Z
    3872:	0e 94 00 1c 	call	0x3800	; 0x3800 <UART_sendByte>
		i++;
    3876:	89 81       	ldd	r24, Y+1	; 0x01
    3878:	8f 5f       	subi	r24, 0xFF	; 255
    387a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	28 2f       	mov	r18, r24
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	9b 81       	ldd	r25, Y+3	; 0x03
    3886:	fc 01       	movw	r30, r24
    3888:	e2 0f       	add	r30, r18
    388a:	f3 1f       	adc	r31, r19
    388c:	80 81       	ld	r24, Z
    388e:	88 23       	and	r24, r24
    3890:	39 f7       	brne	.-50     	; 0x3860 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	00 d0       	rcall	.+0      	; 0x38a8 <UART_receiveString+0xa>
    38a8:	0f 92       	push	r0
    38aa:	cd b7       	in	r28, 0x3d	; 61
    38ac:	de b7       	in	r29, 0x3e	; 62
    38ae:	9b 83       	std	Y+3, r25	; 0x03
    38b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    38b2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    38b4:	89 81       	ldd	r24, Y+1	; 0x01
    38b6:	28 2f       	mov	r18, r24
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	9b 81       	ldd	r25, Y+3	; 0x03
    38be:	8c 01       	movw	r16, r24
    38c0:	02 0f       	add	r16, r18
    38c2:	13 1f       	adc	r17, r19
    38c4:	0e 94 17 1c 	call	0x382e	; 0x382e <UART_recieveByte>
    38c8:	f8 01       	movw	r30, r16
    38ca:	80 83       	st	Z, r24
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	8f 5f       	subi	r24, 0xFF	; 255
    38d2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	28 2f       	mov	r18, r24
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	8a 81       	ldd	r24, Y+2	; 0x02
    38dc:	9b 81       	ldd	r25, Y+3	; 0x03
    38de:	8c 01       	movw	r16, r24
    38e0:	02 0f       	add	r16, r18
    38e2:	13 1f       	adc	r17, r19
    38e4:	0e 94 17 1c 	call	0x382e	; 0x382e <UART_recieveByte>
    38e8:	f8 01       	movw	r30, r16
    38ea:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	28 2f       	mov	r18, r24
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	8a 81       	ldd	r24, Y+2	; 0x02
    38f4:	9b 81       	ldd	r25, Y+3	; 0x03
    38f6:	fc 01       	movw	r30, r24
    38f8:	e2 0f       	add	r30, r18
    38fa:	f3 1f       	adc	r31, r19
    38fc:	80 81       	ld	r24, Z
    38fe:	83 32       	cpi	r24, 0x23	; 35
    3900:	31 f7       	brne	.-52     	; 0x38ce <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	8a 81       	ldd	r24, Y+2	; 0x02
    390a:	9b 81       	ldd	r25, Y+3	; 0x03
    390c:	fc 01       	movw	r30, r24
    390e:	e2 0f       	add	r30, r18
    3910:	f3 1f       	adc	r31, r19
    3912:	10 82       	st	Z, r1
}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	08 95       	ret

00003924 <__udivmodsi4>:
    3924:	a1 e2       	ldi	r26, 0x21	; 33
    3926:	1a 2e       	mov	r1, r26
    3928:	aa 1b       	sub	r26, r26
    392a:	bb 1b       	sub	r27, r27
    392c:	fd 01       	movw	r30, r26
    392e:	0d c0       	rjmp	.+26     	; 0x394a <__udivmodsi4_ep>

00003930 <__udivmodsi4_loop>:
    3930:	aa 1f       	adc	r26, r26
    3932:	bb 1f       	adc	r27, r27
    3934:	ee 1f       	adc	r30, r30
    3936:	ff 1f       	adc	r31, r31
    3938:	a2 17       	cp	r26, r18
    393a:	b3 07       	cpc	r27, r19
    393c:	e4 07       	cpc	r30, r20
    393e:	f5 07       	cpc	r31, r21
    3940:	20 f0       	brcs	.+8      	; 0x394a <__udivmodsi4_ep>
    3942:	a2 1b       	sub	r26, r18
    3944:	b3 0b       	sbc	r27, r19
    3946:	e4 0b       	sbc	r30, r20
    3948:	f5 0b       	sbc	r31, r21

0000394a <__udivmodsi4_ep>:
    394a:	66 1f       	adc	r22, r22
    394c:	77 1f       	adc	r23, r23
    394e:	88 1f       	adc	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	1a 94       	dec	r1
    3954:	69 f7       	brne	.-38     	; 0x3930 <__udivmodsi4_loop>
    3956:	60 95       	com	r22
    3958:	70 95       	com	r23
    395a:	80 95       	com	r24
    395c:	90 95       	com	r25
    395e:	9b 01       	movw	r18, r22
    3960:	ac 01       	movw	r20, r24
    3962:	bd 01       	movw	r22, r26
    3964:	cf 01       	movw	r24, r30
    3966:	08 95       	ret

00003968 <__prologue_saves__>:
    3968:	2f 92       	push	r2
    396a:	3f 92       	push	r3
    396c:	4f 92       	push	r4
    396e:	5f 92       	push	r5
    3970:	6f 92       	push	r6
    3972:	7f 92       	push	r7
    3974:	8f 92       	push	r8
    3976:	9f 92       	push	r9
    3978:	af 92       	push	r10
    397a:	bf 92       	push	r11
    397c:	cf 92       	push	r12
    397e:	df 92       	push	r13
    3980:	ef 92       	push	r14
    3982:	ff 92       	push	r15
    3984:	0f 93       	push	r16
    3986:	1f 93       	push	r17
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
    3990:	ca 1b       	sub	r28, r26
    3992:	db 0b       	sbc	r29, r27
    3994:	0f b6       	in	r0, 0x3f	; 63
    3996:	f8 94       	cli
    3998:	de bf       	out	0x3e, r29	; 62
    399a:	0f be       	out	0x3f, r0	; 63
    399c:	cd bf       	out	0x3d, r28	; 61
    399e:	09 94       	ijmp

000039a0 <__epilogue_restores__>:
    39a0:	2a 88       	ldd	r2, Y+18	; 0x12
    39a2:	39 88       	ldd	r3, Y+17	; 0x11
    39a4:	48 88       	ldd	r4, Y+16	; 0x10
    39a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    39a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    39aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    39ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    39b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39b2:	b9 84       	ldd	r11, Y+9	; 0x09
    39b4:	c8 84       	ldd	r12, Y+8	; 0x08
    39b6:	df 80       	ldd	r13, Y+7	; 0x07
    39b8:	ee 80       	ldd	r14, Y+6	; 0x06
    39ba:	fd 80       	ldd	r15, Y+5	; 0x05
    39bc:	0c 81       	ldd	r16, Y+4	; 0x04
    39be:	1b 81       	ldd	r17, Y+3	; 0x03
    39c0:	aa 81       	ldd	r26, Y+2	; 0x02
    39c2:	b9 81       	ldd	r27, Y+1	; 0x01
    39c4:	ce 0f       	add	r28, r30
    39c6:	d1 1d       	adc	r29, r1
    39c8:	0f b6       	in	r0, 0x3f	; 63
    39ca:	f8 94       	cli
    39cc:	de bf       	out	0x3e, r29	; 62
    39ce:	0f be       	out	0x3f, r0	; 63
    39d0:	cd bf       	out	0x3d, r28	; 61
    39d2:	ed 01       	movw	r28, r26
    39d4:	08 95       	ret

000039d6 <itoa>:
    39d6:	fb 01       	movw	r30, r22
    39d8:	9f 01       	movw	r18, r30
    39da:	e8 94       	clt
    39dc:	42 30       	cpi	r20, 0x02	; 2
    39de:	c4 f0       	brlt	.+48     	; 0x3a10 <itoa+0x3a>
    39e0:	45 32       	cpi	r20, 0x25	; 37
    39e2:	b4 f4       	brge	.+44     	; 0x3a10 <itoa+0x3a>
    39e4:	4a 30       	cpi	r20, 0x0A	; 10
    39e6:	29 f4       	brne	.+10     	; 0x39f2 <itoa+0x1c>
    39e8:	97 fb       	bst	r25, 7
    39ea:	1e f4       	brtc	.+6      	; 0x39f2 <itoa+0x1c>
    39ec:	90 95       	com	r25
    39ee:	81 95       	neg	r24
    39f0:	9f 4f       	sbci	r25, 0xFF	; 255
    39f2:	64 2f       	mov	r22, r20
    39f4:	77 27       	eor	r23, r23
    39f6:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <__udivmodhi4>
    39fa:	80 5d       	subi	r24, 0xD0	; 208
    39fc:	8a 33       	cpi	r24, 0x3A	; 58
    39fe:	0c f0       	brlt	.+2      	; 0x3a02 <itoa+0x2c>
    3a00:	89 5d       	subi	r24, 0xD9	; 217
    3a02:	81 93       	st	Z+, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	a1 f7       	brne	.-24     	; 0x39f2 <itoa+0x1c>
    3a0a:	16 f4       	brtc	.+4      	; 0x3a10 <itoa+0x3a>
    3a0c:	5d e2       	ldi	r21, 0x2D	; 45
    3a0e:	51 93       	st	Z+, r21
    3a10:	10 82       	st	Z, r1
    3a12:	c9 01       	movw	r24, r18
    3a14:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <strrev>

00003a18 <strrev>:
    3a18:	dc 01       	movw	r26, r24
    3a1a:	fc 01       	movw	r30, r24
    3a1c:	67 2f       	mov	r22, r23
    3a1e:	71 91       	ld	r23, Z+
    3a20:	77 23       	and	r23, r23
    3a22:	e1 f7       	brne	.-8      	; 0x3a1c <strrev+0x4>
    3a24:	32 97       	sbiw	r30, 0x02	; 2
    3a26:	04 c0       	rjmp	.+8      	; 0x3a30 <strrev+0x18>
    3a28:	7c 91       	ld	r23, X
    3a2a:	6d 93       	st	X+, r22
    3a2c:	70 83       	st	Z, r23
    3a2e:	62 91       	ld	r22, -Z
    3a30:	ae 17       	cp	r26, r30
    3a32:	bf 07       	cpc	r27, r31
    3a34:	c8 f3       	brcs	.-14     	; 0x3a28 <strrev+0x10>
    3a36:	08 95       	ret

00003a38 <__udivmodhi4>:
    3a38:	aa 1b       	sub	r26, r26
    3a3a:	bb 1b       	sub	r27, r27
    3a3c:	51 e1       	ldi	r21, 0x11	; 17
    3a3e:	07 c0       	rjmp	.+14     	; 0x3a4e <__udivmodhi4_ep>

00003a40 <__udivmodhi4_loop>:
    3a40:	aa 1f       	adc	r26, r26
    3a42:	bb 1f       	adc	r27, r27
    3a44:	a6 17       	cp	r26, r22
    3a46:	b7 07       	cpc	r27, r23
    3a48:	10 f0       	brcs	.+4      	; 0x3a4e <__udivmodhi4_ep>
    3a4a:	a6 1b       	sub	r26, r22
    3a4c:	b7 0b       	sbc	r27, r23

00003a4e <__udivmodhi4_ep>:
    3a4e:	88 1f       	adc	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	5a 95       	dec	r21
    3a54:	a9 f7       	brne	.-22     	; 0x3a40 <__udivmodhi4_loop>
    3a56:	80 95       	com	r24
    3a58:	90 95       	com	r25
    3a5a:	bc 01       	movw	r22, r24
    3a5c:	cd 01       	movw	r24, r26
    3a5e:	08 95       	ret

00003a60 <_exit>:
    3a60:	f8 94       	cli

00003a62 <__stop_program>:
    3a62:	ff cf       	rjmp	.-2      	; 0x3a62 <__stop_program>
